/**
 * generated by Xtext 2.9.2
 */
package org.xtext.example.mydsl.myDsl.impl;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.xtext.example.mydsl.myDsl.MyDslPackage;
import org.xtext.example.mydsl.myDsl.assignment_operator;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>assignment operator</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.assignment_operatorImpl#getMul_assign <em>Mul assign</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.assignment_operatorImpl#getDiv_assign <em>Div assign</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.assignment_operatorImpl#getMod_assign <em>Mod assign</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.assignment_operatorImpl#getAdd_assign <em>Add assign</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.assignment_operatorImpl#getSub_assign <em>Sub assign</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.assignment_operatorImpl#getLeft_assign <em>Left assign</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.assignment_operatorImpl#getRight_assign <em>Right assign</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.assignment_operatorImpl#getAnd_assign <em>And assign</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.assignment_operatorImpl#getXor_assign <em>Xor assign</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.assignment_operatorImpl#getOr_assign <em>Or assign</em>}</li>
 * </ul>
 *
 * @generated
 */
public class assignment_operatorImpl extends MinimalEObjectImpl.Container implements assignment_operator
{
  /**
   * The default value of the '{@link #getMul_assign() <em>Mul assign</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMul_assign()
   * @generated
   * @ordered
   */
  protected static final String MUL_ASSIGN_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getMul_assign() <em>Mul assign</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMul_assign()
   * @generated
   * @ordered
   */
  protected String mul_assign = MUL_ASSIGN_EDEFAULT;

  /**
   * The default value of the '{@link #getDiv_assign() <em>Div assign</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDiv_assign()
   * @generated
   * @ordered
   */
  protected static final String DIV_ASSIGN_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getDiv_assign() <em>Div assign</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDiv_assign()
   * @generated
   * @ordered
   */
  protected String div_assign = DIV_ASSIGN_EDEFAULT;

  /**
   * The default value of the '{@link #getMod_assign() <em>Mod assign</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMod_assign()
   * @generated
   * @ordered
   */
  protected static final String MOD_ASSIGN_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getMod_assign() <em>Mod assign</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMod_assign()
   * @generated
   * @ordered
   */
  protected String mod_assign = MOD_ASSIGN_EDEFAULT;

  /**
   * The default value of the '{@link #getAdd_assign() <em>Add assign</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAdd_assign()
   * @generated
   * @ordered
   */
  protected static final String ADD_ASSIGN_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getAdd_assign() <em>Add assign</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAdd_assign()
   * @generated
   * @ordered
   */
  protected String add_assign = ADD_ASSIGN_EDEFAULT;

  /**
   * The default value of the '{@link #getSub_assign() <em>Sub assign</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSub_assign()
   * @generated
   * @ordered
   */
  protected static final String SUB_ASSIGN_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getSub_assign() <em>Sub assign</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSub_assign()
   * @generated
   * @ordered
   */
  protected String sub_assign = SUB_ASSIGN_EDEFAULT;

  /**
   * The default value of the '{@link #getLeft_assign() <em>Left assign</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLeft_assign()
   * @generated
   * @ordered
   */
  protected static final String LEFT_ASSIGN_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getLeft_assign() <em>Left assign</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLeft_assign()
   * @generated
   * @ordered
   */
  protected String left_assign = LEFT_ASSIGN_EDEFAULT;

  /**
   * The default value of the '{@link #getRight_assign() <em>Right assign</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRight_assign()
   * @generated
   * @ordered
   */
  protected static final String RIGHT_ASSIGN_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getRight_assign() <em>Right assign</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRight_assign()
   * @generated
   * @ordered
   */
  protected String right_assign = RIGHT_ASSIGN_EDEFAULT;

  /**
   * The default value of the '{@link #getAnd_assign() <em>And assign</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAnd_assign()
   * @generated
   * @ordered
   */
  protected static final String AND_ASSIGN_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getAnd_assign() <em>And assign</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAnd_assign()
   * @generated
   * @ordered
   */
  protected String and_assign = AND_ASSIGN_EDEFAULT;

  /**
   * The default value of the '{@link #getXor_assign() <em>Xor assign</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getXor_assign()
   * @generated
   * @ordered
   */
  protected static final String XOR_ASSIGN_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getXor_assign() <em>Xor assign</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getXor_assign()
   * @generated
   * @ordered
   */
  protected String xor_assign = XOR_ASSIGN_EDEFAULT;

  /**
   * The default value of the '{@link #getOr_assign() <em>Or assign</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOr_assign()
   * @generated
   * @ordered
   */
  protected static final String OR_ASSIGN_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getOr_assign() <em>Or assign</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOr_assign()
   * @generated
   * @ordered
   */
  protected String or_assign = OR_ASSIGN_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected assignment_operatorImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MyDslPackage.Literals.ASSIGNMENT_OPERATOR;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getMul_assign()
  {
    return mul_assign;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setMul_assign(String newMul_assign)
  {
    String oldMul_assign = mul_assign;
    mul_assign = newMul_assign;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyDslPackage.ASSIGNMENT_OPERATOR__MUL_ASSIGN, oldMul_assign, mul_assign));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getDiv_assign()
  {
    return div_assign;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setDiv_assign(String newDiv_assign)
  {
    String oldDiv_assign = div_assign;
    div_assign = newDiv_assign;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyDslPackage.ASSIGNMENT_OPERATOR__DIV_ASSIGN, oldDiv_assign, div_assign));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getMod_assign()
  {
    return mod_assign;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setMod_assign(String newMod_assign)
  {
    String oldMod_assign = mod_assign;
    mod_assign = newMod_assign;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyDslPackage.ASSIGNMENT_OPERATOR__MOD_ASSIGN, oldMod_assign, mod_assign));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getAdd_assign()
  {
    return add_assign;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setAdd_assign(String newAdd_assign)
  {
    String oldAdd_assign = add_assign;
    add_assign = newAdd_assign;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyDslPackage.ASSIGNMENT_OPERATOR__ADD_ASSIGN, oldAdd_assign, add_assign));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getSub_assign()
  {
    return sub_assign;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setSub_assign(String newSub_assign)
  {
    String oldSub_assign = sub_assign;
    sub_assign = newSub_assign;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyDslPackage.ASSIGNMENT_OPERATOR__SUB_ASSIGN, oldSub_assign, sub_assign));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getLeft_assign()
  {
    return left_assign;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setLeft_assign(String newLeft_assign)
  {
    String oldLeft_assign = left_assign;
    left_assign = newLeft_assign;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyDslPackage.ASSIGNMENT_OPERATOR__LEFT_ASSIGN, oldLeft_assign, left_assign));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getRight_assign()
  {
    return right_assign;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setRight_assign(String newRight_assign)
  {
    String oldRight_assign = right_assign;
    right_assign = newRight_assign;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyDslPackage.ASSIGNMENT_OPERATOR__RIGHT_ASSIGN, oldRight_assign, right_assign));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getAnd_assign()
  {
    return and_assign;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setAnd_assign(String newAnd_assign)
  {
    String oldAnd_assign = and_assign;
    and_assign = newAnd_assign;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyDslPackage.ASSIGNMENT_OPERATOR__AND_ASSIGN, oldAnd_assign, and_assign));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getXor_assign()
  {
    return xor_assign;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setXor_assign(String newXor_assign)
  {
    String oldXor_assign = xor_assign;
    xor_assign = newXor_assign;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyDslPackage.ASSIGNMENT_OPERATOR__XOR_ASSIGN, oldXor_assign, xor_assign));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getOr_assign()
  {
    return or_assign;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setOr_assign(String newOr_assign)
  {
    String oldOr_assign = or_assign;
    or_assign = newOr_assign;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyDslPackage.ASSIGNMENT_OPERATOR__OR_ASSIGN, oldOr_assign, or_assign));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MyDslPackage.ASSIGNMENT_OPERATOR__MUL_ASSIGN:
        return getMul_assign();
      case MyDslPackage.ASSIGNMENT_OPERATOR__DIV_ASSIGN:
        return getDiv_assign();
      case MyDslPackage.ASSIGNMENT_OPERATOR__MOD_ASSIGN:
        return getMod_assign();
      case MyDslPackage.ASSIGNMENT_OPERATOR__ADD_ASSIGN:
        return getAdd_assign();
      case MyDslPackage.ASSIGNMENT_OPERATOR__SUB_ASSIGN:
        return getSub_assign();
      case MyDslPackage.ASSIGNMENT_OPERATOR__LEFT_ASSIGN:
        return getLeft_assign();
      case MyDslPackage.ASSIGNMENT_OPERATOR__RIGHT_ASSIGN:
        return getRight_assign();
      case MyDslPackage.ASSIGNMENT_OPERATOR__AND_ASSIGN:
        return getAnd_assign();
      case MyDslPackage.ASSIGNMENT_OPERATOR__XOR_ASSIGN:
        return getXor_assign();
      case MyDslPackage.ASSIGNMENT_OPERATOR__OR_ASSIGN:
        return getOr_assign();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MyDslPackage.ASSIGNMENT_OPERATOR__MUL_ASSIGN:
        setMul_assign((String)newValue);
        return;
      case MyDslPackage.ASSIGNMENT_OPERATOR__DIV_ASSIGN:
        setDiv_assign((String)newValue);
        return;
      case MyDslPackage.ASSIGNMENT_OPERATOR__MOD_ASSIGN:
        setMod_assign((String)newValue);
        return;
      case MyDslPackage.ASSIGNMENT_OPERATOR__ADD_ASSIGN:
        setAdd_assign((String)newValue);
        return;
      case MyDslPackage.ASSIGNMENT_OPERATOR__SUB_ASSIGN:
        setSub_assign((String)newValue);
        return;
      case MyDslPackage.ASSIGNMENT_OPERATOR__LEFT_ASSIGN:
        setLeft_assign((String)newValue);
        return;
      case MyDslPackage.ASSIGNMENT_OPERATOR__RIGHT_ASSIGN:
        setRight_assign((String)newValue);
        return;
      case MyDslPackage.ASSIGNMENT_OPERATOR__AND_ASSIGN:
        setAnd_assign((String)newValue);
        return;
      case MyDslPackage.ASSIGNMENT_OPERATOR__XOR_ASSIGN:
        setXor_assign((String)newValue);
        return;
      case MyDslPackage.ASSIGNMENT_OPERATOR__OR_ASSIGN:
        setOr_assign((String)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MyDslPackage.ASSIGNMENT_OPERATOR__MUL_ASSIGN:
        setMul_assign(MUL_ASSIGN_EDEFAULT);
        return;
      case MyDslPackage.ASSIGNMENT_OPERATOR__DIV_ASSIGN:
        setDiv_assign(DIV_ASSIGN_EDEFAULT);
        return;
      case MyDslPackage.ASSIGNMENT_OPERATOR__MOD_ASSIGN:
        setMod_assign(MOD_ASSIGN_EDEFAULT);
        return;
      case MyDslPackage.ASSIGNMENT_OPERATOR__ADD_ASSIGN:
        setAdd_assign(ADD_ASSIGN_EDEFAULT);
        return;
      case MyDslPackage.ASSIGNMENT_OPERATOR__SUB_ASSIGN:
        setSub_assign(SUB_ASSIGN_EDEFAULT);
        return;
      case MyDslPackage.ASSIGNMENT_OPERATOR__LEFT_ASSIGN:
        setLeft_assign(LEFT_ASSIGN_EDEFAULT);
        return;
      case MyDslPackage.ASSIGNMENT_OPERATOR__RIGHT_ASSIGN:
        setRight_assign(RIGHT_ASSIGN_EDEFAULT);
        return;
      case MyDslPackage.ASSIGNMENT_OPERATOR__AND_ASSIGN:
        setAnd_assign(AND_ASSIGN_EDEFAULT);
        return;
      case MyDslPackage.ASSIGNMENT_OPERATOR__XOR_ASSIGN:
        setXor_assign(XOR_ASSIGN_EDEFAULT);
        return;
      case MyDslPackage.ASSIGNMENT_OPERATOR__OR_ASSIGN:
        setOr_assign(OR_ASSIGN_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MyDslPackage.ASSIGNMENT_OPERATOR__MUL_ASSIGN:
        return MUL_ASSIGN_EDEFAULT == null ? mul_assign != null : !MUL_ASSIGN_EDEFAULT.equals(mul_assign);
      case MyDslPackage.ASSIGNMENT_OPERATOR__DIV_ASSIGN:
        return DIV_ASSIGN_EDEFAULT == null ? div_assign != null : !DIV_ASSIGN_EDEFAULT.equals(div_assign);
      case MyDslPackage.ASSIGNMENT_OPERATOR__MOD_ASSIGN:
        return MOD_ASSIGN_EDEFAULT == null ? mod_assign != null : !MOD_ASSIGN_EDEFAULT.equals(mod_assign);
      case MyDslPackage.ASSIGNMENT_OPERATOR__ADD_ASSIGN:
        return ADD_ASSIGN_EDEFAULT == null ? add_assign != null : !ADD_ASSIGN_EDEFAULT.equals(add_assign);
      case MyDslPackage.ASSIGNMENT_OPERATOR__SUB_ASSIGN:
        return SUB_ASSIGN_EDEFAULT == null ? sub_assign != null : !SUB_ASSIGN_EDEFAULT.equals(sub_assign);
      case MyDslPackage.ASSIGNMENT_OPERATOR__LEFT_ASSIGN:
        return LEFT_ASSIGN_EDEFAULT == null ? left_assign != null : !LEFT_ASSIGN_EDEFAULT.equals(left_assign);
      case MyDslPackage.ASSIGNMENT_OPERATOR__RIGHT_ASSIGN:
        return RIGHT_ASSIGN_EDEFAULT == null ? right_assign != null : !RIGHT_ASSIGN_EDEFAULT.equals(right_assign);
      case MyDslPackage.ASSIGNMENT_OPERATOR__AND_ASSIGN:
        return AND_ASSIGN_EDEFAULT == null ? and_assign != null : !AND_ASSIGN_EDEFAULT.equals(and_assign);
      case MyDslPackage.ASSIGNMENT_OPERATOR__XOR_ASSIGN:
        return XOR_ASSIGN_EDEFAULT == null ? xor_assign != null : !XOR_ASSIGN_EDEFAULT.equals(xor_assign);
      case MyDslPackage.ASSIGNMENT_OPERATOR__OR_ASSIGN:
        return OR_ASSIGN_EDEFAULT == null ? or_assign != null : !OR_ASSIGN_EDEFAULT.equals(or_assign);
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (mul_assign: ");
    result.append(mul_assign);
    result.append(", div_assign: ");
    result.append(div_assign);
    result.append(", mod_assign: ");
    result.append(mod_assign);
    result.append(", add_assign: ");
    result.append(add_assign);
    result.append(", sub_assign: ");
    result.append(sub_assign);
    result.append(", left_assign: ");
    result.append(left_assign);
    result.append(", right_assign: ");
    result.append(right_assign);
    result.append(", and_assign: ");
    result.append(and_assign);
    result.append(", xor_assign: ");
    result.append(xor_assign);
    result.append(", or_assign: ");
    result.append(or_assign);
    result.append(')');
    return result.toString();
  }

} //assignment_operatorImpl
