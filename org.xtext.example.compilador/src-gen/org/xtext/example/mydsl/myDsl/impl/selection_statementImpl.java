/**
 * generated by Xtext 2.9.2
 */
package org.xtext.example.mydsl.myDsl.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.xtext.example.mydsl.myDsl.MyDslPackage;
import org.xtext.example.mydsl.myDsl.selection_statement;
import org.xtext.example.mydsl.myDsl.simple_expression;
import org.xtext.example.mydsl.myDsl.statement;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>selection statement</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.selection_statementImpl#getIf <em>If</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.selection_statementImpl#getExpression <em>Expression</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.selection_statementImpl#getStatement <em>Statement</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.selection_statementImpl#getElse <em>Else</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.selection_statementImpl#getStatement2 <em>Statement2</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.selection_statementImpl#getSwitch <em>Switch</em>}</li>
 * </ul>
 *
 * @generated
 */
public class selection_statementImpl extends MinimalEObjectImpl.Container implements selection_statement
{
  /**
   * The default value of the '{@link #getIf() <em>If</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getIf()
   * @generated
   * @ordered
   */
  protected static final String IF_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getIf() <em>If</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getIf()
   * @generated
   * @ordered
   */
  protected String if_ = IF_EDEFAULT;

  /**
   * The cached value of the '{@link #getExpression() <em>Expression</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getExpression()
   * @generated
   * @ordered
   */
  protected simple_expression expression;

  /**
   * The cached value of the '{@link #getStatement() <em>Statement</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getStatement()
   * @generated
   * @ordered
   */
  protected statement statement;

  /**
   * The default value of the '{@link #getElse() <em>Else</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getElse()
   * @generated
   * @ordered
   */
  protected static final String ELSE_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getElse() <em>Else</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getElse()
   * @generated
   * @ordered
   */
  protected String else_ = ELSE_EDEFAULT;

  /**
   * The cached value of the '{@link #getStatement2() <em>Statement2</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getStatement2()
   * @generated
   * @ordered
   */
  protected statement statement2;

  /**
   * The default value of the '{@link #getSwitch() <em>Switch</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSwitch()
   * @generated
   * @ordered
   */
  protected static final String SWITCH_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getSwitch() <em>Switch</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSwitch()
   * @generated
   * @ordered
   */
  protected String switch_ = SWITCH_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected selection_statementImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MyDslPackage.Literals.SELECTION_STATEMENT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getIf()
  {
    return if_;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setIf(String newIf)
  {
    String oldIf = if_;
    if_ = newIf;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyDslPackage.SELECTION_STATEMENT__IF, oldIf, if_));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public simple_expression getExpression()
  {
    return expression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetExpression(simple_expression newExpression, NotificationChain msgs)
  {
    simple_expression oldExpression = expression;
    expression = newExpression;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MyDslPackage.SELECTION_STATEMENT__EXPRESSION, oldExpression, newExpression);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setExpression(simple_expression newExpression)
  {
    if (newExpression != expression)
    {
      NotificationChain msgs = null;
      if (expression != null)
        msgs = ((InternalEObject)expression).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MyDslPackage.SELECTION_STATEMENT__EXPRESSION, null, msgs);
      if (newExpression != null)
        msgs = ((InternalEObject)newExpression).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MyDslPackage.SELECTION_STATEMENT__EXPRESSION, null, msgs);
      msgs = basicSetExpression(newExpression, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyDslPackage.SELECTION_STATEMENT__EXPRESSION, newExpression, newExpression));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public statement getStatement()
  {
    return statement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetStatement(statement newStatement, NotificationChain msgs)
  {
    statement oldStatement = statement;
    statement = newStatement;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MyDslPackage.SELECTION_STATEMENT__STATEMENT, oldStatement, newStatement);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setStatement(statement newStatement)
  {
    if (newStatement != statement)
    {
      NotificationChain msgs = null;
      if (statement != null)
        msgs = ((InternalEObject)statement).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MyDslPackage.SELECTION_STATEMENT__STATEMENT, null, msgs);
      if (newStatement != null)
        msgs = ((InternalEObject)newStatement).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MyDslPackage.SELECTION_STATEMENT__STATEMENT, null, msgs);
      msgs = basicSetStatement(newStatement, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyDslPackage.SELECTION_STATEMENT__STATEMENT, newStatement, newStatement));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getElse()
  {
    return else_;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setElse(String newElse)
  {
    String oldElse = else_;
    else_ = newElse;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyDslPackage.SELECTION_STATEMENT__ELSE, oldElse, else_));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public statement getStatement2()
  {
    return statement2;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetStatement2(statement newStatement2, NotificationChain msgs)
  {
    statement oldStatement2 = statement2;
    statement2 = newStatement2;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MyDslPackage.SELECTION_STATEMENT__STATEMENT2, oldStatement2, newStatement2);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setStatement2(statement newStatement2)
  {
    if (newStatement2 != statement2)
    {
      NotificationChain msgs = null;
      if (statement2 != null)
        msgs = ((InternalEObject)statement2).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MyDslPackage.SELECTION_STATEMENT__STATEMENT2, null, msgs);
      if (newStatement2 != null)
        msgs = ((InternalEObject)newStatement2).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MyDslPackage.SELECTION_STATEMENT__STATEMENT2, null, msgs);
      msgs = basicSetStatement2(newStatement2, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyDslPackage.SELECTION_STATEMENT__STATEMENT2, newStatement2, newStatement2));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getSwitch()
  {
    return switch_;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setSwitch(String newSwitch)
  {
    String oldSwitch = switch_;
    switch_ = newSwitch;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyDslPackage.SELECTION_STATEMENT__SWITCH, oldSwitch, switch_));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case MyDslPackage.SELECTION_STATEMENT__EXPRESSION:
        return basicSetExpression(null, msgs);
      case MyDslPackage.SELECTION_STATEMENT__STATEMENT:
        return basicSetStatement(null, msgs);
      case MyDslPackage.SELECTION_STATEMENT__STATEMENT2:
        return basicSetStatement2(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MyDslPackage.SELECTION_STATEMENT__IF:
        return getIf();
      case MyDslPackage.SELECTION_STATEMENT__EXPRESSION:
        return getExpression();
      case MyDslPackage.SELECTION_STATEMENT__STATEMENT:
        return getStatement();
      case MyDslPackage.SELECTION_STATEMENT__ELSE:
        return getElse();
      case MyDslPackage.SELECTION_STATEMENT__STATEMENT2:
        return getStatement2();
      case MyDslPackage.SELECTION_STATEMENT__SWITCH:
        return getSwitch();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MyDslPackage.SELECTION_STATEMENT__IF:
        setIf((String)newValue);
        return;
      case MyDslPackage.SELECTION_STATEMENT__EXPRESSION:
        setExpression((simple_expression)newValue);
        return;
      case MyDslPackage.SELECTION_STATEMENT__STATEMENT:
        setStatement((statement)newValue);
        return;
      case MyDslPackage.SELECTION_STATEMENT__ELSE:
        setElse((String)newValue);
        return;
      case MyDslPackage.SELECTION_STATEMENT__STATEMENT2:
        setStatement2((statement)newValue);
        return;
      case MyDslPackage.SELECTION_STATEMENT__SWITCH:
        setSwitch((String)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MyDslPackage.SELECTION_STATEMENT__IF:
        setIf(IF_EDEFAULT);
        return;
      case MyDslPackage.SELECTION_STATEMENT__EXPRESSION:
        setExpression((simple_expression)null);
        return;
      case MyDslPackage.SELECTION_STATEMENT__STATEMENT:
        setStatement((statement)null);
        return;
      case MyDslPackage.SELECTION_STATEMENT__ELSE:
        setElse(ELSE_EDEFAULT);
        return;
      case MyDslPackage.SELECTION_STATEMENT__STATEMENT2:
        setStatement2((statement)null);
        return;
      case MyDslPackage.SELECTION_STATEMENT__SWITCH:
        setSwitch(SWITCH_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MyDslPackage.SELECTION_STATEMENT__IF:
        return IF_EDEFAULT == null ? if_ != null : !IF_EDEFAULT.equals(if_);
      case MyDslPackage.SELECTION_STATEMENT__EXPRESSION:
        return expression != null;
      case MyDslPackage.SELECTION_STATEMENT__STATEMENT:
        return statement != null;
      case MyDslPackage.SELECTION_STATEMENT__ELSE:
        return ELSE_EDEFAULT == null ? else_ != null : !ELSE_EDEFAULT.equals(else_);
      case MyDslPackage.SELECTION_STATEMENT__STATEMENT2:
        return statement2 != null;
      case MyDslPackage.SELECTION_STATEMENT__SWITCH:
        return SWITCH_EDEFAULT == null ? switch_ != null : !SWITCH_EDEFAULT.equals(switch_);
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (if: ");
    result.append(if_);
    result.append(", else: ");
    result.append(else_);
    result.append(", switch: ");
    result.append(switch_);
    result.append(')');
    return result.toString();
  }

} //selection_statementImpl
