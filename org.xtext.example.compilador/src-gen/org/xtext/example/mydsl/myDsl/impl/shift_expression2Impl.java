/**
 * generated by Xtext 2.9.2
 */
package org.xtext.example.mydsl.myDsl.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.xtext.example.mydsl.myDsl.MyDslPackage;
import org.xtext.example.mydsl.myDsl.additive_expression;
import org.xtext.example.mydsl.myDsl.shift_expression2;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>shift expression2</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.shift_expression2Impl#getLeft_op <em>Left op</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.shift_expression2Impl#getAdditive_expression <em>Additive expression</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.shift_expression2Impl#getShift_expression2 <em>Shift expression2</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.shift_expression2Impl#getRight_op <em>Right op</em>}</li>
 * </ul>
 *
 * @generated
 */
public class shift_expression2Impl extends MinimalEObjectImpl.Container implements shift_expression2
{
  /**
   * The default value of the '{@link #getLeft_op() <em>Left op</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLeft_op()
   * @generated
   * @ordered
   */
  protected static final String LEFT_OP_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getLeft_op() <em>Left op</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLeft_op()
   * @generated
   * @ordered
   */
  protected String left_op = LEFT_OP_EDEFAULT;

  /**
   * The cached value of the '{@link #getAdditive_expression() <em>Additive expression</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAdditive_expression()
   * @generated
   * @ordered
   */
  protected additive_expression additive_expression;

  /**
   * The cached value of the '{@link #getShift_expression2() <em>Shift expression2</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getShift_expression2()
   * @generated
   * @ordered
   */
  protected shift_expression2 shift_expression2;

  /**
   * The default value of the '{@link #getRight_op() <em>Right op</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRight_op()
   * @generated
   * @ordered
   */
  protected static final String RIGHT_OP_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getRight_op() <em>Right op</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRight_op()
   * @generated
   * @ordered
   */
  protected String right_op = RIGHT_OP_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected shift_expression2Impl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MyDslPackage.Literals.SHIFT_EXPRESSION2;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getLeft_op()
  {
    return left_op;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setLeft_op(String newLeft_op)
  {
    String oldLeft_op = left_op;
    left_op = newLeft_op;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyDslPackage.SHIFT_EXPRESSION2__LEFT_OP, oldLeft_op, left_op));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public additive_expression getAdditive_expression()
  {
    return additive_expression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetAdditive_expression(additive_expression newAdditive_expression, NotificationChain msgs)
  {
    additive_expression oldAdditive_expression = additive_expression;
    additive_expression = newAdditive_expression;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MyDslPackage.SHIFT_EXPRESSION2__ADDITIVE_EXPRESSION, oldAdditive_expression, newAdditive_expression);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setAdditive_expression(additive_expression newAdditive_expression)
  {
    if (newAdditive_expression != additive_expression)
    {
      NotificationChain msgs = null;
      if (additive_expression != null)
        msgs = ((InternalEObject)additive_expression).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MyDslPackage.SHIFT_EXPRESSION2__ADDITIVE_EXPRESSION, null, msgs);
      if (newAdditive_expression != null)
        msgs = ((InternalEObject)newAdditive_expression).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MyDslPackage.SHIFT_EXPRESSION2__ADDITIVE_EXPRESSION, null, msgs);
      msgs = basicSetAdditive_expression(newAdditive_expression, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyDslPackage.SHIFT_EXPRESSION2__ADDITIVE_EXPRESSION, newAdditive_expression, newAdditive_expression));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public shift_expression2 getShift_expression2()
  {
    return shift_expression2;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetShift_expression2(shift_expression2 newShift_expression2, NotificationChain msgs)
  {
    shift_expression2 oldShift_expression2 = shift_expression2;
    shift_expression2 = newShift_expression2;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MyDslPackage.SHIFT_EXPRESSION2__SHIFT_EXPRESSION2, oldShift_expression2, newShift_expression2);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setShift_expression2(shift_expression2 newShift_expression2)
  {
    if (newShift_expression2 != shift_expression2)
    {
      NotificationChain msgs = null;
      if (shift_expression2 != null)
        msgs = ((InternalEObject)shift_expression2).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MyDslPackage.SHIFT_EXPRESSION2__SHIFT_EXPRESSION2, null, msgs);
      if (newShift_expression2 != null)
        msgs = ((InternalEObject)newShift_expression2).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MyDslPackage.SHIFT_EXPRESSION2__SHIFT_EXPRESSION2, null, msgs);
      msgs = basicSetShift_expression2(newShift_expression2, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyDslPackage.SHIFT_EXPRESSION2__SHIFT_EXPRESSION2, newShift_expression2, newShift_expression2));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getRight_op()
  {
    return right_op;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setRight_op(String newRight_op)
  {
    String oldRight_op = right_op;
    right_op = newRight_op;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyDslPackage.SHIFT_EXPRESSION2__RIGHT_OP, oldRight_op, right_op));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case MyDslPackage.SHIFT_EXPRESSION2__ADDITIVE_EXPRESSION:
        return basicSetAdditive_expression(null, msgs);
      case MyDslPackage.SHIFT_EXPRESSION2__SHIFT_EXPRESSION2:
        return basicSetShift_expression2(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MyDslPackage.SHIFT_EXPRESSION2__LEFT_OP:
        return getLeft_op();
      case MyDslPackage.SHIFT_EXPRESSION2__ADDITIVE_EXPRESSION:
        return getAdditive_expression();
      case MyDslPackage.SHIFT_EXPRESSION2__SHIFT_EXPRESSION2:
        return getShift_expression2();
      case MyDslPackage.SHIFT_EXPRESSION2__RIGHT_OP:
        return getRight_op();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MyDslPackage.SHIFT_EXPRESSION2__LEFT_OP:
        setLeft_op((String)newValue);
        return;
      case MyDslPackage.SHIFT_EXPRESSION2__ADDITIVE_EXPRESSION:
        setAdditive_expression((additive_expression)newValue);
        return;
      case MyDslPackage.SHIFT_EXPRESSION2__SHIFT_EXPRESSION2:
        setShift_expression2((shift_expression2)newValue);
        return;
      case MyDslPackage.SHIFT_EXPRESSION2__RIGHT_OP:
        setRight_op((String)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MyDslPackage.SHIFT_EXPRESSION2__LEFT_OP:
        setLeft_op(LEFT_OP_EDEFAULT);
        return;
      case MyDslPackage.SHIFT_EXPRESSION2__ADDITIVE_EXPRESSION:
        setAdditive_expression((additive_expression)null);
        return;
      case MyDslPackage.SHIFT_EXPRESSION2__SHIFT_EXPRESSION2:
        setShift_expression2((shift_expression2)null);
        return;
      case MyDslPackage.SHIFT_EXPRESSION2__RIGHT_OP:
        setRight_op(RIGHT_OP_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MyDslPackage.SHIFT_EXPRESSION2__LEFT_OP:
        return LEFT_OP_EDEFAULT == null ? left_op != null : !LEFT_OP_EDEFAULT.equals(left_op);
      case MyDslPackage.SHIFT_EXPRESSION2__ADDITIVE_EXPRESSION:
        return additive_expression != null;
      case MyDslPackage.SHIFT_EXPRESSION2__SHIFT_EXPRESSION2:
        return shift_expression2 != null;
      case MyDslPackage.SHIFT_EXPRESSION2__RIGHT_OP:
        return RIGHT_OP_EDEFAULT == null ? right_op != null : !RIGHT_OP_EDEFAULT.equals(right_op);
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (left_op: ");
    result.append(left_op);
    result.append(", right_op: ");
    result.append(right_op);
    result.append(')');
    return result.toString();
  }

} //shift_expression2Impl
