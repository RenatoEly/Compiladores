/**
 * generated by Xtext 2.9.2
 */
package org.xtext.example.mydsl.myDsl.util;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.util.Switch;

import org.xtext.example.mydsl.myDsl.*;

/**
 * <!-- begin-user-doc -->
 * The <b>Switch</b> for the model's inheritance hierarchy.
 * It supports the call {@link #doSwitch(EObject) doSwitch(object)}
 * to invoke the <code>caseXXX</code> method for each class of the model,
 * starting with the actual class of the object
 * and proceeding up the inheritance hierarchy
 * until a non-null result is returned,
 * which is the result of the switch.
 * <!-- end-user-doc -->
 * @see org.xtext.example.mydsl.myDsl.MyDslPackage
 * @generated
 */
public class MyDslSwitch<T> extends Switch<T>
{
  /**
   * The cached model package
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static MyDslPackage modelPackage;

  /**
   * Creates an instance of the switch.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MyDslSwitch()
  {
    if (modelPackage == null)
    {
      modelPackage = MyDslPackage.eINSTANCE;
    }
  }

  /**
   * Checks whether this is a switch for the given package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param ePackage the package in question.
   * @return whether this is a switch for the given package.
   * @generated
   */
  @Override
  protected boolean isSwitchFor(EPackage ePackage)
  {
    return ePackage == modelPackage;
  }

  /**
   * Calls <code>caseXXX</code> for each class of the model until one returns a non null result; it yields that result.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the first non-null result returned by a <code>caseXXX</code> call.
   * @generated
   */
  @Override
  protected T doSwitch(int classifierID, EObject theEObject)
  {
    switch (classifierID)
    {
      case MyDslPackage.MODEL:
      {
        Model model = (Model)theEObject;
        T result = caseModel(model);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.PRIMARY_EXPRESSION:
      {
        primary_expression primary_expression = (primary_expression)theEObject;
        T result = caseprimary_expression(primary_expression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.CONSTANT:
      {
        constant constant = (constant)theEObject;
        T result = caseconstant(constant);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.ENUMERATION_CONSTANT:
      {
        enumeration_constant enumeration_constant = (enumeration_constant)theEObject;
        T result = caseenumeration_constant(enumeration_constant);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.STRING_NOVA:
      {
        string_nova string_nova = (string_nova)theEObject;
        T result = casestring_nova(string_nova);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.GENERIC_SELECTION:
      {
        generic_selection generic_selection = (generic_selection)theEObject;
        T result = casegeneric_selection(generic_selection);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.GENERIC_ASSOC_LIST:
      {
        generic_assoc_list generic_assoc_list = (generic_assoc_list)theEObject;
        T result = casegeneric_assoc_list(generic_assoc_list);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.GENERIC_ASSOC_LIST2:
      {
        generic_assoc_list2 generic_assoc_list2 = (generic_assoc_list2)theEObject;
        T result = casegeneric_assoc_list2(generic_assoc_list2);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.GENERIC_ASSOCIATION:
      {
        generic_association generic_association = (generic_association)theEObject;
        T result = casegeneric_association(generic_association);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.POSTFIX_EXPRESSION:
      {
        postfix_expression postfix_expression = (postfix_expression)theEObject;
        T result = casepostfix_expression(postfix_expression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.POSTFIX_EXPRESSION2:
      {
        postfix_expression2 postfix_expression2 = (postfix_expression2)theEObject;
        T result = casepostfix_expression2(postfix_expression2);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.ARGUMENT_EXPRESSION_LIST:
      {
        argument_expression_list argument_expression_list = (argument_expression_list)theEObject;
        T result = caseargument_expression_list(argument_expression_list);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.ARGUMENT_EXPRESSION_LIST2:
      {
        argument_expression_list2 argument_expression_list2 = (argument_expression_list2)theEObject;
        T result = caseargument_expression_list2(argument_expression_list2);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.UNARY_EXPRESSION:
      {
        unary_expression unary_expression = (unary_expression)theEObject;
        T result = caseunary_expression(unary_expression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.CAST_EXPRESSION:
      {
        cast_expression cast_expression = (cast_expression)theEObject;
        T result = casecast_expression(cast_expression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.MULTIPLICATIVE_EXPRESSION:
      {
        multiplicative_expression multiplicative_expression = (multiplicative_expression)theEObject;
        T result = casemultiplicative_expression(multiplicative_expression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.MULTIPLICATIVE_EXPRESSION2:
      {
        multiplicative_expression2 multiplicative_expression2 = (multiplicative_expression2)theEObject;
        T result = casemultiplicative_expression2(multiplicative_expression2);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.ADDITIVE_EXPRESSION:
      {
        additive_expression additive_expression = (additive_expression)theEObject;
        T result = caseadditive_expression(additive_expression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.ADDITIVE_EXPRESSION2:
      {
        additive_expression2 additive_expression2 = (additive_expression2)theEObject;
        T result = caseadditive_expression2(additive_expression2);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.SHIFT_EXPRESSION:
      {
        shift_expression shift_expression = (shift_expression)theEObject;
        T result = caseshift_expression(shift_expression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.SHIFT_EXPRESSION2:
      {
        shift_expression2 shift_expression2 = (shift_expression2)theEObject;
        T result = caseshift_expression2(shift_expression2);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.RELATIONAL_EXPRESSION:
      {
        relational_expression relational_expression = (relational_expression)theEObject;
        T result = caserelational_expression(relational_expression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.RELATIONAL_EXPRESSION2:
      {
        relational_expression2 relational_expression2 = (relational_expression2)theEObject;
        T result = caserelational_expression2(relational_expression2);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.EQUALITY_EXPRESSION:
      {
        equality_expression equality_expression = (equality_expression)theEObject;
        T result = caseequality_expression(equality_expression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.EQUALITY_EXPRESSION2:
      {
        equality_expression2 equality_expression2 = (equality_expression2)theEObject;
        T result = caseequality_expression2(equality_expression2);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.AND_EXPRESSION:
      {
        and_expression and_expression = (and_expression)theEObject;
        T result = caseand_expression(and_expression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.AND_EXPRESSION2:
      {
        and_expression2 and_expression2 = (and_expression2)theEObject;
        T result = caseand_expression2(and_expression2);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.EXCLUSIVE_OR_EXPRESSION:
      {
        exclusive_or_expression exclusive_or_expression = (exclusive_or_expression)theEObject;
        T result = caseexclusive_or_expression(exclusive_or_expression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.EXCLUSIVE_OR_EXPRESSION2:
      {
        exclusive_or_expression2 exclusive_or_expression2 = (exclusive_or_expression2)theEObject;
        T result = caseexclusive_or_expression2(exclusive_or_expression2);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.INCLUSIVE_OR_EXPRESSION:
      {
        inclusive_or_expression inclusive_or_expression = (inclusive_or_expression)theEObject;
        T result = caseinclusive_or_expression(inclusive_or_expression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.INCLUSIVE_OR_EXPRESSION2:
      {
        inclusive_or_expression2 inclusive_or_expression2 = (inclusive_or_expression2)theEObject;
        T result = caseinclusive_or_expression2(inclusive_or_expression2);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.LOGICAL_AND_EXPRESSION:
      {
        logical_and_expression logical_and_expression = (logical_and_expression)theEObject;
        T result = caselogical_and_expression(logical_and_expression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.LOGICAL_AND_EXPRESSION2:
      {
        logical_and_expression2 logical_and_expression2 = (logical_and_expression2)theEObject;
        T result = caselogical_and_expression2(logical_and_expression2);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.LOGICAL_OR_EXPRESSION:
      {
        logical_or_expression logical_or_expression = (logical_or_expression)theEObject;
        T result = caselogical_or_expression(logical_or_expression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.LOGICAL_OR_EXPRESSION2:
      {
        logical_or_expression2 logical_or_expression2 = (logical_or_expression2)theEObject;
        T result = caselogical_or_expression2(logical_or_expression2);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.CONDITIONAL_EXPRESSION:
      {
        conditional_expression conditional_expression = (conditional_expression)theEObject;
        T result = caseconditional_expression(conditional_expression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.ASSIGNMENT_EXPRESSION:
      {
        assignment_expression assignment_expression = (assignment_expression)theEObject;
        T result = caseassignment_expression(assignment_expression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.ASSIGNMENT_OPERATOR:
      {
        assignment_operator assignment_operator = (assignment_operator)theEObject;
        T result = caseassignment_operator(assignment_operator);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.EXPRESSION:
      {
        expression expression = (expression)theEObject;
        T result = caseexpression(expression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.EXPRESSION2:
      {
        expression2 expression2 = (expression2)theEObject;
        T result = caseexpression2(expression2);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.CONSTANT_EXPRESSION:
      {
        constant_expression constant_expression = (constant_expression)theEObject;
        T result = caseconstant_expression(constant_expression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.DECLARATION:
      {
        declaration declaration = (declaration)theEObject;
        T result = casedeclaration(declaration);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.DECLARATION_SPECIFIERS:
      {
        declaration_specifiers declaration_specifiers = (declaration_specifiers)theEObject;
        T result = casedeclaration_specifiers(declaration_specifiers);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.INIT_DECLARATOR_LIST:
      {
        init_declarator_list init_declarator_list = (init_declarator_list)theEObject;
        T result = caseinit_declarator_list(init_declarator_list);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.INIT_DECLARATOR_LIST2:
      {
        init_declarator_list2 init_declarator_list2 = (init_declarator_list2)theEObject;
        T result = caseinit_declarator_list2(init_declarator_list2);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.INIT_DECLARATOR:
      {
        init_declarator init_declarator = (init_declarator)theEObject;
        T result = caseinit_declarator(init_declarator);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.STORAGE_CLASS_SPECIFIER:
      {
        storage_class_specifier storage_class_specifier = (storage_class_specifier)theEObject;
        T result = casestorage_class_specifier(storage_class_specifier);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.TYPE_SPECIFIER:
      {
        type_specifier type_specifier = (type_specifier)theEObject;
        T result = casetype_specifier(type_specifier);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.STRUCT_OR_UNION_SPECIFIER:
      {
        struct_or_union_specifier struct_or_union_specifier = (struct_or_union_specifier)theEObject;
        T result = casestruct_or_union_specifier(struct_or_union_specifier);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.STRUCT_OR_UNION:
      {
        struct_or_union struct_or_union = (struct_or_union)theEObject;
        T result = casestruct_or_union(struct_or_union);
        if (result == null) result = casestruct_or_union_specifier(struct_or_union);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.STRUCT_DECLARATION_LIST:
      {
        struct_declaration_list struct_declaration_list = (struct_declaration_list)theEObject;
        T result = casestruct_declaration_list(struct_declaration_list);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.STRUCT_DECLARATION_LIST2:
      {
        struct_declaration_list2 struct_declaration_list2 = (struct_declaration_list2)theEObject;
        T result = casestruct_declaration_list2(struct_declaration_list2);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.STRUCT_DECLARATION:
      {
        struct_declaration struct_declaration = (struct_declaration)theEObject;
        T result = casestruct_declaration(struct_declaration);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.SPECIFIER_QUALIFIER_LIST:
      {
        specifier_qualifier_list specifier_qualifier_list = (specifier_qualifier_list)theEObject;
        T result = casespecifier_qualifier_list(specifier_qualifier_list);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.STRUCT_DECLARATOR_LIST:
      {
        struct_declarator_list struct_declarator_list = (struct_declarator_list)theEObject;
        T result = casestruct_declarator_list(struct_declarator_list);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.STRUCT_DECLARATOR_LIST2:
      {
        struct_declarator_list2 struct_declarator_list2 = (struct_declarator_list2)theEObject;
        T result = casestruct_declarator_list2(struct_declarator_list2);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.STRUCT_DECLARATOR:
      {
        struct_declarator struct_declarator = (struct_declarator)theEObject;
        T result = casestruct_declarator(struct_declarator);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.ENUM_SPECIFIER:
      {
        enum_specifier enum_specifier = (enum_specifier)theEObject;
        T result = caseenum_specifier(enum_specifier);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.ENUMERATOR_LIST:
      {
        enumerator_list enumerator_list = (enumerator_list)theEObject;
        T result = caseenumerator_list(enumerator_list);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.ENUMERATOR_LIST2:
      {
        enumerator_list2 enumerator_list2 = (enumerator_list2)theEObject;
        T result = caseenumerator_list2(enumerator_list2);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.ENUMERATOR:
      {
        enumerator enumerator = (enumerator)theEObject;
        T result = caseenumerator(enumerator);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.ATOMIC_TYPE_SPECIFIER:
      {
        atomic_type_specifier atomic_type_specifier = (atomic_type_specifier)theEObject;
        T result = caseatomic_type_specifier(atomic_type_specifier);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.TYPE_QUALIFIER:
      {
        type_qualifier type_qualifier = (type_qualifier)theEObject;
        T result = casetype_qualifier(type_qualifier);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.FUNCTION_SPECIFIER:
      {
        function_specifier function_specifier = (function_specifier)theEObject;
        T result = casefunction_specifier(function_specifier);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.ALIGNMENT_SPECIFIER:
      {
        alignment_specifier alignment_specifier = (alignment_specifier)theEObject;
        T result = casealignment_specifier(alignment_specifier);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.DECLARATOR:
      {
        declarator declarator = (declarator)theEObject;
        T result = casedeclarator(declarator);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.DIRECT_DECLARATOR:
      {
        direct_declarator direct_declarator = (direct_declarator)theEObject;
        T result = casedirect_declarator(direct_declarator);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.DIRECT_DECLARATOR2:
      {
        direct_declarator2 direct_declarator2 = (direct_declarator2)theEObject;
        T result = casedirect_declarator2(direct_declarator2);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.POINTER:
      {
        pointer pointer = (pointer)theEObject;
        T result = casepointer(pointer);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.TYPE_QUALIFIER_LIST:
      {
        type_qualifier_list type_qualifier_list = (type_qualifier_list)theEObject;
        T result = casetype_qualifier_list(type_qualifier_list);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.TYPE_QUALIFIER_LIST2:
      {
        type_qualifier_list2 type_qualifier_list2 = (type_qualifier_list2)theEObject;
        T result = casetype_qualifier_list2(type_qualifier_list2);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.PARAMETER_TYPE_LIST:
      {
        parameter_type_list parameter_type_list = (parameter_type_list)theEObject;
        T result = caseparameter_type_list(parameter_type_list);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.PARAMETER_LIST:
      {
        parameter_list parameter_list = (parameter_list)theEObject;
        T result = caseparameter_list(parameter_list);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.PARAMETER_LIST2:
      {
        parameter_list2 parameter_list2 = (parameter_list2)theEObject;
        T result = caseparameter_list2(parameter_list2);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.PARAMETER_DECLARATION:
      {
        parameter_declaration parameter_declaration = (parameter_declaration)theEObject;
        T result = caseparameter_declaration(parameter_declaration);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.IDENTIFIER_LIST:
      {
        identifier_list identifier_list = (identifier_list)theEObject;
        T result = caseidentifier_list(identifier_list);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.IDENTIFIER_LIST2:
      {
        identifier_list2 identifier_list2 = (identifier_list2)theEObject;
        T result = caseidentifier_list2(identifier_list2);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.TYPE_NAME:
      {
        type_name type_name = (type_name)theEObject;
        T result = casetype_name(type_name);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.ABSTRACT_DECLARATOR:
      {
        abstract_declarator abstract_declarator = (abstract_declarator)theEObject;
        T result = caseabstract_declarator(abstract_declarator);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.DIRECT_ABSTRACT_DECLARATOR:
      {
        direct_abstract_declarator direct_abstract_declarator = (direct_abstract_declarator)theEObject;
        T result = casedirect_abstract_declarator(direct_abstract_declarator);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.DIRECT_ABSTRACT_DECLARATOR2:
      {
        direct_abstract_declarator2 direct_abstract_declarator2 = (direct_abstract_declarator2)theEObject;
        T result = casedirect_abstract_declarator2(direct_abstract_declarator2);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.INITIALIZER:
      {
        initializer initializer = (initializer)theEObject;
        T result = caseinitializer(initializer);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.INITIALIZER_LIST:
      {
        initializer_list initializer_list = (initializer_list)theEObject;
        T result = caseinitializer_list(initializer_list);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.INITIALIZER_LIST2:
      {
        initializer_list2 initializer_list2 = (initializer_list2)theEObject;
        T result = caseinitializer_list2(initializer_list2);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.DESIGNATION:
      {
        designation designation = (designation)theEObject;
        T result = casedesignation(designation);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.DESIGNATOR_LIST:
      {
        designator_list designator_list = (designator_list)theEObject;
        T result = casedesignator_list(designator_list);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.DESIGNATOR_LIST2:
      {
        designator_list2 designator_list2 = (designator_list2)theEObject;
        T result = casedesignator_list2(designator_list2);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.DESIGNATOR:
      {
        designator designator = (designator)theEObject;
        T result = casedesignator(designator);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.STATIC_ASSERT_DECLARATION:
      {
        static_assert_declaration static_assert_declaration = (static_assert_declaration)theEObject;
        T result = casestatic_assert_declaration(static_assert_declaration);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.STATEMENT:
      {
        statement statement = (statement)theEObject;
        T result = casestatement(statement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.LABELED_STATEMENT:
      {
        labeled_statement labeled_statement = (labeled_statement)theEObject;
        T result = caselabeled_statement(labeled_statement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.COMPOUND_STATEMENT:
      {
        compound_statement compound_statement = (compound_statement)theEObject;
        T result = casecompound_statement(compound_statement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.BLOCK_ITEM:
      {
        block_item block_item = (block_item)theEObject;
        T result = caseblock_item(block_item);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.EXPRESSION_STATEMENT:
      {
        expression_statement expression_statement = (expression_statement)theEObject;
        T result = caseexpression_statement(expression_statement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.SELECTION_STATEMENT:
      {
        selection_statement selection_statement = (selection_statement)theEObject;
        T result = caseselection_statement(selection_statement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.ITERATION_STATEMENT:
      {
        iteration_statement iteration_statement = (iteration_statement)theEObject;
        T result = caseiteration_statement(iteration_statement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.JUMP_STATEMENT:
      {
        jump_statement jump_statement = (jump_statement)theEObject;
        T result = casejump_statement(jump_statement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.TRANSLATION_UNIT:
      {
        translation_unit translation_unit = (translation_unit)theEObject;
        T result = casetranslation_unit(translation_unit);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.EXTERNAL_DECLARATION:
      {
        external_declaration external_declaration = (external_declaration)theEObject;
        T result = caseexternal_declaration(external_declaration);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.FUNCTION_DEFINITION:
      {
        function_definition function_definition = (function_definition)theEObject;
        T result = casefunction_definition(function_definition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.DECLARATION_LIST:
      {
        declaration_list declaration_list = (declaration_list)theEObject;
        T result = casedeclaration_list(declaration_list);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.DECLARATION_LIST2:
      {
        declaration_list2 declaration_list2 = (declaration_list2)theEObject;
        T result = casedeclaration_list2(declaration_list2);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.INTEGER:
      {
        integer integer = (integer)theEObject;
        T result = caseinteger(integer);
        if (result == null) result = casetype_specifier(integer);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      default: return defaultCase(theEObject);
    }
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Model</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Model</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseModel(Model object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>primary expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>primary expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseprimary_expression(primary_expression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>constant</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>constant</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseconstant(constant object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>enumeration constant</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>enumeration constant</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseenumeration_constant(enumeration_constant object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>string nova</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>string nova</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casestring_nova(string_nova object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>generic selection</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>generic selection</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casegeneric_selection(generic_selection object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>generic assoc list</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>generic assoc list</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casegeneric_assoc_list(generic_assoc_list object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>generic assoc list2</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>generic assoc list2</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casegeneric_assoc_list2(generic_assoc_list2 object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>generic association</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>generic association</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casegeneric_association(generic_association object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>postfix expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>postfix expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casepostfix_expression(postfix_expression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>postfix expression2</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>postfix expression2</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casepostfix_expression2(postfix_expression2 object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>argument expression list</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>argument expression list</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseargument_expression_list(argument_expression_list object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>argument expression list2</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>argument expression list2</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseargument_expression_list2(argument_expression_list2 object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>unary expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>unary expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseunary_expression(unary_expression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>cast expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>cast expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casecast_expression(cast_expression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>multiplicative expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>multiplicative expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casemultiplicative_expression(multiplicative_expression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>multiplicative expression2</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>multiplicative expression2</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casemultiplicative_expression2(multiplicative_expression2 object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>additive expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>additive expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseadditive_expression(additive_expression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>additive expression2</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>additive expression2</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseadditive_expression2(additive_expression2 object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>shift expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>shift expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseshift_expression(shift_expression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>shift expression2</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>shift expression2</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseshift_expression2(shift_expression2 object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>relational expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>relational expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caserelational_expression(relational_expression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>relational expression2</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>relational expression2</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caserelational_expression2(relational_expression2 object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>equality expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>equality expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseequality_expression(equality_expression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>equality expression2</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>equality expression2</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseequality_expression2(equality_expression2 object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>and expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>and expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseand_expression(and_expression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>and expression2</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>and expression2</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseand_expression2(and_expression2 object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>exclusive or expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>exclusive or expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseexclusive_or_expression(exclusive_or_expression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>exclusive or expression2</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>exclusive or expression2</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseexclusive_or_expression2(exclusive_or_expression2 object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>inclusive or expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>inclusive or expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseinclusive_or_expression(inclusive_or_expression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>inclusive or expression2</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>inclusive or expression2</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseinclusive_or_expression2(inclusive_or_expression2 object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>logical and expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>logical and expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caselogical_and_expression(logical_and_expression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>logical and expression2</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>logical and expression2</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caselogical_and_expression2(logical_and_expression2 object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>logical or expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>logical or expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caselogical_or_expression(logical_or_expression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>logical or expression2</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>logical or expression2</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caselogical_or_expression2(logical_or_expression2 object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>conditional expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>conditional expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseconditional_expression(conditional_expression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>assignment expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>assignment expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseassignment_expression(assignment_expression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>assignment operator</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>assignment operator</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseassignment_operator(assignment_operator object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseexpression(expression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>expression2</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>expression2</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseexpression2(expression2 object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>constant expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>constant expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseconstant_expression(constant_expression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>declaration</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>declaration</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casedeclaration(declaration object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>declaration specifiers</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>declaration specifiers</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casedeclaration_specifiers(declaration_specifiers object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>init declarator list</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>init declarator list</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseinit_declarator_list(init_declarator_list object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>init declarator list2</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>init declarator list2</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseinit_declarator_list2(init_declarator_list2 object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>init declarator</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>init declarator</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseinit_declarator(init_declarator object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>storage class specifier</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>storage class specifier</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casestorage_class_specifier(storage_class_specifier object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>type specifier</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>type specifier</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casetype_specifier(type_specifier object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>struct or union specifier</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>struct or union specifier</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casestruct_or_union_specifier(struct_or_union_specifier object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>struct or union</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>struct or union</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casestruct_or_union(struct_or_union object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>struct declaration list</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>struct declaration list</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casestruct_declaration_list(struct_declaration_list object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>struct declaration list2</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>struct declaration list2</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casestruct_declaration_list2(struct_declaration_list2 object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>struct declaration</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>struct declaration</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casestruct_declaration(struct_declaration object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>specifier qualifier list</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>specifier qualifier list</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casespecifier_qualifier_list(specifier_qualifier_list object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>struct declarator list</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>struct declarator list</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casestruct_declarator_list(struct_declarator_list object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>struct declarator list2</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>struct declarator list2</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casestruct_declarator_list2(struct_declarator_list2 object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>struct declarator</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>struct declarator</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casestruct_declarator(struct_declarator object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>enum specifier</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>enum specifier</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseenum_specifier(enum_specifier object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>enumerator list</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>enumerator list</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseenumerator_list(enumerator_list object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>enumerator list2</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>enumerator list2</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseenumerator_list2(enumerator_list2 object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>enumerator</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>enumerator</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseenumerator(enumerator object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>atomic type specifier</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>atomic type specifier</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseatomic_type_specifier(atomic_type_specifier object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>type qualifier</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>type qualifier</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casetype_qualifier(type_qualifier object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>function specifier</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>function specifier</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casefunction_specifier(function_specifier object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>alignment specifier</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>alignment specifier</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casealignment_specifier(alignment_specifier object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>declarator</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>declarator</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casedeclarator(declarator object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>direct declarator</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>direct declarator</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casedirect_declarator(direct_declarator object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>direct declarator2</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>direct declarator2</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casedirect_declarator2(direct_declarator2 object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>pointer</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>pointer</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casepointer(pointer object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>type qualifier list</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>type qualifier list</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casetype_qualifier_list(type_qualifier_list object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>type qualifier list2</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>type qualifier list2</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casetype_qualifier_list2(type_qualifier_list2 object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>parameter type list</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>parameter type list</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseparameter_type_list(parameter_type_list object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>parameter list</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>parameter list</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseparameter_list(parameter_list object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>parameter list2</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>parameter list2</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseparameter_list2(parameter_list2 object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>parameter declaration</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>parameter declaration</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseparameter_declaration(parameter_declaration object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>identifier list</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>identifier list</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseidentifier_list(identifier_list object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>identifier list2</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>identifier list2</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseidentifier_list2(identifier_list2 object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>type name</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>type name</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casetype_name(type_name object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>abstract declarator</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>abstract declarator</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseabstract_declarator(abstract_declarator object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>direct abstract declarator</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>direct abstract declarator</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casedirect_abstract_declarator(direct_abstract_declarator object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>direct abstract declarator2</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>direct abstract declarator2</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casedirect_abstract_declarator2(direct_abstract_declarator2 object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>initializer</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>initializer</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseinitializer(initializer object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>initializer list</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>initializer list</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseinitializer_list(initializer_list object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>initializer list2</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>initializer list2</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseinitializer_list2(initializer_list2 object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>designation</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>designation</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casedesignation(designation object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>designator list</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>designator list</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casedesignator_list(designator_list object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>designator list2</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>designator list2</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casedesignator_list2(designator_list2 object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>designator</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>designator</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casedesignator(designator object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>static assert declaration</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>static assert declaration</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casestatic_assert_declaration(static_assert_declaration object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>statement</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>statement</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casestatement(statement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>labeled statement</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>labeled statement</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caselabeled_statement(labeled_statement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>compound statement</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>compound statement</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casecompound_statement(compound_statement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>block item</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>block item</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseblock_item(block_item object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>expression statement</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>expression statement</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseexpression_statement(expression_statement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>selection statement</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>selection statement</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseselection_statement(selection_statement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>iteration statement</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>iteration statement</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseiteration_statement(iteration_statement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>jump statement</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>jump statement</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casejump_statement(jump_statement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>translation unit</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>translation unit</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casetranslation_unit(translation_unit object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>external declaration</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>external declaration</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseexternal_declaration(external_declaration object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>function definition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>function definition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casefunction_definition(function_definition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>declaration list</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>declaration list</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casedeclaration_list(declaration_list object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>declaration list2</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>declaration list2</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casedeclaration_list2(declaration_list2 object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>integer</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>integer</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseinteger(integer object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EObject</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch, but this is the last case anyway.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EObject</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject)
   * @generated
   */
  @Override
  public T defaultCase(EObject object)
  {
    return null;
  }

} //MyDslSwitch
