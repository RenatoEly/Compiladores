/*
 * generated by Xtext 2.9.2
 */
package org.xtext.example.mydsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class MyDslGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Model");
		private final Assignment cDeclaracoesAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cDeclaracoesTranslation_unitParserRuleCall_0 = (RuleCall)cDeclaracoesAssignment.eContents().get(0);
		
		//Model:
		//	declaracoes+=translation_unit*;
		@Override public ParserRule getRule() { return rule; }
		
		//declaracoes+=translation_unit*
		public Assignment getDeclaracoesAssignment() { return cDeclaracoesAssignment; }
		
		//translation_unit
		public RuleCall getDeclaracoesTranslation_unitParserRuleCall_0() { return cDeclaracoesTranslation_unitParserRuleCall_0; }
	}
	public class Primary_expressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.primary_expression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cSimple_expressionParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final RuleCall cAtomic2ParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		////Greeting;
		// //Greeting:
		// //'Ola'name=ID'!';
		// primary_expression simple_expression:
		//	'(' simple_expression ')' | atomic2
		@Override public ParserRule getRule() { return rule; }
		
		//'(' simple_expression ')' | atomic2
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'(' simple_expression ')'
		public Group getGroup_0() { return cGroup_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_0() { return cLeftParenthesisKeyword_0_0; }
		
		//simple_expression
		public RuleCall getSimple_expressionParserRuleCall_0_1() { return cSimple_expressionParserRuleCall_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_2() { return cRightParenthesisKeyword_0_2; }
		
		//atomic2
		public RuleCall getAtomic2ParserRuleCall_1() { return cAtomic2ParserRuleCall_1; }
	}
	public class Atomic2Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.atomic2");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cVariableRefAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cVariableAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final CrossReference cVariableDirect_declaratorCrossReference_0_1_0 = (CrossReference)cVariableAssignment_0_1.eContents().get(0);
		private final RuleCall cVariableDirect_declaratorIDTerminalRuleCall_0_1_0_1 = (RuleCall)cVariableDirect_declaratorCrossReference_0_1_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cIntTypeAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cValueAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cValueI_CONSTANTTerminalRuleCall_1_1_0 = (RuleCall)cValueAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cFloatTypeAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Assignment cValueAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cValueF_CONSTANTTerminalRuleCall_2_1_0 = (RuleCall)cValueAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cStringTypeAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Assignment cValueAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cValueString_novaParserRuleCall_3_1_0 = (RuleCall)cValueAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Action cBooleanTypeAction_4_0 = (Action)cGroup_4.eContents().get(0);
		private final Assignment cValueAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final Alternatives cValueAlternatives_4_1_0 = (Alternatives)cValueAssignment_4_1.eContents().get(0);
		private final Keyword cValueTrueKeyword_4_1_0_0 = (Keyword)cValueAlternatives_4_1_0.eContents().get(0);
		private final Keyword cValueFalseKeyword_4_1_0_1 = (Keyword)cValueAlternatives_4_1_0.eContents().get(1);
		
		//atomic2 simple_expression:
		//	{variableRef} variable=[direct_declarator] | {intType} value=I_CONSTANT | {floatType} value=F_CONSTANT | {stringType}
		//	value=string_nova | {booleanType} value=("true" | "false")
		@Override public ParserRule getRule() { return rule; }
		
		//{variableRef} variable=[direct_declarator] | {intType} value=I_CONSTANT | {floatType} value=F_CONSTANT | {stringType}
		//value=string_nova | {booleanType} value=("true" | "false")
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{variableRef} variable=[direct_declarator]
		public Group getGroup_0() { return cGroup_0; }
		
		//{variableRef}
		public Action getVariableRefAction_0_0() { return cVariableRefAction_0_0; }
		
		//variable=[direct_declarator]
		public Assignment getVariableAssignment_0_1() { return cVariableAssignment_0_1; }
		
		//[direct_declarator]
		public CrossReference getVariableDirect_declaratorCrossReference_0_1_0() { return cVariableDirect_declaratorCrossReference_0_1_0; }
		
		//ID
		public RuleCall getVariableDirect_declaratorIDTerminalRuleCall_0_1_0_1() { return cVariableDirect_declaratorIDTerminalRuleCall_0_1_0_1; }
		
		//{intType} value=I_CONSTANT
		public Group getGroup_1() { return cGroup_1; }
		
		//{intType}
		public Action getIntTypeAction_1_0() { return cIntTypeAction_1_0; }
		
		//value=I_CONSTANT
		public Assignment getValueAssignment_1_1() { return cValueAssignment_1_1; }
		
		//I_CONSTANT
		public RuleCall getValueI_CONSTANTTerminalRuleCall_1_1_0() { return cValueI_CONSTANTTerminalRuleCall_1_1_0; }
		
		//{floatType} value=F_CONSTANT
		public Group getGroup_2() { return cGroup_2; }
		
		//{floatType}
		public Action getFloatTypeAction_2_0() { return cFloatTypeAction_2_0; }
		
		//value=F_CONSTANT
		public Assignment getValueAssignment_2_1() { return cValueAssignment_2_1; }
		
		//F_CONSTANT
		public RuleCall getValueF_CONSTANTTerminalRuleCall_2_1_0() { return cValueF_CONSTANTTerminalRuleCall_2_1_0; }
		
		//{stringType} value=string_nova
		public Group getGroup_3() { return cGroup_3; }
		
		//{stringType}
		public Action getStringTypeAction_3_0() { return cStringTypeAction_3_0; }
		
		//value=string_nova
		public Assignment getValueAssignment_3_1() { return cValueAssignment_3_1; }
		
		//string_nova
		public RuleCall getValueString_novaParserRuleCall_3_1_0() { return cValueString_novaParserRuleCall_3_1_0; }
		
		//{booleanType} value=("true" | "false")
		public Group getGroup_4() { return cGroup_4; }
		
		//{booleanType}
		public Action getBooleanTypeAction_4_0() { return cBooleanTypeAction_4_0; }
		
		//value=("true" | "false")
		public Assignment getValueAssignment_4_1() { return cValueAssignment_4_1; }
		
		//("true" | "false")
		public Alternatives getValueAlternatives_4_1_0() { return cValueAlternatives_4_1_0; }
		
		//"true"
		public Keyword getValueTrueKeyword_4_1_0_0() { return cValueTrueKeyword_4_1_0_0; }
		
		//"false"
		public Keyword getValueFalseKeyword_4_1_0_1() { return cValueFalseKeyword_4_1_0_1; }
	}
	public class ConstantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.constant");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cI_constantAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cI_constantI_CONSTANTTerminalRuleCall_0_0 = (RuleCall)cI_constantAssignment_0.eContents().get(0);
		private final Assignment cF_constantAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cF_constantF_CONSTANTTerminalRuleCall_1_0 = (RuleCall)cF_constantAssignment_1.eContents().get(0);
		private final Assignment cEnumtAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cEnumtENUMParserRuleCall_2_0 = (RuleCall)cEnumtAssignment_2.eContents().get(0);
		
		////TODO VER se esse enum Ã© esse enum mesmo
		// constant:
		//	i_constant=I_CONSTANT / * includes character_constant * / | f_constant=F_CONSTANT | enumt=ENUM
		//	/ * after it has been defined as such * / / * AQUI ERA ENUMERATION_CONSTANT troquei pro terminal ENUM * /;
		@Override public ParserRule getRule() { return rule; }
		
		//i_constant=I_CONSTANT / * includes character_constant * / | f_constant=F_CONSTANT | enumt=ENUM
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//i_constant=I_CONSTANT
		public Assignment getI_constantAssignment_0() { return cI_constantAssignment_0; }
		
		//I_CONSTANT
		public RuleCall getI_constantI_CONSTANTTerminalRuleCall_0_0() { return cI_constantI_CONSTANTTerminalRuleCall_0_0; }
		
		//f_constant=F_CONSTANT
		public Assignment getF_constantAssignment_1() { return cF_constantAssignment_1; }
		
		//F_CONSTANT
		public RuleCall getF_constantF_CONSTANTTerminalRuleCall_1_0() { return cF_constantF_CONSTANTTerminalRuleCall_1_0; }
		
		//enumt=ENUM
		public Assignment getEnumtAssignment_2() { return cEnumtAssignment_2; }
		
		//ENUM
		public RuleCall getEnumtENUMParserRuleCall_2_0() { return cEnumtENUMParserRuleCall_2_0; }
	}
	public class Enumeration_constantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.enumeration_constant");
		private final Assignment cIdentifierAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cIdentifierIDTerminalRuleCall_0 = (RuleCall)cIdentifierAssignment.eContents().get(0);
		
		//enumeration_constant / * before it has been defined as such * /:
		//	identifier=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//identifier=ID
		public Assignment getIdentifierAssignment() { return cIdentifierAssignment; }
		
		//ID
		public RuleCall getIdentifierIDTerminalRuleCall_0() { return cIdentifierIDTerminalRuleCall_0; }
	}
	public class String_novaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.string_nova");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cString_literalAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cString_literalSTRING_LITERALTerminalRuleCall_0_0 = (RuleCall)cString_literalAssignment_0.eContents().get(0);
		private final Assignment cFunc_nameAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cFunc_nameFUNC_NAMEParserRuleCall_1_0 = (RuleCall)cFunc_nameAssignment_1.eContents().get(0);
		
		//string_nova / * Na gramatica se chama String mais nao pode ter esse nome * /:
		//	string_literal=STRING_LITERAL | func_name=FUNC_NAME;
		@Override public ParserRule getRule() { return rule; }
		
		//string_literal=STRING_LITERAL | func_name=FUNC_NAME
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//string_literal=STRING_LITERAL
		public Assignment getString_literalAssignment_0() { return cString_literalAssignment_0; }
		
		//STRING_LITERAL
		public RuleCall getString_literalSTRING_LITERALTerminalRuleCall_0_0() { return cString_literalSTRING_LITERALTerminalRuleCall_0_0; }
		
		//func_name=FUNC_NAME
		public Assignment getFunc_nameAssignment_1() { return cFunc_nameAssignment_1; }
		
		//FUNC_NAME
		public RuleCall getFunc_nameFUNC_NAMEParserRuleCall_1_0() { return cFunc_nameFUNC_NAMEParserRuleCall_1_0; }
	}
	public class Generic_selectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.generic_selection");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cGenericAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cGenericGENERICParserRuleCall_0_0 = (RuleCall)cGenericAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAssignment_expressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAssignment_expressionAssignment_expressionParserRuleCall_2_0 = (RuleCall)cAssignment_expressionAssignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cGeneric_assoc_listAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cGeneric_assoc_listGeneric_assoc_listParserRuleCall_4_0 = (RuleCall)cGeneric_assoc_listAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//generic_selection:
		//	generic=GENERIC '(' assignment_expression=assignment_expression ',' generic_assoc_list=generic_assoc_list ')';
		@Override public ParserRule getRule() { return rule; }
		
		//generic=GENERIC '(' assignment_expression=assignment_expression ',' generic_assoc_list=generic_assoc_list ')'
		public Group getGroup() { return cGroup; }
		
		//generic=GENERIC
		public Assignment getGenericAssignment_0() { return cGenericAssignment_0; }
		
		//GENERIC
		public RuleCall getGenericGENERICParserRuleCall_0_0() { return cGenericGENERICParserRuleCall_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//assignment_expression=assignment_expression
		public Assignment getAssignment_expressionAssignment_2() { return cAssignment_expressionAssignment_2; }
		
		//assignment_expression
		public RuleCall getAssignment_expressionAssignment_expressionParserRuleCall_2_0() { return cAssignment_expressionAssignment_expressionParserRuleCall_2_0; }
		
		//','
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }
		
		//generic_assoc_list=generic_assoc_list
		public Assignment getGeneric_assoc_listAssignment_4() { return cGeneric_assoc_listAssignment_4; }
		
		//generic_assoc_list
		public RuleCall getGeneric_assoc_listGeneric_assoc_listParserRuleCall_4_0() { return cGeneric_assoc_listGeneric_assoc_listParserRuleCall_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class Generic_assoc_listElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.generic_assoc_list");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cGeneric_associationAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cGeneric_associationGeneric_associationParserRuleCall_0_0 = (RuleCall)cGeneric_associationAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cGeneric_listAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cGeneric_listGeneric_associationParserRuleCall_1_1_0 = (RuleCall)cGeneric_listAssignment_1_1.eContents().get(0);
		
		//generic_assoc_list:
		//	generic_association=generic_association (',' generic_list+=generic_association)*;
		@Override public ParserRule getRule() { return rule; }
		
		//generic_association=generic_association (',' generic_list+=generic_association)*
		public Group getGroup() { return cGroup; }
		
		//generic_association=generic_association
		public Assignment getGeneric_associationAssignment_0() { return cGeneric_associationAssignment_0; }
		
		//generic_association
		public RuleCall getGeneric_associationGeneric_associationParserRuleCall_0_0() { return cGeneric_associationGeneric_associationParserRuleCall_0_0; }
		
		//(',' generic_list+=generic_association)*
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//generic_list+=generic_association
		public Assignment getGeneric_listAssignment_1_1() { return cGeneric_listAssignment_1_1; }
		
		//generic_association
		public RuleCall getGeneric_listGeneric_associationParserRuleCall_1_1_0() { return cGeneric_listGeneric_associationParserRuleCall_1_1_0; }
	}
	public class Generic_associationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.generic_association");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cType_nameAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cType_nameType_nameParserRuleCall_0_0_0 = (RuleCall)cType_nameAssignment_0_0.eContents().get(0);
		private final Keyword cColonKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cAssignment_expressionAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cAssignment_expressionAssignment_expressionParserRuleCall_0_2_0 = (RuleCall)cAssignment_expressionAssignment_0_2.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cDefaultAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cDefaultDEFAULTParserRuleCall_1_0_0 = (RuleCall)cDefaultAssignment_1_0.eContents().get(0);
		private final Keyword cColonKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cAssignment_expressionAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cAssignment_expressionAssignment_expressionParserRuleCall_1_2_0 = (RuleCall)cAssignment_expressionAssignment_1_2.eContents().get(0);
		
		//generic_association:
		//	type_name=type_name ':' assignment_expression=assignment_expression | default=DEFAULT ':'
		//	assignment_expression=assignment_expression;
		@Override public ParserRule getRule() { return rule; }
		
		//type_name=type_name ':' assignment_expression=assignment_expression | default=DEFAULT ':'
		//assignment_expression=assignment_expression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//type_name=type_name ':' assignment_expression=assignment_expression
		public Group getGroup_0() { return cGroup_0; }
		
		//type_name=type_name
		public Assignment getType_nameAssignment_0_0() { return cType_nameAssignment_0_0; }
		
		//type_name
		public RuleCall getType_nameType_nameParserRuleCall_0_0_0() { return cType_nameType_nameParserRuleCall_0_0_0; }
		
		//':'
		public Keyword getColonKeyword_0_1() { return cColonKeyword_0_1; }
		
		//assignment_expression=assignment_expression
		public Assignment getAssignment_expressionAssignment_0_2() { return cAssignment_expressionAssignment_0_2; }
		
		//assignment_expression
		public RuleCall getAssignment_expressionAssignment_expressionParserRuleCall_0_2_0() { return cAssignment_expressionAssignment_expressionParserRuleCall_0_2_0; }
		
		//default=DEFAULT ':' assignment_expression=assignment_expression
		public Group getGroup_1() { return cGroup_1; }
		
		//default=DEFAULT
		public Assignment getDefaultAssignment_1_0() { return cDefaultAssignment_1_0; }
		
		//DEFAULT
		public RuleCall getDefaultDEFAULTParserRuleCall_1_0_0() { return cDefaultDEFAULTParserRuleCall_1_0_0; }
		
		//':'
		public Keyword getColonKeyword_1_1() { return cColonKeyword_1_1; }
		
		//assignment_expression=assignment_expression
		public Assignment getAssignment_expressionAssignment_1_2() { return cAssignment_expressionAssignment_1_2; }
		
		//assignment_expression
		public RuleCall getAssignment_expressionAssignment_expressionParserRuleCall_1_2_0() { return cAssignment_expressionAssignment_expressionParserRuleCall_1_2_0; }
	}
	public class Postfix_expressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.postfix_expression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cPrimary_expressionAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cPrimary_expressionPrimary_expressionParserRuleCall_0_0_0 = (RuleCall)cPrimary_expressionAssignment_0_0.eContents().get(0);
		private final Assignment cPostifx_expresAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cPostifx_expresPostfix_expression2ParserRuleCall_0_1_0 = (RuleCall)cPostifx_expresAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cType_nameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cType_nameType_nameParserRuleCall_1_1_0 = (RuleCall)cType_nameAssignment_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Assignment cInitializer_listAssignment_1_4 = (Assignment)cGroup_1.eContents().get(4);
		private final RuleCall cInitializer_listInitializer_listParserRuleCall_1_4_0 = (RuleCall)cInitializer_listAssignment_1_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_5 = (Keyword)cGroup_1.eContents().get(5);
		private final Assignment cPostifx_expresAssignment_1_6 = (Assignment)cGroup_1.eContents().get(6);
		private final RuleCall cPostifx_expresPostfix_expression2ParserRuleCall_1_6_0 = (RuleCall)cPostifx_expresAssignment_1_6.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cType_nameAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cType_nameType_nameParserRuleCall_2_1_0 = (RuleCall)cType_nameAssignment_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final Assignment cInitializer_listAssignment_2_4 = (Assignment)cGroup_2.eContents().get(4);
		private final RuleCall cInitializer_listInitializer_listParserRuleCall_2_4_0 = (RuleCall)cInitializer_listAssignment_2_4.eContents().get(0);
		private final Keyword cCommaKeyword_2_5 = (Keyword)cGroup_2.eContents().get(5);
		private final Keyword cRightCurlyBracketKeyword_2_6 = (Keyword)cGroup_2.eContents().get(6);
		private final Assignment cPostifx_expresAssignment_2_7 = (Assignment)cGroup_2.eContents().get(7);
		private final RuleCall cPostifx_expresPostfix_expression2ParserRuleCall_2_7_0 = (RuleCall)cPostifx_expresAssignment_2_7.eContents().get(0);
		
		//postfix_expression:
		//	primary_expression=primary_expression postifx_expres+=postfix_expression2* | '(' type_name=type_name ')' '{'
		//	initializer_list=initializer_list '}' postifx_expres+=postfix_expression2* | '(' type_name=type_name ')' '{'
		//	initializer_list=initializer_list ',' '}' postifx_expres+=postfix_expression2*;
		@Override public ParserRule getRule() { return rule; }
		
		//primary_expression=primary_expression postifx_expres+=postfix_expression2* | '(' type_name=type_name ')' '{'
		//initializer_list=initializer_list '}' postifx_expres+=postfix_expression2* | '(' type_name=type_name ')' '{'
		//initializer_list=initializer_list ',' '}' postifx_expres+=postfix_expression2*
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//primary_expression=primary_expression postifx_expres+=postfix_expression2*
		public Group getGroup_0() { return cGroup_0; }
		
		//primary_expression=primary_expression
		public Assignment getPrimary_expressionAssignment_0_0() { return cPrimary_expressionAssignment_0_0; }
		
		//primary_expression
		public RuleCall getPrimary_expressionPrimary_expressionParserRuleCall_0_0_0() { return cPrimary_expressionPrimary_expressionParserRuleCall_0_0_0; }
		
		//postifx_expres+=postfix_expression2*
		public Assignment getPostifx_expresAssignment_0_1() { return cPostifx_expresAssignment_0_1; }
		
		//postfix_expression2
		public RuleCall getPostifx_expresPostfix_expression2ParserRuleCall_0_1_0() { return cPostifx_expresPostfix_expression2ParserRuleCall_0_1_0; }
		
		//'(' type_name=type_name ')' '{' initializer_list=initializer_list '}' postifx_expres+=postfix_expression2*
		public Group getGroup_1() { return cGroup_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }
		
		//type_name=type_name
		public Assignment getType_nameAssignment_1_1() { return cType_nameAssignment_1_1; }
		
		//type_name
		public RuleCall getType_nameType_nameParserRuleCall_1_1_0() { return cType_nameType_nameParserRuleCall_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1_3() { return cLeftCurlyBracketKeyword_1_3; }
		
		//initializer_list=initializer_list
		public Assignment getInitializer_listAssignment_1_4() { return cInitializer_listAssignment_1_4; }
		
		//initializer_list
		public RuleCall getInitializer_listInitializer_listParserRuleCall_1_4_0() { return cInitializer_listInitializer_listParserRuleCall_1_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_1_5() { return cRightCurlyBracketKeyword_1_5; }
		
		//postifx_expres+=postfix_expression2*
		public Assignment getPostifx_expresAssignment_1_6() { return cPostifx_expresAssignment_1_6; }
		
		//postfix_expression2
		public RuleCall getPostifx_expresPostfix_expression2ParserRuleCall_1_6_0() { return cPostifx_expresPostfix_expression2ParserRuleCall_1_6_0; }
		
		//'(' type_name=type_name ')' '{' initializer_list=initializer_list ',' '}' postifx_expres+=postfix_expression2*
		public Group getGroup_2() { return cGroup_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }
		
		//type_name=type_name
		public Assignment getType_nameAssignment_2_1() { return cType_nameAssignment_2_1; }
		
		//type_name
		public RuleCall getType_nameType_nameParserRuleCall_2_1_0() { return cType_nameType_nameParserRuleCall_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_2() { return cRightParenthesisKeyword_2_2; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2_3() { return cLeftCurlyBracketKeyword_2_3; }
		
		//initializer_list=initializer_list
		public Assignment getInitializer_listAssignment_2_4() { return cInitializer_listAssignment_2_4; }
		
		//initializer_list
		public RuleCall getInitializer_listInitializer_listParserRuleCall_2_4_0() { return cInitializer_listInitializer_listParserRuleCall_2_4_0; }
		
		//','
		public Keyword getCommaKeyword_2_5() { return cCommaKeyword_2_5; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_2_6() { return cRightCurlyBracketKeyword_2_6; }
		
		//postifx_expres+=postfix_expression2*
		public Assignment getPostifx_expresAssignment_2_7() { return cPostifx_expresAssignment_2_7; }
		
		//postfix_expression2
		public RuleCall getPostifx_expresPostfix_expression2ParserRuleCall_2_7_0() { return cPostifx_expresPostfix_expression2ParserRuleCall_2_7_0; }
	}
	public class Postfix_expression2Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.postfix_expression2");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final RuleCall cArgument_expression_listParserRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Keyword cFullStopKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_3_1 = (RuleCall)cGroup_3.eContents().get(1);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final RuleCall cPTR_OPTerminalRuleCall_4_0 = (RuleCall)cGroup_4.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_4_1 = (RuleCall)cGroup_4.eContents().get(1);
		private final RuleCall cINC_OPTerminalRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cDEC_OPTerminalRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		
		//postfix_expression2:
		//	'[' expression ']' | '(' ')' | '(' argument_expression_list ')' | '.' ID | PTR_OP ID | INC_OP | DEC_OP;
		@Override public ParserRule getRule() { return rule; }
		
		//'[' expression ']' | '(' ')' | '(' argument_expression_list ')' | '.' ID | PTR_OP ID | INC_OP | DEC_OP
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'[' expression ']'
		public Group getGroup_0() { return cGroup_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_0_0() { return cLeftSquareBracketKeyword_0_0; }
		
		//expression
		public RuleCall getExpressionParserRuleCall_0_1() { return cExpressionParserRuleCall_0_1; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_0_2() { return cRightSquareBracketKeyword_0_2; }
		
		//'(' ')'
		public Group getGroup_1() { return cGroup_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_1() { return cRightParenthesisKeyword_1_1; }
		
		//'(' argument_expression_list ')'
		public Group getGroup_2() { return cGroup_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }
		
		//argument_expression_list
		public RuleCall getArgument_expression_listParserRuleCall_2_1() { return cArgument_expression_listParserRuleCall_2_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_2() { return cRightParenthesisKeyword_2_2; }
		
		//'.' ID
		public Group getGroup_3() { return cGroup_3; }
		
		//'.'
		public Keyword getFullStopKeyword_3_0() { return cFullStopKeyword_3_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_3_1() { return cIDTerminalRuleCall_3_1; }
		
		//PTR_OP ID
		public Group getGroup_4() { return cGroup_4; }
		
		//PTR_OP
		public RuleCall getPTR_OPTerminalRuleCall_4_0() { return cPTR_OPTerminalRuleCall_4_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_4_1() { return cIDTerminalRuleCall_4_1; }
		
		//INC_OP
		public RuleCall getINC_OPTerminalRuleCall_5() { return cINC_OPTerminalRuleCall_5; }
		
		//DEC_OP
		public RuleCall getDEC_OPTerminalRuleCall_6() { return cDEC_OPTerminalRuleCall_6; }
	}
	public class Argument_expression_listElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.argument_expression_list");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAssignment_expressionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAssignment_expressionAssignment_expressionParserRuleCall_0_0 = (RuleCall)cAssignment_expressionAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cListAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cListAssignment_expressionParserRuleCall_1_1_0 = (RuleCall)cListAssignment_1_1.eContents().get(0);
		
		//argument_expression_list:
		//	assignment_expression=assignment_expression (',' list+=assignment_expression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//assignment_expression=assignment_expression (',' list+=assignment_expression)*
		public Group getGroup() { return cGroup; }
		
		//assignment_expression=assignment_expression
		public Assignment getAssignment_expressionAssignment_0() { return cAssignment_expressionAssignment_0; }
		
		//assignment_expression
		public RuleCall getAssignment_expressionAssignment_expressionParserRuleCall_0_0() { return cAssignment_expressionAssignment_expressionParserRuleCall_0_0; }
		
		//(',' list+=assignment_expression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//list+=assignment_expression
		public Assignment getListAssignment_1_1() { return cListAssignment_1_1; }
		
		//assignment_expression
		public RuleCall getListAssignment_expressionParserRuleCall_1_1_0() { return cListAssignment_expressionParserRuleCall_1_1_0; }
	}
	public class Unary_expressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.unary_expression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cPostfix_expressionAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cPostfix_expressionPostfix_expressionParserRuleCall_0_0 = (RuleCall)cPostfix_expressionAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cInc_opAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cInc_opINC_OPTerminalRuleCall_1_0_0 = (RuleCall)cInc_opAssignment_1_0.eContents().get(0);
		private final Assignment cUnary_expressionAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cUnary_expressionUnary_expressionParserRuleCall_1_1_0 = (RuleCall)cUnary_expressionAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Assignment cDec_opAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cDec_opDEC_OPTerminalRuleCall_2_0_0 = (RuleCall)cDec_opAssignment_2_0.eContents().get(0);
		private final Assignment cUnary_expressionAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cUnary_expressionUnary_expressionParserRuleCall_2_1_0 = (RuleCall)cUnary_expressionAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Assignment cUnary_operatorAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cUnary_operatorUnary_operatorParserRuleCall_3_0_0 = (RuleCall)cUnary_operatorAssignment_3_0.eContents().get(0);
		private final Assignment cCast_expressionAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cCast_expressionCast_expressionParserRuleCall_3_1_0 = (RuleCall)cCast_expressionAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Assignment cSizeofAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cSizeofSIZEOFParserRuleCall_4_0_0 = (RuleCall)cSizeofAssignment_4_0.eContents().get(0);
		private final Assignment cUnary_expressionAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cUnary_expressionUnary_expressionParserRuleCall_4_1_0 = (RuleCall)cUnary_expressionAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Assignment cSizeofAssignment_5_0 = (Assignment)cGroup_5.eContents().get(0);
		private final RuleCall cSizeofSIZEOFParserRuleCall_5_0_0 = (RuleCall)cSizeofAssignment_5_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cType_nameAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cType_nameType_nameParserRuleCall_5_2_0 = (RuleCall)cType_nameAssignment_5_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5_3 = (Keyword)cGroup_5.eContents().get(3);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final Assignment cAlignofAssignment_6_0 = (Assignment)cGroup_6.eContents().get(0);
		private final RuleCall cAlignofALIGNOFParserRuleCall_6_0_0 = (RuleCall)cAlignofAssignment_6_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Assignment cType_nameAssignment_6_2 = (Assignment)cGroup_6.eContents().get(2);
		private final RuleCall cType_nameType_nameParserRuleCall_6_2_0 = (RuleCall)cType_nameAssignment_6_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6_3 = (Keyword)cGroup_6.eContents().get(3);
		
		////nÃ£o vou considerar na anÃ¡lise semÃ¢ntica
		// unary_expression:
		//	postfix_expression=postfix_expression | inc_op=INC_OP unary_expression=unary_expression | dec_op=DEC_OP
		//	unary_expression=unary_expression | unary_operator=unary_operator cast_expression=cast_expression | sizeof=SIZEOF
		//	unary_expression=unary_expression | sizeof=SIZEOF '(' type_name=type_name ')' | alignof=ALIGNOF '('
		//	type_name=type_name ')';
		@Override public ParserRule getRule() { return rule; }
		
		//postfix_expression=postfix_expression | inc_op=INC_OP unary_expression=unary_expression | dec_op=DEC_OP
		//unary_expression=unary_expression | unary_operator=unary_operator cast_expression=cast_expression | sizeof=SIZEOF
		//unary_expression=unary_expression | sizeof=SIZEOF '(' type_name=type_name ')' | alignof=ALIGNOF '('
		//type_name=type_name ')'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//postfix_expression=postfix_expression
		public Assignment getPostfix_expressionAssignment_0() { return cPostfix_expressionAssignment_0; }
		
		//postfix_expression
		public RuleCall getPostfix_expressionPostfix_expressionParserRuleCall_0_0() { return cPostfix_expressionPostfix_expressionParserRuleCall_0_0; }
		
		//inc_op=INC_OP unary_expression=unary_expression
		public Group getGroup_1() { return cGroup_1; }
		
		//inc_op=INC_OP
		public Assignment getInc_opAssignment_1_0() { return cInc_opAssignment_1_0; }
		
		//INC_OP
		public RuleCall getInc_opINC_OPTerminalRuleCall_1_0_0() { return cInc_opINC_OPTerminalRuleCall_1_0_0; }
		
		//unary_expression=unary_expression
		public Assignment getUnary_expressionAssignment_1_1() { return cUnary_expressionAssignment_1_1; }
		
		//unary_expression
		public RuleCall getUnary_expressionUnary_expressionParserRuleCall_1_1_0() { return cUnary_expressionUnary_expressionParserRuleCall_1_1_0; }
		
		//dec_op=DEC_OP unary_expression=unary_expression
		public Group getGroup_2() { return cGroup_2; }
		
		//dec_op=DEC_OP
		public Assignment getDec_opAssignment_2_0() { return cDec_opAssignment_2_0; }
		
		//DEC_OP
		public RuleCall getDec_opDEC_OPTerminalRuleCall_2_0_0() { return cDec_opDEC_OPTerminalRuleCall_2_0_0; }
		
		//unary_expression=unary_expression
		public Assignment getUnary_expressionAssignment_2_1() { return cUnary_expressionAssignment_2_1; }
		
		//unary_expression
		public RuleCall getUnary_expressionUnary_expressionParserRuleCall_2_1_0() { return cUnary_expressionUnary_expressionParserRuleCall_2_1_0; }
		
		//unary_operator=unary_operator cast_expression=cast_expression
		public Group getGroup_3() { return cGroup_3; }
		
		//unary_operator=unary_operator
		public Assignment getUnary_operatorAssignment_3_0() { return cUnary_operatorAssignment_3_0; }
		
		//unary_operator
		public RuleCall getUnary_operatorUnary_operatorParserRuleCall_3_0_0() { return cUnary_operatorUnary_operatorParserRuleCall_3_0_0; }
		
		//cast_expression=cast_expression
		public Assignment getCast_expressionAssignment_3_1() { return cCast_expressionAssignment_3_1; }
		
		//cast_expression
		public RuleCall getCast_expressionCast_expressionParserRuleCall_3_1_0() { return cCast_expressionCast_expressionParserRuleCall_3_1_0; }
		
		//sizeof=SIZEOF unary_expression=unary_expression
		public Group getGroup_4() { return cGroup_4; }
		
		//sizeof=SIZEOF
		public Assignment getSizeofAssignment_4_0() { return cSizeofAssignment_4_0; }
		
		//SIZEOF
		public RuleCall getSizeofSIZEOFParserRuleCall_4_0_0() { return cSizeofSIZEOFParserRuleCall_4_0_0; }
		
		//unary_expression=unary_expression
		public Assignment getUnary_expressionAssignment_4_1() { return cUnary_expressionAssignment_4_1; }
		
		//unary_expression
		public RuleCall getUnary_expressionUnary_expressionParserRuleCall_4_1_0() { return cUnary_expressionUnary_expressionParserRuleCall_4_1_0; }
		
		//sizeof=SIZEOF '(' type_name=type_name ')'
		public Group getGroup_5() { return cGroup_5; }
		
		//sizeof=SIZEOF
		public Assignment getSizeofAssignment_5_0() { return cSizeofAssignment_5_0; }
		
		//SIZEOF
		public RuleCall getSizeofSIZEOFParserRuleCall_5_0_0() { return cSizeofSIZEOFParserRuleCall_5_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_5_1() { return cLeftParenthesisKeyword_5_1; }
		
		//type_name=type_name
		public Assignment getType_nameAssignment_5_2() { return cType_nameAssignment_5_2; }
		
		//type_name
		public RuleCall getType_nameType_nameParserRuleCall_5_2_0() { return cType_nameType_nameParserRuleCall_5_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5_3() { return cRightParenthesisKeyword_5_3; }
		
		//alignof=ALIGNOF '(' type_name=type_name ')'
		public Group getGroup_6() { return cGroup_6; }
		
		//alignof=ALIGNOF
		public Assignment getAlignofAssignment_6_0() { return cAlignofAssignment_6_0; }
		
		//ALIGNOF
		public RuleCall getAlignofALIGNOFParserRuleCall_6_0_0() { return cAlignofALIGNOFParserRuleCall_6_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_6_1() { return cLeftParenthesisKeyword_6_1; }
		
		//type_name=type_name
		public Assignment getType_nameAssignment_6_2() { return cType_nameAssignment_6_2; }
		
		//type_name
		public RuleCall getType_nameType_nameParserRuleCall_6_2_0() { return cType_nameType_nameParserRuleCall_6_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_6_3() { return cRightParenthesisKeyword_6_3; }
	}
	public class Unary_operatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.unary_operator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cAmpersandKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cAsteriskKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cPlusSignKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cHyphenMinusKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cTildeKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cExclamationMarkKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		
		//unary_operator:
		//	'&' | '*' | '+' | '-' | '~' | '!';
		@Override public ParserRule getRule() { return rule; }
		
		//'&' | '*' | '+' | '-' | '~' | '!'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'&'
		public Keyword getAmpersandKeyword_0() { return cAmpersandKeyword_0; }
		
		//'*'
		public Keyword getAsteriskKeyword_1() { return cAsteriskKeyword_1; }
		
		//'+'
		public Keyword getPlusSignKeyword_2() { return cPlusSignKeyword_2; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_3() { return cHyphenMinusKeyword_3; }
		
		//'~'
		public Keyword getTildeKeyword_4() { return cTildeKeyword_4; }
		
		//'!'
		public Keyword getExclamationMarkKeyword_5() { return cExclamationMarkKeyword_5; }
	}
	public class Cast_expressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.cast_expression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cUnary_expressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cType_nameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cType_nameType_nameParserRuleCall_1_1_0 = (RuleCall)cType_nameAssignment_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cCast_expressionAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cCast_expressionCast_expressionParserRuleCall_1_3_0 = (RuleCall)cCast_expressionAssignment_1_3.eContents().get(0);
		
		////nÃ£o vou considerar o cast na anÃ¡lise semÃ¢ntica
		// cast_expression simple_expression:
		//	unary_expression | '(' type_name=type_name ')' cast_expression=cast_expression
		@Override public ParserRule getRule() { return rule; }
		
		//unary_expression | '(' type_name=type_name ')' cast_expression=cast_expression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//unary_expression
		public RuleCall getUnary_expressionParserRuleCall_0() { return cUnary_expressionParserRuleCall_0; }
		
		//'(' type_name=type_name ')' cast_expression=cast_expression
		public Group getGroup_1() { return cGroup_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }
		
		//type_name=type_name
		public Assignment getType_nameAssignment_1_1() { return cType_nameAssignment_1_1; }
		
		//type_name
		public RuleCall getType_nameType_nameParserRuleCall_1_1_0() { return cType_nameType_nameParserRuleCall_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }
		
		//cast_expression=cast_expression
		public Assignment getCast_expressionAssignment_1_3() { return cCast_expressionAssignment_1_3; }
		
		//cast_expression
		public RuleCall getCast_expressionCast_expressionParserRuleCall_1_3_0() { return cCast_expressionCast_expressionParserRuleCall_1_3_0; }
	}
	public class Multiplicative_expressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.multiplicative_expression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPrimary_expressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cMULLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOpMUL_OPParserRuleCall_1_1_0 = (RuleCall)cOpAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightPrimary_expressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//multiplicative_expression simple_expression:
		//	primary_expression ({MUL.left=current} op=MUL_OP right=primary_expression)*
		@Override public ParserRule getRule() { return rule; }
		
		//primary_expression ({MUL.left=current} op=MUL_OP right=primary_expression)*
		public Group getGroup() { return cGroup; }
		
		//primary_expression
		public RuleCall getPrimary_expressionParserRuleCall_0() { return cPrimary_expressionParserRuleCall_0; }
		
		//({MUL.left=current} op=MUL_OP right=primary_expression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{MUL.left=current}
		public Action getMULLeftAction_1_0() { return cMULLeftAction_1_0; }
		
		//op=MUL_OP
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//MUL_OP
		public RuleCall getOpMUL_OPParserRuleCall_1_1_0() { return cOpMUL_OPParserRuleCall_1_1_0; }
		
		//right=primary_expression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//primary_expression
		public RuleCall getRightPrimary_expressionParserRuleCall_1_2_0() { return cRightPrimary_expressionParserRuleCall_1_2_0; }
	}
	public class MUL_OPElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.MUL_OP");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cAsteriskKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cSolidusKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cPercentSignKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		//MUL_OP:
		//	'*' | '/' | '%';
		@Override public ParserRule getRule() { return rule; }
		
		//'*' | '/' | '%'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'*'
		public Keyword getAsteriskKeyword_0() { return cAsteriskKeyword_0; }
		
		//'/'
		public Keyword getSolidusKeyword_1() { return cSolidusKeyword_1; }
		
		//'%'
		public Keyword getPercentSignKeyword_2() { return cPercentSignKeyword_2; }
	}
	public class Additive_expressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.additive_expression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMultiplicative_expressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cADDLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOpAlternatives_1_1_0 = (Alternatives)cOpAssignment_1_1.eContents().get(0);
		private final Keyword cOpPlusSignKeyword_1_1_0_0 = (Keyword)cOpAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOpHyphenMinusKeyword_1_1_0_1 = (Keyword)cOpAlternatives_1_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightMultiplicative_expressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//additive_expression simple_expression:
		//	multiplicative_expression ({ADD.left=current} op=('+' | '-') right=multiplicative_expression)*
		@Override public ParserRule getRule() { return rule; }
		
		//multiplicative_expression ({ADD.left=current} op=('+' | '-') right=multiplicative_expression)*
		public Group getGroup() { return cGroup; }
		
		//multiplicative_expression
		public RuleCall getMultiplicative_expressionParserRuleCall_0() { return cMultiplicative_expressionParserRuleCall_0; }
		
		//({ADD.left=current} op=('+' | '-') right=multiplicative_expression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{ADD.left=current}
		public Action getADDLeftAction_1_0() { return cADDLeftAction_1_0; }
		
		//op=('+' | '-')
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//('+' | '-')
		public Alternatives getOpAlternatives_1_1_0() { return cOpAlternatives_1_1_0; }
		
		//'+'
		public Keyword getOpPlusSignKeyword_1_1_0_0() { return cOpPlusSignKeyword_1_1_0_0; }
		
		//'-'
		public Keyword getOpHyphenMinusKeyword_1_1_0_1() { return cOpHyphenMinusKeyword_1_1_0_1; }
		
		//right=multiplicative_expression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//multiplicative_expression
		public RuleCall getRightMultiplicative_expressionParserRuleCall_1_2_0() { return cRightMultiplicative_expressionParserRuleCall_1_2_0; }
	}
	public class Shift_expressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.shift_expression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAdditive_expressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cSHFLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOpShift_opParserRuleCall_1_1_0 = (RuleCall)cOpAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightAdditive_expressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//shift_expression simple_expression:
		//	additive_expression ({SHF.left=current} op=shift_op right=additive_expression)*
		@Override public ParserRule getRule() { return rule; }
		
		//additive_expression ({SHF.left=current} op=shift_op right=additive_expression)*
		public Group getGroup() { return cGroup; }
		
		//additive_expression
		public RuleCall getAdditive_expressionParserRuleCall_0() { return cAdditive_expressionParserRuleCall_0; }
		
		//({SHF.left=current} op=shift_op right=additive_expression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{SHF.left=current}
		public Action getSHFLeftAction_1_0() { return cSHFLeftAction_1_0; }
		
		//op=shift_op
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//shift_op
		public RuleCall getOpShift_opParserRuleCall_1_1_0() { return cOpShift_opParserRuleCall_1_1_0; }
		
		//right=additive_expression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//additive_expression
		public RuleCall getRightAdditive_expressionParserRuleCall_1_2_0() { return cRightAdditive_expressionParserRuleCall_1_2_0; }
	}
	public class Shift_opElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.shift_op");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLEFT_OPTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRIGHT_OPTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//shift_op:
		//	LEFT_OP | RIGHT_OP;
		@Override public ParserRule getRule() { return rule; }
		
		//LEFT_OP | RIGHT_OP
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//LEFT_OP
		public RuleCall getLEFT_OPTerminalRuleCall_0() { return cLEFT_OPTerminalRuleCall_0; }
		
		//RIGHT_OP
		public RuleCall getRIGHT_OPTerminalRuleCall_1() { return cRIGHT_OPTerminalRuleCall_1; }
	}
	public class Relational_expressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.relational_expression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cShift_expressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cRELLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOpRelational_opParserRuleCall_1_1_0 = (RuleCall)cOpAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightShift_expressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//relational_expression simple_expression:
		//	shift_expression ({REL.left=current} op=relational_op right=shift_expression)*
		@Override public ParserRule getRule() { return rule; }
		
		//shift_expression ({REL.left=current} op=relational_op right=shift_expression)*
		public Group getGroup() { return cGroup; }
		
		//shift_expression
		public RuleCall getShift_expressionParserRuleCall_0() { return cShift_expressionParserRuleCall_0; }
		
		//({REL.left=current} op=relational_op right=shift_expression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{REL.left=current}
		public Action getRELLeftAction_1_0() { return cRELLeftAction_1_0; }
		
		//op=relational_op
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//relational_op
		public RuleCall getOpRelational_opParserRuleCall_1_1_0() { return cOpRelational_opParserRuleCall_1_1_0; }
		
		//right=shift_expression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//shift_expression
		public RuleCall getRightShift_expressionParserRuleCall_1_2_0() { return cRightShift_expressionParserRuleCall_1_2_0; }
	}
	public class Relational_opElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.relational_op");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cL_OPTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cG_OPTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cLE_OPTerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cGE_OPTerminalRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//relational_op:
		//	L_OP | G_OP | LE_OP | GE_OP;
		@Override public ParserRule getRule() { return rule; }
		
		//L_OP | G_OP | LE_OP | GE_OP
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//L_OP
		public RuleCall getL_OPTerminalRuleCall_0() { return cL_OPTerminalRuleCall_0; }
		
		//G_OP
		public RuleCall getG_OPTerminalRuleCall_1() { return cG_OPTerminalRuleCall_1; }
		
		//LE_OP
		public RuleCall getLE_OPTerminalRuleCall_2() { return cLE_OPTerminalRuleCall_2; }
		
		//GE_OP
		public RuleCall getGE_OPTerminalRuleCall_3() { return cGE_OPTerminalRuleCall_3; }
	}
	public class Equality_expressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.equality_expression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cRelational_expressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cEQLLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOpAlternatives_1_1_0 = (Alternatives)cOpAssignment_1_1.eContents().get(0);
		private final RuleCall cOpEQ_OPTerminalRuleCall_1_1_0_0 = (RuleCall)cOpAlternatives_1_1_0.eContents().get(0);
		private final RuleCall cOpNE_OPTerminalRuleCall_1_1_0_1 = (RuleCall)cOpAlternatives_1_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightRelational_expressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//equality_expression simple_expression:
		//	relational_expression ({EQL.left=current} op=(EQ_OP | NE_OP) right=relational_expression)*
		@Override public ParserRule getRule() { return rule; }
		
		//relational_expression ({EQL.left=current} op=(EQ_OP | NE_OP) right=relational_expression)*
		public Group getGroup() { return cGroup; }
		
		//relational_expression
		public RuleCall getRelational_expressionParserRuleCall_0() { return cRelational_expressionParserRuleCall_0; }
		
		//({EQL.left=current} op=(EQ_OP | NE_OP) right=relational_expression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{EQL.left=current}
		public Action getEQLLeftAction_1_0() { return cEQLLeftAction_1_0; }
		
		//op=(EQ_OP | NE_OP)
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//(EQ_OP | NE_OP)
		public Alternatives getOpAlternatives_1_1_0() { return cOpAlternatives_1_1_0; }
		
		//EQ_OP
		public RuleCall getOpEQ_OPTerminalRuleCall_1_1_0_0() { return cOpEQ_OPTerminalRuleCall_1_1_0_0; }
		
		//NE_OP
		public RuleCall getOpNE_OPTerminalRuleCall_1_1_0_1() { return cOpNE_OPTerminalRuleCall_1_1_0_1; }
		
		//right=relational_expression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//relational_expression
		public RuleCall getRightRelational_expressionParserRuleCall_1_2_0() { return cRightRelational_expressionParserRuleCall_1_2_0; }
	}
	public class And_expressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.and_expression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cEquality_expressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cANDLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cAmpersandKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightEquality_expressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//and_expression simple_expression:
		//	equality_expression ({AND.left=current} '&' right=equality_expression)*
		@Override public ParserRule getRule() { return rule; }
		
		//equality_expression ({AND.left=current} '&' right=equality_expression)*
		public Group getGroup() { return cGroup; }
		
		//equality_expression
		public RuleCall getEquality_expressionParserRuleCall_0() { return cEquality_expressionParserRuleCall_0; }
		
		//({AND.left=current} '&' right=equality_expression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{AND.left=current}
		public Action getANDLeftAction_1_0() { return cANDLeftAction_1_0; }
		
		//'&'
		public Keyword getAmpersandKeyword_1_1() { return cAmpersandKeyword_1_1; }
		
		//right=equality_expression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//equality_expression
		public RuleCall getRightEquality_expressionParserRuleCall_1_2_0() { return cRightEquality_expressionParserRuleCall_1_2_0; }
	}
	public class Exclusive_or_expressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.exclusive_or_expression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAnd_expressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cEXC_ORLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cCircumflexAccentKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightAnd_expressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//exclusive_or_expression simple_expression:
		//	and_expression ({EXC_OR.left=current} '^' right=and_expression)*
		@Override public ParserRule getRule() { return rule; }
		
		//and_expression ({EXC_OR.left=current} '^' right=and_expression)*
		public Group getGroup() { return cGroup; }
		
		//and_expression
		public RuleCall getAnd_expressionParserRuleCall_0() { return cAnd_expressionParserRuleCall_0; }
		
		//({EXC_OR.left=current} '^' right=and_expression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{EXC_OR.left=current}
		public Action getEXC_ORLeftAction_1_0() { return cEXC_ORLeftAction_1_0; }
		
		//'^'
		public Keyword getCircumflexAccentKeyword_1_1() { return cCircumflexAccentKeyword_1_1; }
		
		//right=and_expression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//and_expression
		public RuleCall getRightAnd_expressionParserRuleCall_1_2_0() { return cRightAnd_expressionParserRuleCall_1_2_0; }
	}
	public class Inclusive_or_expressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.inclusive_or_expression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExclusive_or_expressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cINC_ORLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cVerticalLineKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightExclusive_or_expressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//inclusive_or_expression simple_expression:
		//	exclusive_or_expression ({INC_OR.left=current} '|' right=exclusive_or_expression)*
		@Override public ParserRule getRule() { return rule; }
		
		//exclusive_or_expression ({INC_OR.left=current} '|' right=exclusive_or_expression)*
		public Group getGroup() { return cGroup; }
		
		//exclusive_or_expression
		public RuleCall getExclusive_or_expressionParserRuleCall_0() { return cExclusive_or_expressionParserRuleCall_0; }
		
		//({INC_OR.left=current} '|' right=exclusive_or_expression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{INC_OR.left=current}
		public Action getINC_ORLeftAction_1_0() { return cINC_ORLeftAction_1_0; }
		
		//'|'
		public Keyword getVerticalLineKeyword_1_1() { return cVerticalLineKeyword_1_1; }
		
		//right=exclusive_or_expression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//exclusive_or_expression
		public RuleCall getRightExclusive_or_expressionParserRuleCall_1_2_0() { return cRightExclusive_or_expressionParserRuleCall_1_2_0; }
	}
	public class Logical_and_expressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.logical_and_expression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cInclusive_or_expressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cLOG_ANDLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final RuleCall cAND_OPTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightInclusive_or_expressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//logical_and_expression simple_expression:
		//	inclusive_or_expression ({LOG_AND.left=current} AND_OP right=inclusive_or_expression)*
		@Override public ParserRule getRule() { return rule; }
		
		//inclusive_or_expression ({LOG_AND.left=current} AND_OP right=inclusive_or_expression)*
		public Group getGroup() { return cGroup; }
		
		//inclusive_or_expression
		public RuleCall getInclusive_or_expressionParserRuleCall_0() { return cInclusive_or_expressionParserRuleCall_0; }
		
		//({LOG_AND.left=current} AND_OP right=inclusive_or_expression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{LOG_AND.left=current}
		public Action getLOG_ANDLeftAction_1_0() { return cLOG_ANDLeftAction_1_0; }
		
		//AND_OP
		public RuleCall getAND_OPTerminalRuleCall_1_1() { return cAND_OPTerminalRuleCall_1_1; }
		
		//right=inclusive_or_expression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//inclusive_or_expression
		public RuleCall getRightInclusive_or_expressionParserRuleCall_1_2_0() { return cRightInclusive_or_expressionParserRuleCall_1_2_0; }
	}
	public class Logical_or_expressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.logical_or_expression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cLogical_and_expressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cLOG_ORLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final RuleCall cOR_OPTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightLogical_and_expressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//logical_or_expression simple_expression:
		//	logical_and_expression ({LOG_OR.left=current} OR_OP right=logical_and_expression)*
		@Override public ParserRule getRule() { return rule; }
		
		//logical_and_expression ({LOG_OR.left=current} OR_OP right=logical_and_expression)*
		public Group getGroup() { return cGroup; }
		
		//logical_and_expression
		public RuleCall getLogical_and_expressionParserRuleCall_0() { return cLogical_and_expressionParserRuleCall_0; }
		
		//({LOG_OR.left=current} OR_OP right=logical_and_expression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{LOG_OR.left=current}
		public Action getLOG_ORLeftAction_1_0() { return cLOG_ORLeftAction_1_0; }
		
		//OR_OP
		public RuleCall getOR_OPTerminalRuleCall_1_1() { return cOR_OPTerminalRuleCall_1_1; }
		
		//right=logical_and_expression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//logical_and_expression
		public RuleCall getRightLogical_and_expressionParserRuleCall_1_2_0() { return cRightLogical_and_expressionParserRuleCall_1_2_0; }
	}
	public class Simple_expressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.simple_expression");
		private final RuleCall cLogical_or_expressionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//simple_expression:
		//	logical_or_expression;
		@Override public ParserRule getRule() { return rule; }
		
		//logical_or_expression
		public RuleCall getLogical_or_expressionParserRuleCall() { return cLogical_or_expressionParserRuleCall; }
	}
	public class Conditional_expressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.conditional_expression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cSimple_expressionAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cSimple_expressionSimple_expressionParserRuleCall_0_0 = (RuleCall)cSimple_expressionAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cLogical_or_expressionAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cLogical_or_expressionLogical_or_expressionParserRuleCall_1_0_0 = (RuleCall)cLogical_or_expressionAssignment_1_0.eContents().get(0);
		private final Keyword cQuestionMarkKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cExpressionAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cExpressionExpressionParserRuleCall_1_2_0 = (RuleCall)cExpressionAssignment_1_2.eContents().get(0);
		private final Keyword cColonKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Assignment cConditional_expressionAssignment_1_4 = (Assignment)cGroup_1.eContents().get(4);
		private final RuleCall cConditional_expressionConditional_expressionParserRuleCall_1_4_0 = (RuleCall)cConditional_expressionAssignment_1_4.eContents().get(0);
		
		////TODO Rever esse
		// conditional_expression:
		//	simple_expression=simple_expression | logical_or_expression=logical_or_expression '?' expression=expression ':'
		//	conditional_expression=conditional_expression;
		@Override public ParserRule getRule() { return rule; }
		
		//simple_expression=simple_expression | logical_or_expression=logical_or_expression '?' expression=expression ':'
		//conditional_expression=conditional_expression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//simple_expression=simple_expression
		public Assignment getSimple_expressionAssignment_0() { return cSimple_expressionAssignment_0; }
		
		//simple_expression
		public RuleCall getSimple_expressionSimple_expressionParserRuleCall_0_0() { return cSimple_expressionSimple_expressionParserRuleCall_0_0; }
		
		//logical_or_expression=logical_or_expression '?' expression=expression ':' conditional_expression=conditional_expression
		public Group getGroup_1() { return cGroup_1; }
		
		//logical_or_expression=logical_or_expression
		public Assignment getLogical_or_expressionAssignment_1_0() { return cLogical_or_expressionAssignment_1_0; }
		
		//logical_or_expression
		public RuleCall getLogical_or_expressionLogical_or_expressionParserRuleCall_1_0_0() { return cLogical_or_expressionLogical_or_expressionParserRuleCall_1_0_0; }
		
		//'?'
		public Keyword getQuestionMarkKeyword_1_1() { return cQuestionMarkKeyword_1_1; }
		
		//expression=expression
		public Assignment getExpressionAssignment_1_2() { return cExpressionAssignment_1_2; }
		
		//expression
		public RuleCall getExpressionExpressionParserRuleCall_1_2_0() { return cExpressionExpressionParserRuleCall_1_2_0; }
		
		//':'
		public Keyword getColonKeyword_1_3() { return cColonKeyword_1_3; }
		
		//conditional_expression=conditional_expression
		public Assignment getConditional_expressionAssignment_1_4() { return cConditional_expressionAssignment_1_4; }
		
		//conditional_expression
		public RuleCall getConditional_expressionConditional_expressionParserRuleCall_1_4_0() { return cConditional_expressionConditional_expressionParserRuleCall_1_4_0; }
	}
	public class Assignment_expressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.assignment_expression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cConditional_expressionAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cConditional_expressionConditional_expressionParserRuleCall_0_0 = (RuleCall)cConditional_expressionAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cUnary_expressionAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cUnary_expressionUnary_expressionParserRuleCall_1_0_0 = (RuleCall)cUnary_expressionAssignment_1_0.eContents().get(0);
		private final Assignment cAssignment_operatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cAssignment_operatorAssignment_operatorParserRuleCall_1_1_0 = (RuleCall)cAssignment_operatorAssignment_1_1.eContents().get(0);
		private final Assignment cAssignment_expressionAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cAssignment_expressionAssignment_expressionParserRuleCall_1_2_0 = (RuleCall)cAssignment_expressionAssignment_1_2.eContents().get(0);
		
		//assignment_expression:
		//	conditional_expression=conditional_expression | unary_expression=unary_expression
		//	assignment_operator=assignment_operator assignment_expression=assignment_expression;
		@Override public ParserRule getRule() { return rule; }
		
		//conditional_expression=conditional_expression | unary_expression=unary_expression
		//assignment_operator=assignment_operator assignment_expression=assignment_expression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//conditional_expression=conditional_expression
		public Assignment getConditional_expressionAssignment_0() { return cConditional_expressionAssignment_0; }
		
		//conditional_expression
		public RuleCall getConditional_expressionConditional_expressionParserRuleCall_0_0() { return cConditional_expressionConditional_expressionParserRuleCall_0_0; }
		
		//unary_expression=unary_expression assignment_operator=assignment_operator assignment_expression=assignment_expression
		public Group getGroup_1() { return cGroup_1; }
		
		//unary_expression=unary_expression
		public Assignment getUnary_expressionAssignment_1_0() { return cUnary_expressionAssignment_1_0; }
		
		//unary_expression
		public RuleCall getUnary_expressionUnary_expressionParserRuleCall_1_0_0() { return cUnary_expressionUnary_expressionParserRuleCall_1_0_0; }
		
		//assignment_operator=assignment_operator
		public Assignment getAssignment_operatorAssignment_1_1() { return cAssignment_operatorAssignment_1_1; }
		
		//assignment_operator
		public RuleCall getAssignment_operatorAssignment_operatorParserRuleCall_1_1_0() { return cAssignment_operatorAssignment_operatorParserRuleCall_1_1_0; }
		
		//assignment_expression=assignment_expression
		public Assignment getAssignment_expressionAssignment_1_2() { return cAssignment_expressionAssignment_1_2; }
		
		//assignment_expression
		public RuleCall getAssignment_expressionAssignment_expressionParserRuleCall_1_2_0() { return cAssignment_expressionAssignment_expressionParserRuleCall_1_2_0; }
	}
	public class Assignment_operatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.assignment_operator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cEqualsSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Assignment cMul_assignAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cMul_assignMUL_ASSIGNTerminalRuleCall_1_0 = (RuleCall)cMul_assignAssignment_1.eContents().get(0);
		private final Assignment cDiv_assignAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cDiv_assignDIV_ASSIGNTerminalRuleCall_2_0 = (RuleCall)cDiv_assignAssignment_2.eContents().get(0);
		private final Assignment cMod_assignAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cMod_assignMOD_ASSIGNTerminalRuleCall_3_0 = (RuleCall)cMod_assignAssignment_3.eContents().get(0);
		private final Assignment cAdd_assignAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final RuleCall cAdd_assignADD_ASSIGNTerminalRuleCall_4_0 = (RuleCall)cAdd_assignAssignment_4.eContents().get(0);
		private final Assignment cSub_assignAssignment_5 = (Assignment)cAlternatives.eContents().get(5);
		private final RuleCall cSub_assignSUB_ASSIGNTerminalRuleCall_5_0 = (RuleCall)cSub_assignAssignment_5.eContents().get(0);
		private final Assignment cLeft_assignAssignment_6 = (Assignment)cAlternatives.eContents().get(6);
		private final RuleCall cLeft_assignLEFT_ASSIGNTerminalRuleCall_6_0 = (RuleCall)cLeft_assignAssignment_6.eContents().get(0);
		private final Assignment cRight_assignAssignment_7 = (Assignment)cAlternatives.eContents().get(7);
		private final RuleCall cRight_assignRIGHT_ASSIGNTerminalRuleCall_7_0 = (RuleCall)cRight_assignAssignment_7.eContents().get(0);
		private final Assignment cAnd_assignAssignment_8 = (Assignment)cAlternatives.eContents().get(8);
		private final RuleCall cAnd_assignAND_ASSIGNTerminalRuleCall_8_0 = (RuleCall)cAnd_assignAssignment_8.eContents().get(0);
		private final Assignment cXor_assignAssignment_9 = (Assignment)cAlternatives.eContents().get(9);
		private final RuleCall cXor_assignXOR_ASSIGNTerminalRuleCall_9_0 = (RuleCall)cXor_assignAssignment_9.eContents().get(0);
		private final Assignment cOr_assignAssignment_10 = (Assignment)cAlternatives.eContents().get(10);
		private final RuleCall cOr_assignOR_ASSIGNTerminalRuleCall_10_0 = (RuleCall)cOr_assignAssignment_10.eContents().get(0);
		
		//assignment_operator:
		//	'=' | mul_assign=MUL_ASSIGN | div_assign=DIV_ASSIGN | mod_assign=MOD_ASSIGN | add_assign=ADD_ASSIGN |
		//	sub_assign=SUB_ASSIGN | left_assign=LEFT_ASSIGN | right_assign=RIGHT_ASSIGN | and_assign=AND_ASSIGN |
		//	xor_assign=XOR_ASSIGN | or_assign=OR_ASSIGN;
		@Override public ParserRule getRule() { return rule; }
		
		//'=' | mul_assign=MUL_ASSIGN | div_assign=DIV_ASSIGN | mod_assign=MOD_ASSIGN | add_assign=ADD_ASSIGN |
		//sub_assign=SUB_ASSIGN | left_assign=LEFT_ASSIGN | right_assign=RIGHT_ASSIGN | and_assign=AND_ASSIGN |
		//xor_assign=XOR_ASSIGN | or_assign=OR_ASSIGN
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'='
		public Keyword getEqualsSignKeyword_0() { return cEqualsSignKeyword_0; }
		
		//mul_assign=MUL_ASSIGN
		public Assignment getMul_assignAssignment_1() { return cMul_assignAssignment_1; }
		
		//MUL_ASSIGN
		public RuleCall getMul_assignMUL_ASSIGNTerminalRuleCall_1_0() { return cMul_assignMUL_ASSIGNTerminalRuleCall_1_0; }
		
		//div_assign=DIV_ASSIGN
		public Assignment getDiv_assignAssignment_2() { return cDiv_assignAssignment_2; }
		
		//DIV_ASSIGN
		public RuleCall getDiv_assignDIV_ASSIGNTerminalRuleCall_2_0() { return cDiv_assignDIV_ASSIGNTerminalRuleCall_2_0; }
		
		//mod_assign=MOD_ASSIGN
		public Assignment getMod_assignAssignment_3() { return cMod_assignAssignment_3; }
		
		//MOD_ASSIGN
		public RuleCall getMod_assignMOD_ASSIGNTerminalRuleCall_3_0() { return cMod_assignMOD_ASSIGNTerminalRuleCall_3_0; }
		
		//add_assign=ADD_ASSIGN
		public Assignment getAdd_assignAssignment_4() { return cAdd_assignAssignment_4; }
		
		//ADD_ASSIGN
		public RuleCall getAdd_assignADD_ASSIGNTerminalRuleCall_4_0() { return cAdd_assignADD_ASSIGNTerminalRuleCall_4_0; }
		
		//sub_assign=SUB_ASSIGN
		public Assignment getSub_assignAssignment_5() { return cSub_assignAssignment_5; }
		
		//SUB_ASSIGN
		public RuleCall getSub_assignSUB_ASSIGNTerminalRuleCall_5_0() { return cSub_assignSUB_ASSIGNTerminalRuleCall_5_0; }
		
		//left_assign=LEFT_ASSIGN
		public Assignment getLeft_assignAssignment_6() { return cLeft_assignAssignment_6; }
		
		//LEFT_ASSIGN
		public RuleCall getLeft_assignLEFT_ASSIGNTerminalRuleCall_6_0() { return cLeft_assignLEFT_ASSIGNTerminalRuleCall_6_0; }
		
		//right_assign=RIGHT_ASSIGN
		public Assignment getRight_assignAssignment_7() { return cRight_assignAssignment_7; }
		
		//RIGHT_ASSIGN
		public RuleCall getRight_assignRIGHT_ASSIGNTerminalRuleCall_7_0() { return cRight_assignRIGHT_ASSIGNTerminalRuleCall_7_0; }
		
		//and_assign=AND_ASSIGN
		public Assignment getAnd_assignAssignment_8() { return cAnd_assignAssignment_8; }
		
		//AND_ASSIGN
		public RuleCall getAnd_assignAND_ASSIGNTerminalRuleCall_8_0() { return cAnd_assignAND_ASSIGNTerminalRuleCall_8_0; }
		
		//xor_assign=XOR_ASSIGN
		public Assignment getXor_assignAssignment_9() { return cXor_assignAssignment_9; }
		
		//XOR_ASSIGN
		public RuleCall getXor_assignXOR_ASSIGNTerminalRuleCall_9_0() { return cXor_assignXOR_ASSIGNTerminalRuleCall_9_0; }
		
		//or_assign=OR_ASSIGN
		public Assignment getOr_assignAssignment_10() { return cOr_assignAssignment_10; }
		
		//OR_ASSIGN
		public RuleCall getOr_assignOR_ASSIGNTerminalRuleCall_10_0() { return cOr_assignOR_ASSIGNTerminalRuleCall_10_0; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.expression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAssignment_expressionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAssignment_expressionAssignment_expressionParserRuleCall_0_0 = (RuleCall)cAssignment_expressionAssignment_0.eContents().get(0);
		private final Assignment cExpression2Assignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpression2Expression2ParserRuleCall_1_0 = (RuleCall)cExpression2Assignment_1.eContents().get(0);
		
		//expression:
		//	assignment_expression=assignment_expression expression2=expression2;
		@Override public ParserRule getRule() { return rule; }
		
		//assignment_expression=assignment_expression expression2=expression2
		public Group getGroup() { return cGroup; }
		
		//assignment_expression=assignment_expression
		public Assignment getAssignment_expressionAssignment_0() { return cAssignment_expressionAssignment_0; }
		
		//assignment_expression
		public RuleCall getAssignment_expressionAssignment_expressionParserRuleCall_0_0() { return cAssignment_expressionAssignment_expressionParserRuleCall_0_0; }
		
		//expression2=expression2
		public Assignment getExpression2Assignment_1() { return cExpression2Assignment_1; }
		
		//expression2
		public RuleCall getExpression2Expression2ParserRuleCall_1_0() { return cExpression2Expression2ParserRuleCall_1_0; }
	}
	public class Expression2Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.expression2");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cExpression2Action_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cAssignment_expressionAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cAssignment_expressionAssignment_expressionParserRuleCall_1_1_0 = (RuleCall)cAssignment_expressionAssignment_1_1.eContents().get(0);
		private final Assignment cExpression2Assignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cExpression2Expression2ParserRuleCall_1_2_0 = (RuleCall)cExpression2Assignment_1_2.eContents().get(0);
		
		//expression2:
		//	{expression2} (',' assignment_expression=assignment_expression expression2=expression2)?;
		@Override public ParserRule getRule() { return rule; }
		
		//{expression2} (',' assignment_expression=assignment_expression expression2=expression2)?
		public Group getGroup() { return cGroup; }
		
		//{expression2}
		public Action getExpression2Action_0() { return cExpression2Action_0; }
		
		//(',' assignment_expression=assignment_expression expression2=expression2)?
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//assignment_expression=assignment_expression
		public Assignment getAssignment_expressionAssignment_1_1() { return cAssignment_expressionAssignment_1_1; }
		
		//assignment_expression
		public RuleCall getAssignment_expressionAssignment_expressionParserRuleCall_1_1_0() { return cAssignment_expressionAssignment_expressionParserRuleCall_1_1_0; }
		
		//expression2=expression2
		public Assignment getExpression2Assignment_1_2() { return cExpression2Assignment_1_2; }
		
		//expression2
		public RuleCall getExpression2Expression2ParserRuleCall_1_2_0() { return cExpression2Expression2ParserRuleCall_1_2_0; }
	}
	public class Constant_expressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.constant_expression");
		private final Assignment cConditional_expressionAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cConditional_expressionConditional_expressionParserRuleCall_0 = (RuleCall)cConditional_expressionAssignment.eContents().get(0);
		
		//constant_expression:
		//	conditional_expression=conditional_expression / * with constraints * /;
		@Override public ParserRule getRule() { return rule; }
		
		//conditional_expression=conditional_expression
		public Assignment getConditional_expressionAssignment() { return cConditional_expressionAssignment; }
		
		//conditional_expression
		public RuleCall getConditional_expressionConditional_expressionParserRuleCall_0() { return cConditional_expressionConditional_expressionParserRuleCall_0; }
	}
	public class DeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.declaration");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cDeclaration_specifiersAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cDeclaration_specifiersDeclaration_specifiersParserRuleCall_0_0_0 = (RuleCall)cDeclaration_specifiersAssignment_0_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cDeclaration_specifiersAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cDeclaration_specifiersDeclaration_specifiersParserRuleCall_1_0_0 = (RuleCall)cDeclaration_specifiersAssignment_1_0.eContents().get(0);
		private final Assignment cInit_declarator_listAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cInit_declarator_listInit_declarator_listParserRuleCall_1_1_0 = (RuleCall)cInit_declarator_listAssignment_1_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cStatic_assert_declarationAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cStatic_assert_declarationStatic_assert_declarationParserRuleCall_2_0 = (RuleCall)cStatic_assert_declarationAssignment_2.eContents().get(0);
		
		/// *TODO
		// * declaration
		//	: declaration_specifiers+=declaration_specifiers ';'
		//	| declaration_specifiers+=declaration_specifiers init_declarator_list+=init_declarator_list ';'
		//	| static_assert_declaration=static_assert_declaration
		//	;
		// * /
		//declaration:
		//	declaration_specifiers=declaration_specifiers ';' | declaration_specifiers=declaration_specifiers
		//	init_declarator_list=init_declarator_list ';' | static_assert_declaration=static_assert_declaration;
		@Override public ParserRule getRule() { return rule; }
		
		//declaration_specifiers=declaration_specifiers ';' | declaration_specifiers=declaration_specifiers
		//init_declarator_list=init_declarator_list ';' | static_assert_declaration=static_assert_declaration
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//declaration_specifiers=declaration_specifiers ';'
		public Group getGroup_0() { return cGroup_0; }
		
		//declaration_specifiers=declaration_specifiers
		public Assignment getDeclaration_specifiersAssignment_0_0() { return cDeclaration_specifiersAssignment_0_0; }
		
		//declaration_specifiers
		public RuleCall getDeclaration_specifiersDeclaration_specifiersParserRuleCall_0_0_0() { return cDeclaration_specifiersDeclaration_specifiersParserRuleCall_0_0_0; }
		
		//';'
		public Keyword getSemicolonKeyword_0_1() { return cSemicolonKeyword_0_1; }
		
		//declaration_specifiers=declaration_specifiers init_declarator_list=init_declarator_list ';'
		public Group getGroup_1() { return cGroup_1; }
		
		//declaration_specifiers=declaration_specifiers
		public Assignment getDeclaration_specifiersAssignment_1_0() { return cDeclaration_specifiersAssignment_1_0; }
		
		//declaration_specifiers
		public RuleCall getDeclaration_specifiersDeclaration_specifiersParserRuleCall_1_0_0() { return cDeclaration_specifiersDeclaration_specifiersParserRuleCall_1_0_0; }
		
		//init_declarator_list=init_declarator_list
		public Assignment getInit_declarator_listAssignment_1_1() { return cInit_declarator_listAssignment_1_1; }
		
		//init_declarator_list
		public RuleCall getInit_declarator_listInit_declarator_listParserRuleCall_1_1_0() { return cInit_declarator_listInit_declarator_listParserRuleCall_1_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_1_2() { return cSemicolonKeyword_1_2; }
		
		//static_assert_declaration=static_assert_declaration
		public Assignment getStatic_assert_declarationAssignment_2() { return cStatic_assert_declarationAssignment_2; }
		
		//static_assert_declaration
		public RuleCall getStatic_assert_declarationStatic_assert_declarationParserRuleCall_2_0() { return cStatic_assert_declarationStatic_assert_declarationParserRuleCall_2_0; }
	}
	public class Declaration_specifiersElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.declaration_specifiers");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cStorage_class_specifierAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cStorage_class_specifierStorage_class_specifierParserRuleCall_0_0_0 = (RuleCall)cStorage_class_specifierAssignment_0_0.eContents().get(0);
		private final Assignment cDeclaration_specifiersAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cDeclaration_specifiersDeclaration_specifiersParserRuleCall_0_1_0 = (RuleCall)cDeclaration_specifiersAssignment_0_1.eContents().get(0);
		private final Assignment cStorage_class_specifierAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cStorage_class_specifierStorage_class_specifierParserRuleCall_1_0 = (RuleCall)cStorage_class_specifierAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Assignment cType_specifierAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cType_specifierType_specifierParserRuleCall_2_0_0 = (RuleCall)cType_specifierAssignment_2_0.eContents().get(0);
		private final Assignment cDeclaration_specifiersAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cDeclaration_specifiersDeclaration_specifiersParserRuleCall_2_1_0 = (RuleCall)cDeclaration_specifiersAssignment_2_1.eContents().get(0);
		private final Assignment cType_specifierAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cType_specifierType_specifierParserRuleCall_3_0 = (RuleCall)cType_specifierAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Assignment cType_qualifierAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cType_qualifierType_qualifierParserRuleCall_4_0_0 = (RuleCall)cType_qualifierAssignment_4_0.eContents().get(0);
		private final Assignment cDeclaration_specifiersAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cDeclaration_specifiersDeclaration_specifiersParserRuleCall_4_1_0 = (RuleCall)cDeclaration_specifiersAssignment_4_1.eContents().get(0);
		private final Assignment cType_qualifierAssignment_5 = (Assignment)cAlternatives.eContents().get(5);
		private final RuleCall cType_qualifierType_qualifierParserRuleCall_5_0 = (RuleCall)cType_qualifierAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final Assignment cFunction_specifierAssignment_6_0 = (Assignment)cGroup_6.eContents().get(0);
		private final RuleCall cFunction_specifierFunction_specifierParserRuleCall_6_0_0 = (RuleCall)cFunction_specifierAssignment_6_0.eContents().get(0);
		private final Assignment cDeclaration_specifiersAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cDeclaration_specifiersDeclaration_specifiersParserRuleCall_6_1_0 = (RuleCall)cDeclaration_specifiersAssignment_6_1.eContents().get(0);
		private final Assignment cFunction_specifierAssignment_7 = (Assignment)cAlternatives.eContents().get(7);
		private final RuleCall cFunction_specifierFunction_specifierParserRuleCall_7_0 = (RuleCall)cFunction_specifierAssignment_7.eContents().get(0);
		private final Group cGroup_8 = (Group)cAlternatives.eContents().get(8);
		private final Assignment cAlignment_specifierAssignment_8_0 = (Assignment)cGroup_8.eContents().get(0);
		private final RuleCall cAlignment_specifierAlignment_specifierParserRuleCall_8_0_0 = (RuleCall)cAlignment_specifierAssignment_8_0.eContents().get(0);
		private final Assignment cDeclaration_specifiersAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final RuleCall cDeclaration_specifiersDeclaration_specifiersParserRuleCall_8_1_0 = (RuleCall)cDeclaration_specifiersAssignment_8_1.eContents().get(0);
		private final Assignment cAlignment_specifierAssignment_9 = (Assignment)cAlternatives.eContents().get(9);
		private final RuleCall cAlignment_specifierAlignment_specifierParserRuleCall_9_0 = (RuleCall)cAlignment_specifierAssignment_9.eContents().get(0);
		
		/// *TODO
		// * declaration_specifiers
		//	: storage_class_specifier=storage_class_specifier declaration_specifiers+=declaration_specifiers
		//	| storage_class_specifier=storage_class_specifier
		//	| type_specifier=type_specifier declaration_specifiers+=declaration_specifiers
		//	| type_specifier=type_specifier
		//	| type_qualifier=type_qualifier declaration_specifiers+=declaration_specifiers
		//	| type_qualifier=type_qualifier
		//	| function_specifier=function_specifier declaration_specifiers+=declaration_specifiers
		//	| function_specifier=function_specifier
		//	| alignment_specifier=alignment_specifier declaration_specifiers+=declaration_specifiers
		//	| alignment_specifier=alignment_specifier
		//	;
		// * /
		//declaration_specifiers:
		//	storage_class_specifier=storage_class_specifier declaration_specifiers=declaration_specifiers |
		//	storage_class_specifier=storage_class_specifier | type_specifier=type_specifier
		//	declaration_specifiers=declaration_specifiers | type_specifier=type_specifier | type_qualifier=type_qualifier
		//	declaration_specifiers=declaration_specifiers | type_qualifier=type_qualifier | function_specifier=function_specifier
		//	declaration_specifiers=declaration_specifiers | function_specifier=function_specifier |
		//	alignment_specifier=alignment_specifier declaration_specifiers=declaration_specifiers |
		//	alignment_specifier=alignment_specifier;
		@Override public ParserRule getRule() { return rule; }
		
		//storage_class_specifier=storage_class_specifier declaration_specifiers=declaration_specifiers |
		//storage_class_specifier=storage_class_specifier | type_specifier=type_specifier
		//declaration_specifiers=declaration_specifiers | type_specifier=type_specifier | type_qualifier=type_qualifier
		//declaration_specifiers=declaration_specifiers | type_qualifier=type_qualifier | function_specifier=function_specifier
		//declaration_specifiers=declaration_specifiers | function_specifier=function_specifier |
		//alignment_specifier=alignment_specifier declaration_specifiers=declaration_specifiers |
		//alignment_specifier=alignment_specifier
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//storage_class_specifier=storage_class_specifier declaration_specifiers=declaration_specifiers
		public Group getGroup_0() { return cGroup_0; }
		
		//storage_class_specifier=storage_class_specifier
		public Assignment getStorage_class_specifierAssignment_0_0() { return cStorage_class_specifierAssignment_0_0; }
		
		//storage_class_specifier
		public RuleCall getStorage_class_specifierStorage_class_specifierParserRuleCall_0_0_0() { return cStorage_class_specifierStorage_class_specifierParserRuleCall_0_0_0; }
		
		//declaration_specifiers=declaration_specifiers
		public Assignment getDeclaration_specifiersAssignment_0_1() { return cDeclaration_specifiersAssignment_0_1; }
		
		//declaration_specifiers
		public RuleCall getDeclaration_specifiersDeclaration_specifiersParserRuleCall_0_1_0() { return cDeclaration_specifiersDeclaration_specifiersParserRuleCall_0_1_0; }
		
		//storage_class_specifier=storage_class_specifier
		public Assignment getStorage_class_specifierAssignment_1() { return cStorage_class_specifierAssignment_1; }
		
		//storage_class_specifier
		public RuleCall getStorage_class_specifierStorage_class_specifierParserRuleCall_1_0() { return cStorage_class_specifierStorage_class_specifierParserRuleCall_1_0; }
		
		//type_specifier=type_specifier declaration_specifiers=declaration_specifiers
		public Group getGroup_2() { return cGroup_2; }
		
		//type_specifier=type_specifier
		public Assignment getType_specifierAssignment_2_0() { return cType_specifierAssignment_2_0; }
		
		//type_specifier
		public RuleCall getType_specifierType_specifierParserRuleCall_2_0_0() { return cType_specifierType_specifierParserRuleCall_2_0_0; }
		
		//declaration_specifiers=declaration_specifiers
		public Assignment getDeclaration_specifiersAssignment_2_1() { return cDeclaration_specifiersAssignment_2_1; }
		
		//declaration_specifiers
		public RuleCall getDeclaration_specifiersDeclaration_specifiersParserRuleCall_2_1_0() { return cDeclaration_specifiersDeclaration_specifiersParserRuleCall_2_1_0; }
		
		//type_specifier=type_specifier
		public Assignment getType_specifierAssignment_3() { return cType_specifierAssignment_3; }
		
		//type_specifier
		public RuleCall getType_specifierType_specifierParserRuleCall_3_0() { return cType_specifierType_specifierParserRuleCall_3_0; }
		
		//type_qualifier=type_qualifier declaration_specifiers=declaration_specifiers
		public Group getGroup_4() { return cGroup_4; }
		
		//type_qualifier=type_qualifier
		public Assignment getType_qualifierAssignment_4_0() { return cType_qualifierAssignment_4_0; }
		
		//type_qualifier
		public RuleCall getType_qualifierType_qualifierParserRuleCall_4_0_0() { return cType_qualifierType_qualifierParserRuleCall_4_0_0; }
		
		//declaration_specifiers=declaration_specifiers
		public Assignment getDeclaration_specifiersAssignment_4_1() { return cDeclaration_specifiersAssignment_4_1; }
		
		//declaration_specifiers
		public RuleCall getDeclaration_specifiersDeclaration_specifiersParserRuleCall_4_1_0() { return cDeclaration_specifiersDeclaration_specifiersParserRuleCall_4_1_0; }
		
		//type_qualifier=type_qualifier
		public Assignment getType_qualifierAssignment_5() { return cType_qualifierAssignment_5; }
		
		//type_qualifier
		public RuleCall getType_qualifierType_qualifierParserRuleCall_5_0() { return cType_qualifierType_qualifierParserRuleCall_5_0; }
		
		//function_specifier=function_specifier declaration_specifiers=declaration_specifiers
		public Group getGroup_6() { return cGroup_6; }
		
		//function_specifier=function_specifier
		public Assignment getFunction_specifierAssignment_6_0() { return cFunction_specifierAssignment_6_0; }
		
		//function_specifier
		public RuleCall getFunction_specifierFunction_specifierParserRuleCall_6_0_0() { return cFunction_specifierFunction_specifierParserRuleCall_6_0_0; }
		
		//declaration_specifiers=declaration_specifiers
		public Assignment getDeclaration_specifiersAssignment_6_1() { return cDeclaration_specifiersAssignment_6_1; }
		
		//declaration_specifiers
		public RuleCall getDeclaration_specifiersDeclaration_specifiersParserRuleCall_6_1_0() { return cDeclaration_specifiersDeclaration_specifiersParserRuleCall_6_1_0; }
		
		//function_specifier=function_specifier
		public Assignment getFunction_specifierAssignment_7() { return cFunction_specifierAssignment_7; }
		
		//function_specifier
		public RuleCall getFunction_specifierFunction_specifierParserRuleCall_7_0() { return cFunction_specifierFunction_specifierParserRuleCall_7_0; }
		
		//alignment_specifier=alignment_specifier declaration_specifiers=declaration_specifiers
		public Group getGroup_8() { return cGroup_8; }
		
		//alignment_specifier=alignment_specifier
		public Assignment getAlignment_specifierAssignment_8_0() { return cAlignment_specifierAssignment_8_0; }
		
		//alignment_specifier
		public RuleCall getAlignment_specifierAlignment_specifierParserRuleCall_8_0_0() { return cAlignment_specifierAlignment_specifierParserRuleCall_8_0_0; }
		
		//declaration_specifiers=declaration_specifiers
		public Assignment getDeclaration_specifiersAssignment_8_1() { return cDeclaration_specifiersAssignment_8_1; }
		
		//declaration_specifiers
		public RuleCall getDeclaration_specifiersDeclaration_specifiersParserRuleCall_8_1_0() { return cDeclaration_specifiersDeclaration_specifiersParserRuleCall_8_1_0; }
		
		//alignment_specifier=alignment_specifier
		public Assignment getAlignment_specifierAssignment_9() { return cAlignment_specifierAssignment_9; }
		
		//alignment_specifier
		public RuleCall getAlignment_specifierAlignment_specifierParserRuleCall_9_0() { return cAlignment_specifierAlignment_specifierParserRuleCall_9_0; }
	}
	public class Init_declarator_listElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.init_declarator_list");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cInit_declaratorAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cInit_declaratorInit_declaratorParserRuleCall_0_0 = (RuleCall)cInit_declaratorAssignment_0.eContents().get(0);
		private final Assignment cInit_declarator_list2Assignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cInit_declarator_list2Init_declarator_list2ParserRuleCall_1_0 = (RuleCall)cInit_declarator_list2Assignment_1.eContents().get(0);
		
		//init_declarator_list:
		//	init_declarator=init_declarator init_declarator_list2=init_declarator_list2;
		@Override public ParserRule getRule() { return rule; }
		
		//init_declarator=init_declarator init_declarator_list2=init_declarator_list2
		public Group getGroup() { return cGroup; }
		
		//init_declarator=init_declarator
		public Assignment getInit_declaratorAssignment_0() { return cInit_declaratorAssignment_0; }
		
		//init_declarator
		public RuleCall getInit_declaratorInit_declaratorParserRuleCall_0_0() { return cInit_declaratorInit_declaratorParserRuleCall_0_0; }
		
		//init_declarator_list2=init_declarator_list2
		public Assignment getInit_declarator_list2Assignment_1() { return cInit_declarator_list2Assignment_1; }
		
		//init_declarator_list2
		public RuleCall getInit_declarator_list2Init_declarator_list2ParserRuleCall_1_0() { return cInit_declarator_list2Init_declarator_list2ParserRuleCall_1_0; }
	}
	public class Init_declarator_list2Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.init_declarator_list2");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cInit_declarator_list2Action_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cInit_declaratorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cInit_declaratorInit_declaratorParserRuleCall_1_1_0 = (RuleCall)cInit_declaratorAssignment_1_1.eContents().get(0);
		private final Assignment cInit_declarator_list2Assignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cInit_declarator_list2Init_declarator_list2ParserRuleCall_1_2_0 = (RuleCall)cInit_declarator_list2Assignment_1_2.eContents().get(0);
		
		//init_declarator_list2:
		//	{init_declarator_list2} (',' init_declarator=init_declarator init_declarator_list2=init_declarator_list2)?;
		@Override public ParserRule getRule() { return rule; }
		
		//{init_declarator_list2} (',' init_declarator=init_declarator init_declarator_list2=init_declarator_list2)?
		public Group getGroup() { return cGroup; }
		
		//{init_declarator_list2}
		public Action getInit_declarator_list2Action_0() { return cInit_declarator_list2Action_0; }
		
		//(',' init_declarator=init_declarator init_declarator_list2=init_declarator_list2)?
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//init_declarator=init_declarator
		public Assignment getInit_declaratorAssignment_1_1() { return cInit_declaratorAssignment_1_1; }
		
		//init_declarator
		public RuleCall getInit_declaratorInit_declaratorParserRuleCall_1_1_0() { return cInit_declaratorInit_declaratorParserRuleCall_1_1_0; }
		
		//init_declarator_list2=init_declarator_list2
		public Assignment getInit_declarator_list2Assignment_1_2() { return cInit_declarator_list2Assignment_1_2; }
		
		//init_declarator_list2
		public RuleCall getInit_declarator_list2Init_declarator_list2ParserRuleCall_1_2_0() { return cInit_declarator_list2Init_declarator_list2ParserRuleCall_1_2_0; }
	}
	public class Init_declaratorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.init_declarator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cDeclaratorAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cDeclaratorDeclaratorParserRuleCall_0_0_0 = (RuleCall)cDeclaratorAssignment_0_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cInitializerAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cInitializerSimple_expressionParserRuleCall_0_2_0 = (RuleCall)cInitializerAssignment_0_2.eContents().get(0);
		private final Assignment cDeclaratorAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cDeclaratorDeclaratorParserRuleCall_1_0 = (RuleCall)cDeclaratorAssignment_1.eContents().get(0);
		
		//init_declarator:
		//	declarator=declarator '=' initializer=simple_expression | declarator=declarator;
		@Override public ParserRule getRule() { return rule; }
		
		//declarator=declarator '=' initializer=simple_expression | declarator=declarator
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//declarator=declarator '=' initializer=simple_expression
		public Group getGroup_0() { return cGroup_0; }
		
		//declarator=declarator
		public Assignment getDeclaratorAssignment_0_0() { return cDeclaratorAssignment_0_0; }
		
		//declarator
		public RuleCall getDeclaratorDeclaratorParserRuleCall_0_0_0() { return cDeclaratorDeclaratorParserRuleCall_0_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_0_1() { return cEqualsSignKeyword_0_1; }
		
		//initializer=simple_expression
		public Assignment getInitializerAssignment_0_2() { return cInitializerAssignment_0_2; }
		
		//simple_expression
		public RuleCall getInitializerSimple_expressionParserRuleCall_0_2_0() { return cInitializerSimple_expressionParserRuleCall_0_2_0; }
		
		//declarator=declarator
		public Assignment getDeclaratorAssignment_1() { return cDeclaratorAssignment_1; }
		
		//declarator
		public RuleCall getDeclaratorDeclaratorParserRuleCall_1_0() { return cDeclaratorDeclaratorParserRuleCall_1_0; }
	}
	public class Storage_class_specifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.storage_class_specifier");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cTypedefAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cTypedefTYPEDEFParserRuleCall_0_0 = (RuleCall)cTypedefAssignment_0.eContents().get(0);
		private final Assignment cExternAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cExternEXTERNParserRuleCall_1_0 = (RuleCall)cExternAssignment_1.eContents().get(0);
		private final Assignment cStaticAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cStaticSTATICParserRuleCall_2_0 = (RuleCall)cStaticAssignment_2.eContents().get(0);
		private final Assignment cThread_localAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cThread_localTHREAD_LOCALParserRuleCall_3_0 = (RuleCall)cThread_localAssignment_3.eContents().get(0);
		private final Assignment cAutoAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final RuleCall cAutoAUTOParserRuleCall_4_0 = (RuleCall)cAutoAssignment_4.eContents().get(0);
		private final Assignment cRegisterAssignment_5 = (Assignment)cAlternatives.eContents().get(5);
		private final RuleCall cRegisterREGISTERParserRuleCall_5_0 = (RuleCall)cRegisterAssignment_5.eContents().get(0);
		
		//storage_class_specifier:
		//	typedef=TYPEDEF / * identifiers must be flagged as TYPEDEF_NAME * / | extern=EXTERN | static=STATIC |
		//	thread_local=THREAD_LOCAL | auto=AUTO | register=REGISTER;
		@Override public ParserRule getRule() { return rule; }
		
		//typedef=TYPEDEF / * identifiers must be flagged as TYPEDEF_NAME * / | extern=EXTERN | static=STATIC |
		//thread_local=THREAD_LOCAL | auto=AUTO | register=REGISTER
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//typedef=TYPEDEF
		public Assignment getTypedefAssignment_0() { return cTypedefAssignment_0; }
		
		//TYPEDEF
		public RuleCall getTypedefTYPEDEFParserRuleCall_0_0() { return cTypedefTYPEDEFParserRuleCall_0_0; }
		
		//extern=EXTERN
		public Assignment getExternAssignment_1() { return cExternAssignment_1; }
		
		//EXTERN
		public RuleCall getExternEXTERNParserRuleCall_1_0() { return cExternEXTERNParserRuleCall_1_0; }
		
		//static=STATIC
		public Assignment getStaticAssignment_2() { return cStaticAssignment_2; }
		
		//STATIC
		public RuleCall getStaticSTATICParserRuleCall_2_0() { return cStaticSTATICParserRuleCall_2_0; }
		
		//thread_local=THREAD_LOCAL
		public Assignment getThread_localAssignment_3() { return cThread_localAssignment_3; }
		
		//THREAD_LOCAL
		public RuleCall getThread_localTHREAD_LOCALParserRuleCall_3_0() { return cThread_localTHREAD_LOCALParserRuleCall_3_0; }
		
		//auto=AUTO
		public Assignment getAutoAssignment_4() { return cAutoAssignment_4; }
		
		//AUTO
		public RuleCall getAutoAUTOParserRuleCall_4_0() { return cAutoAUTOParserRuleCall_4_0; }
		
		//register=REGISTER
		public Assignment getRegisterAssignment_5() { return cRegisterAssignment_5; }
		
		//REGISTER
		public RuleCall getRegisterREGISTERParserRuleCall_5_0() { return cRegisterREGISTERParserRuleCall_5_0; }
	}
	public class Type_specifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.type_specifier");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cVoidTypeAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cVoid_typeAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cVoid_typeVOIDParserRuleCall_0_1_0 = (RuleCall)cVoid_typeAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cCharTypeAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cChar_typeAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cChar_typeCHARParserRuleCall_1_1_0 = (RuleCall)cChar_typeAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cShortTypeAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Assignment cShort_typeAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cShort_typeSHORTParserRuleCall_2_1_0 = (RuleCall)cShort_typeAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cIntTypeAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Assignment cInt_typeAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cInt_typeINTNAMEParserRuleCall_3_1_0 = (RuleCall)cInt_typeAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Action cLongTypeAction_4_0 = (Action)cGroup_4.eContents().get(0);
		private final Assignment cLong_typeAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cLong_typeLONGParserRuleCall_4_1_0 = (RuleCall)cLong_typeAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Action cFloatTypeAction_5_0 = (Action)cGroup_5.eContents().get(0);
		private final Assignment cFloat_typeAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cFloat_typeFLOATParserRuleCall_5_1_0 = (RuleCall)cFloat_typeAssignment_5_1.eContents().get(0);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final Action cDoubleTypeAction_6_0 = (Action)cGroup_6.eContents().get(0);
		private final Assignment cDouble_typeAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cDouble_typeDOUBLEParserRuleCall_6_1_0 = (RuleCall)cDouble_typeAssignment_6_1.eContents().get(0);
		private final Group cGroup_7 = (Group)cAlternatives.eContents().get(7);
		private final Action cSignedTypeAction_7_0 = (Action)cGroup_7.eContents().get(0);
		private final Assignment cSigned_typeAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cSigned_typeSIGNEDParserRuleCall_7_1_0 = (RuleCall)cSigned_typeAssignment_7_1.eContents().get(0);
		private final Group cGroup_8 = (Group)cAlternatives.eContents().get(8);
		private final Action cUnsignedTypeAction_8_0 = (Action)cGroup_8.eContents().get(0);
		private final Assignment cUnsigned_typeAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final RuleCall cUnsigned_typeUNSIGNEDParserRuleCall_8_1_0 = (RuleCall)cUnsigned_typeAssignment_8_1.eContents().get(0);
		private final Group cGroup_9 = (Group)cAlternatives.eContents().get(9);
		private final Action cBooleanTypeAction_9_0 = (Action)cGroup_9.eContents().get(0);
		private final Assignment cBool_typeAssignment_9_1 = (Assignment)cGroup_9.eContents().get(1);
		private final RuleCall cBool_typeBOOLParserRuleCall_9_1_0 = (RuleCall)cBool_typeAssignment_9_1.eContents().get(0);
		private final Group cGroup_10 = (Group)cAlternatives.eContents().get(10);
		private final Action cComplexTypeAction_10_0 = (Action)cGroup_10.eContents().get(0);
		private final Assignment cComplex_typeAssignment_10_1 = (Assignment)cGroup_10.eContents().get(1);
		private final RuleCall cComplex_typeCOMPLEXParserRuleCall_10_1_0 = (RuleCall)cComplex_typeAssignment_10_1.eContents().get(0);
		private final Group cGroup_11 = (Group)cAlternatives.eContents().get(11);
		private final Action cImaginaryTypeAction_11_0 = (Action)cGroup_11.eContents().get(0);
		private final Assignment cImaginary_typeAssignment_11_1 = (Assignment)cGroup_11.eContents().get(1);
		private final RuleCall cImaginary_typeIMAGINARYParserRuleCall_11_1_0 = (RuleCall)cImaginary_typeAssignment_11_1.eContents().get(0);
		private final Assignment cAtomic_type_specifierAssignment_12 = (Assignment)cAlternatives.eContents().get(12);
		private final RuleCall cAtomic_type_specifierAtomic_type_specifierParserRuleCall_12_0 = (RuleCall)cAtomic_type_specifierAssignment_12.eContents().get(0);
		private final Assignment cStruct_or_union_specifierAssignment_13 = (Assignment)cAlternatives.eContents().get(13);
		private final RuleCall cStruct_or_union_specifierStruct_or_union_specifierParserRuleCall_13_0 = (RuleCall)cStruct_or_union_specifierAssignment_13.eContents().get(0);
		private final Assignment cEnum_specifierAssignment_14 = (Assignment)cAlternatives.eContents().get(14);
		private final RuleCall cEnum_specifierEnum_specifierParserRuleCall_14_0 = (RuleCall)cEnum_specifierAssignment_14.eContents().get(0);
		private final Assignment cTypedef_nameAssignment_15 = (Assignment)cAlternatives.eContents().get(15);
		private final RuleCall cTypedef_nameTYPEDEFParserRuleCall_15_0 = (RuleCall)cTypedef_nameAssignment_15.eContents().get(0);
		
		//type_specifier:
		//	{voidType} void_type=VOID | {charType} char_type=CHAR | {shortType} short_type=SHORT | {intType} int_type=INTNAME |
		//	{longType} long_type=LONG | {floatType} float_type=FLOAT | {doubleType} double_type=DOUBLE | {signedType}
		//	signed_type=SIGNED | {unsignedType} unsigned_type=UNSIGNED | {booleanType} bool_type=BOOL | {complexType}
		//	complex_type=COMPLEX | {imaginaryType} imaginary_type=IMAGINARY / * non-mandated extension * / |
		//	atomic_type_specifier=atomic_type_specifier | struct_or_union_specifier=struct_or_union_specifier |
		//	enum_specifier=enum_specifier | typedef_name=TYPEDEF / * after it has been defined as such * /;
		@Override public ParserRule getRule() { return rule; }
		
		//{voidType} void_type=VOID | {charType} char_type=CHAR | {shortType} short_type=SHORT | {intType} int_type=INTNAME |
		//{longType} long_type=LONG | {floatType} float_type=FLOAT | {doubleType} double_type=DOUBLE | {signedType}
		//signed_type=SIGNED | {unsignedType} unsigned_type=UNSIGNED | {booleanType} bool_type=BOOL | {complexType}
		//complex_type=COMPLEX | {imaginaryType} imaginary_type=IMAGINARY / * non-mandated extension * / |
		//atomic_type_specifier=atomic_type_specifier | struct_or_union_specifier=struct_or_union_specifier |
		//enum_specifier=enum_specifier | typedef_name=TYPEDEF
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{voidType} void_type=VOID
		public Group getGroup_0() { return cGroup_0; }
		
		//{voidType}
		public Action getVoidTypeAction_0_0() { return cVoidTypeAction_0_0; }
		
		//void_type=VOID
		public Assignment getVoid_typeAssignment_0_1() { return cVoid_typeAssignment_0_1; }
		
		//VOID
		public RuleCall getVoid_typeVOIDParserRuleCall_0_1_0() { return cVoid_typeVOIDParserRuleCall_0_1_0; }
		
		//{charType} char_type=CHAR
		public Group getGroup_1() { return cGroup_1; }
		
		//{charType}
		public Action getCharTypeAction_1_0() { return cCharTypeAction_1_0; }
		
		//char_type=CHAR
		public Assignment getChar_typeAssignment_1_1() { return cChar_typeAssignment_1_1; }
		
		//CHAR
		public RuleCall getChar_typeCHARParserRuleCall_1_1_0() { return cChar_typeCHARParserRuleCall_1_1_0; }
		
		//{shortType} short_type=SHORT
		public Group getGroup_2() { return cGroup_2; }
		
		//{shortType}
		public Action getShortTypeAction_2_0() { return cShortTypeAction_2_0; }
		
		//short_type=SHORT
		public Assignment getShort_typeAssignment_2_1() { return cShort_typeAssignment_2_1; }
		
		//SHORT
		public RuleCall getShort_typeSHORTParserRuleCall_2_1_0() { return cShort_typeSHORTParserRuleCall_2_1_0; }
		
		//{intType} int_type=INTNAME
		public Group getGroup_3() { return cGroup_3; }
		
		//{intType}
		public Action getIntTypeAction_3_0() { return cIntTypeAction_3_0; }
		
		//int_type=INTNAME
		public Assignment getInt_typeAssignment_3_1() { return cInt_typeAssignment_3_1; }
		
		//INTNAME
		public RuleCall getInt_typeINTNAMEParserRuleCall_3_1_0() { return cInt_typeINTNAMEParserRuleCall_3_1_0; }
		
		//{longType} long_type=LONG
		public Group getGroup_4() { return cGroup_4; }
		
		//{longType}
		public Action getLongTypeAction_4_0() { return cLongTypeAction_4_0; }
		
		//long_type=LONG
		public Assignment getLong_typeAssignment_4_1() { return cLong_typeAssignment_4_1; }
		
		//LONG
		public RuleCall getLong_typeLONGParserRuleCall_4_1_0() { return cLong_typeLONGParserRuleCall_4_1_0; }
		
		//{floatType} float_type=FLOAT
		public Group getGroup_5() { return cGroup_5; }
		
		//{floatType}
		public Action getFloatTypeAction_5_0() { return cFloatTypeAction_5_0; }
		
		//float_type=FLOAT
		public Assignment getFloat_typeAssignment_5_1() { return cFloat_typeAssignment_5_1; }
		
		//FLOAT
		public RuleCall getFloat_typeFLOATParserRuleCall_5_1_0() { return cFloat_typeFLOATParserRuleCall_5_1_0; }
		
		//{doubleType} double_type=DOUBLE
		public Group getGroup_6() { return cGroup_6; }
		
		//{doubleType}
		public Action getDoubleTypeAction_6_0() { return cDoubleTypeAction_6_0; }
		
		//double_type=DOUBLE
		public Assignment getDouble_typeAssignment_6_1() { return cDouble_typeAssignment_6_1; }
		
		//DOUBLE
		public RuleCall getDouble_typeDOUBLEParserRuleCall_6_1_0() { return cDouble_typeDOUBLEParserRuleCall_6_1_0; }
		
		//{signedType} signed_type=SIGNED
		public Group getGroup_7() { return cGroup_7; }
		
		//{signedType}
		public Action getSignedTypeAction_7_0() { return cSignedTypeAction_7_0; }
		
		//signed_type=SIGNED
		public Assignment getSigned_typeAssignment_7_1() { return cSigned_typeAssignment_7_1; }
		
		//SIGNED
		public RuleCall getSigned_typeSIGNEDParserRuleCall_7_1_0() { return cSigned_typeSIGNEDParserRuleCall_7_1_0; }
		
		//{unsignedType} unsigned_type=UNSIGNED
		public Group getGroup_8() { return cGroup_8; }
		
		//{unsignedType}
		public Action getUnsignedTypeAction_8_0() { return cUnsignedTypeAction_8_0; }
		
		//unsigned_type=UNSIGNED
		public Assignment getUnsigned_typeAssignment_8_1() { return cUnsigned_typeAssignment_8_1; }
		
		//UNSIGNED
		public RuleCall getUnsigned_typeUNSIGNEDParserRuleCall_8_1_0() { return cUnsigned_typeUNSIGNEDParserRuleCall_8_1_0; }
		
		//{booleanType} bool_type=BOOL
		public Group getGroup_9() { return cGroup_9; }
		
		//{booleanType}
		public Action getBooleanTypeAction_9_0() { return cBooleanTypeAction_9_0; }
		
		//bool_type=BOOL
		public Assignment getBool_typeAssignment_9_1() { return cBool_typeAssignment_9_1; }
		
		//BOOL
		public RuleCall getBool_typeBOOLParserRuleCall_9_1_0() { return cBool_typeBOOLParserRuleCall_9_1_0; }
		
		//{complexType} complex_type=COMPLEX
		public Group getGroup_10() { return cGroup_10; }
		
		//{complexType}
		public Action getComplexTypeAction_10_0() { return cComplexTypeAction_10_0; }
		
		//complex_type=COMPLEX
		public Assignment getComplex_typeAssignment_10_1() { return cComplex_typeAssignment_10_1; }
		
		//COMPLEX
		public RuleCall getComplex_typeCOMPLEXParserRuleCall_10_1_0() { return cComplex_typeCOMPLEXParserRuleCall_10_1_0; }
		
		//{imaginaryType} imaginary_type=IMAGINARY
		public Group getGroup_11() { return cGroup_11; }
		
		//{imaginaryType}
		public Action getImaginaryTypeAction_11_0() { return cImaginaryTypeAction_11_0; }
		
		//imaginary_type=IMAGINARY
		public Assignment getImaginary_typeAssignment_11_1() { return cImaginary_typeAssignment_11_1; }
		
		//IMAGINARY
		public RuleCall getImaginary_typeIMAGINARYParserRuleCall_11_1_0() { return cImaginary_typeIMAGINARYParserRuleCall_11_1_0; }
		
		//atomic_type_specifier=atomic_type_specifier
		public Assignment getAtomic_type_specifierAssignment_12() { return cAtomic_type_specifierAssignment_12; }
		
		//atomic_type_specifier
		public RuleCall getAtomic_type_specifierAtomic_type_specifierParserRuleCall_12_0() { return cAtomic_type_specifierAtomic_type_specifierParserRuleCall_12_0; }
		
		//struct_or_union_specifier=struct_or_union_specifier
		public Assignment getStruct_or_union_specifierAssignment_13() { return cStruct_or_union_specifierAssignment_13; }
		
		//struct_or_union_specifier
		public RuleCall getStruct_or_union_specifierStruct_or_union_specifierParserRuleCall_13_0() { return cStruct_or_union_specifierStruct_or_union_specifierParserRuleCall_13_0; }
		
		//enum_specifier=enum_specifier
		public Assignment getEnum_specifierAssignment_14() { return cEnum_specifierAssignment_14; }
		
		//enum_specifier
		public RuleCall getEnum_specifierEnum_specifierParserRuleCall_14_0() { return cEnum_specifierEnum_specifierParserRuleCall_14_0; }
		
		//typedef_name=TYPEDEF
		public Assignment getTypedef_nameAssignment_15() { return cTypedef_nameAssignment_15; }
		
		//TYPEDEF
		public RuleCall getTypedef_nameTYPEDEFParserRuleCall_15_0() { return cTypedef_nameTYPEDEFParserRuleCall_15_0; }
	}
	public class Struct_or_union_specifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.struct_or_union_specifier");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cStruct_or_unionAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cStruct_or_unionStruct_or_unionParserRuleCall_0_0_0 = (RuleCall)cStruct_or_unionAssignment_0_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cStruct_declaration_listAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cStruct_declaration_listStruct_declaration_listParserRuleCall_0_2_0 = (RuleCall)cStruct_declaration_listAssignment_0_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cStruct_or_unionAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cStruct_or_unionStruct_or_unionParserRuleCall_1_0_0 = (RuleCall)cStruct_or_unionAssignment_1_0.eContents().get(0);
		private final Assignment cIdentifierAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cIdentifierIDTerminalRuleCall_1_1_0 = (RuleCall)cIdentifierAssignment_1_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cStruct_declaration_listAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cStruct_declaration_listStruct_declaration_listParserRuleCall_1_3_0 = (RuleCall)cStruct_declaration_listAssignment_1_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final RuleCall cStruct_or_unionParserRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Assignment cIdentifierAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cIdentifierIDTerminalRuleCall_2_1_0 = (RuleCall)cIdentifierAssignment_2_1.eContents().get(0);
		
		////tem como refatorar.
		// struct_or_union_specifier:
		//	struct_or_union=struct_or_union '{' struct_declaration_list=struct_declaration_list '}' |
		//	struct_or_union=struct_or_union identifier=ID '{' struct_declaration_list=struct_declaration_list '}' |
		//	struct_or_union identifier=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//struct_or_union=struct_or_union '{' struct_declaration_list=struct_declaration_list '}' |
		//struct_or_union=struct_or_union identifier=ID '{' struct_declaration_list=struct_declaration_list '}' |
		//struct_or_union identifier=ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//struct_or_union=struct_or_union '{' struct_declaration_list=struct_declaration_list '}'
		public Group getGroup_0() { return cGroup_0; }
		
		//struct_or_union=struct_or_union
		public Assignment getStruct_or_unionAssignment_0_0() { return cStruct_or_unionAssignment_0_0; }
		
		//struct_or_union
		public RuleCall getStruct_or_unionStruct_or_unionParserRuleCall_0_0_0() { return cStruct_or_unionStruct_or_unionParserRuleCall_0_0_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_0_1() { return cLeftCurlyBracketKeyword_0_1; }
		
		//struct_declaration_list=struct_declaration_list
		public Assignment getStruct_declaration_listAssignment_0_2() { return cStruct_declaration_listAssignment_0_2; }
		
		//struct_declaration_list
		public RuleCall getStruct_declaration_listStruct_declaration_listParserRuleCall_0_2_0() { return cStruct_declaration_listStruct_declaration_listParserRuleCall_0_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_0_3() { return cRightCurlyBracketKeyword_0_3; }
		
		//struct_or_union=struct_or_union identifier=ID '{' struct_declaration_list=struct_declaration_list '}'
		public Group getGroup_1() { return cGroup_1; }
		
		//struct_or_union=struct_or_union
		public Assignment getStruct_or_unionAssignment_1_0() { return cStruct_or_unionAssignment_1_0; }
		
		//struct_or_union
		public RuleCall getStruct_or_unionStruct_or_unionParserRuleCall_1_0_0() { return cStruct_or_unionStruct_or_unionParserRuleCall_1_0_0; }
		
		//identifier=ID
		public Assignment getIdentifierAssignment_1_1() { return cIdentifierAssignment_1_1; }
		
		//ID
		public RuleCall getIdentifierIDTerminalRuleCall_1_1_0() { return cIdentifierIDTerminalRuleCall_1_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1_2() { return cLeftCurlyBracketKeyword_1_2; }
		
		//struct_declaration_list=struct_declaration_list
		public Assignment getStruct_declaration_listAssignment_1_3() { return cStruct_declaration_listAssignment_1_3; }
		
		//struct_declaration_list
		public RuleCall getStruct_declaration_listStruct_declaration_listParserRuleCall_1_3_0() { return cStruct_declaration_listStruct_declaration_listParserRuleCall_1_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_1_4() { return cRightCurlyBracketKeyword_1_4; }
		
		//struct_or_union identifier=ID
		public Group getGroup_2() { return cGroup_2; }
		
		//struct_or_union
		public RuleCall getStruct_or_unionParserRuleCall_2_0() { return cStruct_or_unionParserRuleCall_2_0; }
		
		//identifier=ID
		public Assignment getIdentifierAssignment_2_1() { return cIdentifierAssignment_2_1; }
		
		//ID
		public RuleCall getIdentifierIDTerminalRuleCall_2_1_0() { return cIdentifierIDTerminalRuleCall_2_1_0; }
	}
	public class Struct_or_unionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.struct_or_union");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cStructAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cStructSTRUCTParserRuleCall_0_0 = (RuleCall)cStructAssignment_0.eContents().get(0);
		private final Assignment cUnionAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cUnionUNIONParserRuleCall_1_0 = (RuleCall)cUnionAssignment_1.eContents().get(0);
		
		//struct_or_union:
		//	struct=STRUCT | union=UNION;
		@Override public ParserRule getRule() { return rule; }
		
		//struct=STRUCT | union=UNION
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//struct=STRUCT
		public Assignment getStructAssignment_0() { return cStructAssignment_0; }
		
		//STRUCT
		public RuleCall getStructSTRUCTParserRuleCall_0_0() { return cStructSTRUCTParserRuleCall_0_0; }
		
		//union=UNION
		public Assignment getUnionAssignment_1() { return cUnionAssignment_1; }
		
		//UNION
		public RuleCall getUnionUNIONParserRuleCall_1_0() { return cUnionUNIONParserRuleCall_1_0; }
	}
	public class Struct_declaration_listElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.struct_declaration_list");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cStruct_declarationAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cStruct_declarationStruct_declarationParserRuleCall_0_0 = (RuleCall)cStruct_declarationAssignment_0.eContents().get(0);
		private final Assignment cStruct_declaration_list2Assignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cStruct_declaration_list2Struct_declaration_list2ParserRuleCall_1_0 = (RuleCall)cStruct_declaration_list2Assignment_1.eContents().get(0);
		
		//struct_declaration_list:
		//	struct_declaration=struct_declaration struct_declaration_list2=struct_declaration_list2;
		@Override public ParserRule getRule() { return rule; }
		
		//struct_declaration=struct_declaration struct_declaration_list2=struct_declaration_list2
		public Group getGroup() { return cGroup; }
		
		//struct_declaration=struct_declaration
		public Assignment getStruct_declarationAssignment_0() { return cStruct_declarationAssignment_0; }
		
		//struct_declaration
		public RuleCall getStruct_declarationStruct_declarationParserRuleCall_0_0() { return cStruct_declarationStruct_declarationParserRuleCall_0_0; }
		
		//struct_declaration_list2=struct_declaration_list2
		public Assignment getStruct_declaration_list2Assignment_1() { return cStruct_declaration_list2Assignment_1; }
		
		//struct_declaration_list2
		public RuleCall getStruct_declaration_list2Struct_declaration_list2ParserRuleCall_1_0() { return cStruct_declaration_list2Struct_declaration_list2ParserRuleCall_1_0; }
	}
	public class Struct_declaration_list2Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.struct_declaration_list2");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cStruct_declarationAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cStruct_declarationStruct_declarationParserRuleCall_0_0 = (RuleCall)cStruct_declarationAssignment_0.eContents().get(0);
		private final Assignment cStruct_declaration_list2Assignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cStruct_declaration_list2Struct_declaration_list2ParserRuleCall_1_0 = (RuleCall)cStruct_declaration_list2Assignment_1.eContents().get(0);
		
		//struct_declaration_list2:
		//	(struct_declaration=struct_declaration struct_declaration_list2=struct_declaration_list2)?;
		@Override public ParserRule getRule() { return rule; }
		
		//(struct_declaration=struct_declaration struct_declaration_list2=struct_declaration_list2)?
		public Group getGroup() { return cGroup; }
		
		//struct_declaration=struct_declaration
		public Assignment getStruct_declarationAssignment_0() { return cStruct_declarationAssignment_0; }
		
		//struct_declaration
		public RuleCall getStruct_declarationStruct_declarationParserRuleCall_0_0() { return cStruct_declarationStruct_declarationParserRuleCall_0_0; }
		
		//struct_declaration_list2=struct_declaration_list2
		public Assignment getStruct_declaration_list2Assignment_1() { return cStruct_declaration_list2Assignment_1; }
		
		//struct_declaration_list2
		public RuleCall getStruct_declaration_list2Struct_declaration_list2ParserRuleCall_1_0() { return cStruct_declaration_list2Struct_declaration_list2ParserRuleCall_1_0; }
	}
	public class Struct_declarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.struct_declaration");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cSpecifier_qualifier_listAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cSpecifier_qualifier_listSpecifier_qualifier_listParserRuleCall_0_0_0 = (RuleCall)cSpecifier_qualifier_listAssignment_0_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cSpecifier_qualifier_listAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cSpecifier_qualifier_listSpecifier_qualifier_listParserRuleCall_1_0_0 = (RuleCall)cSpecifier_qualifier_listAssignment_1_0.eContents().get(0);
		private final Assignment cStruct_declarator_listAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cStruct_declarator_listStruct_declarator_listParserRuleCall_1_1_0 = (RuleCall)cStruct_declarator_listAssignment_1_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cStatic_assert_declarationAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cStatic_assert_declarationStatic_assert_declarationParserRuleCall_2_0 = (RuleCall)cStatic_assert_declarationAssignment_2.eContents().get(0);
		
		//struct_declaration:
		//	specifier_qualifier_list=specifier_qualifier_list ';' / * for anonymous struct/union * / |
		//	specifier_qualifier_list=specifier_qualifier_list struct_declarator_list=struct_declarator_list ';' |
		//	static_assert_declaration=static_assert_declaration;
		@Override public ParserRule getRule() { return rule; }
		
		//specifier_qualifier_list=specifier_qualifier_list ';' / * for anonymous struct/union * / |
		//specifier_qualifier_list=specifier_qualifier_list struct_declarator_list=struct_declarator_list ';' |
		//static_assert_declaration=static_assert_declaration
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//specifier_qualifier_list=specifier_qualifier_list ';'
		public Group getGroup_0() { return cGroup_0; }
		
		//specifier_qualifier_list=specifier_qualifier_list
		public Assignment getSpecifier_qualifier_listAssignment_0_0() { return cSpecifier_qualifier_listAssignment_0_0; }
		
		//specifier_qualifier_list
		public RuleCall getSpecifier_qualifier_listSpecifier_qualifier_listParserRuleCall_0_0_0() { return cSpecifier_qualifier_listSpecifier_qualifier_listParserRuleCall_0_0_0; }
		
		//';'
		public Keyword getSemicolonKeyword_0_1() { return cSemicolonKeyword_0_1; }
		
		//specifier_qualifier_list=specifier_qualifier_list struct_declarator_list=struct_declarator_list ';'
		public Group getGroup_1() { return cGroup_1; }
		
		//specifier_qualifier_list=specifier_qualifier_list
		public Assignment getSpecifier_qualifier_listAssignment_1_0() { return cSpecifier_qualifier_listAssignment_1_0; }
		
		//specifier_qualifier_list
		public RuleCall getSpecifier_qualifier_listSpecifier_qualifier_listParserRuleCall_1_0_0() { return cSpecifier_qualifier_listSpecifier_qualifier_listParserRuleCall_1_0_0; }
		
		//struct_declarator_list=struct_declarator_list
		public Assignment getStruct_declarator_listAssignment_1_1() { return cStruct_declarator_listAssignment_1_1; }
		
		//struct_declarator_list
		public RuleCall getStruct_declarator_listStruct_declarator_listParserRuleCall_1_1_0() { return cStruct_declarator_listStruct_declarator_listParserRuleCall_1_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_1_2() { return cSemicolonKeyword_1_2; }
		
		//static_assert_declaration=static_assert_declaration
		public Assignment getStatic_assert_declarationAssignment_2() { return cStatic_assert_declarationAssignment_2; }
		
		//static_assert_declaration
		public RuleCall getStatic_assert_declarationStatic_assert_declarationParserRuleCall_2_0() { return cStatic_assert_declarationStatic_assert_declarationParserRuleCall_2_0; }
	}
	public class Specifier_qualifier_listElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.specifier_qualifier_list");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cType_specifierAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cType_specifierType_specifierParserRuleCall_0_0_0 = (RuleCall)cType_specifierAssignment_0_0.eContents().get(0);
		private final Assignment cSpecifier_qualifier_listAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cSpecifier_qualifier_listSpecifier_qualifier_listParserRuleCall_0_1_0 = (RuleCall)cSpecifier_qualifier_listAssignment_0_1.eContents().get(0);
		private final Assignment cType_specifierAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cType_specifierType_specifierParserRuleCall_1_0 = (RuleCall)cType_specifierAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Assignment cType_qualifierAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cType_qualifierType_specifierParserRuleCall_2_0_0 = (RuleCall)cType_qualifierAssignment_2_0.eContents().get(0);
		private final Assignment cSpecifier_qualifier_listAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cSpecifier_qualifier_listSpecifier_qualifier_listParserRuleCall_2_1_0 = (RuleCall)cSpecifier_qualifier_listAssignment_2_1.eContents().get(0);
		private final Assignment cType_qualifierAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cType_qualifierType_specifierParserRuleCall_3_0 = (RuleCall)cType_qualifierAssignment_3.eContents().get(0);
		
		//specifier_qualifier_list:
		//	type_specifier=type_specifier specifier_qualifier_list=specifier_qualifier_list | type_specifier=type_specifier |
		//	type_qualifier=type_specifier specifier_qualifier_list=specifier_qualifier_list | type_qualifier=type_specifier;
		@Override public ParserRule getRule() { return rule; }
		
		//type_specifier=type_specifier specifier_qualifier_list=specifier_qualifier_list | type_specifier=type_specifier |
		//type_qualifier=type_specifier specifier_qualifier_list=specifier_qualifier_list | type_qualifier=type_specifier
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//type_specifier=type_specifier specifier_qualifier_list=specifier_qualifier_list
		public Group getGroup_0() { return cGroup_0; }
		
		//type_specifier=type_specifier
		public Assignment getType_specifierAssignment_0_0() { return cType_specifierAssignment_0_0; }
		
		//type_specifier
		public RuleCall getType_specifierType_specifierParserRuleCall_0_0_0() { return cType_specifierType_specifierParserRuleCall_0_0_0; }
		
		//specifier_qualifier_list=specifier_qualifier_list
		public Assignment getSpecifier_qualifier_listAssignment_0_1() { return cSpecifier_qualifier_listAssignment_0_1; }
		
		//specifier_qualifier_list
		public RuleCall getSpecifier_qualifier_listSpecifier_qualifier_listParserRuleCall_0_1_0() { return cSpecifier_qualifier_listSpecifier_qualifier_listParserRuleCall_0_1_0; }
		
		//type_specifier=type_specifier
		public Assignment getType_specifierAssignment_1() { return cType_specifierAssignment_1; }
		
		//type_specifier
		public RuleCall getType_specifierType_specifierParserRuleCall_1_0() { return cType_specifierType_specifierParserRuleCall_1_0; }
		
		//type_qualifier=type_specifier specifier_qualifier_list=specifier_qualifier_list
		public Group getGroup_2() { return cGroup_2; }
		
		//type_qualifier=type_specifier
		public Assignment getType_qualifierAssignment_2_0() { return cType_qualifierAssignment_2_0; }
		
		//type_specifier
		public RuleCall getType_qualifierType_specifierParserRuleCall_2_0_0() { return cType_qualifierType_specifierParserRuleCall_2_0_0; }
		
		//specifier_qualifier_list=specifier_qualifier_list
		public Assignment getSpecifier_qualifier_listAssignment_2_1() { return cSpecifier_qualifier_listAssignment_2_1; }
		
		//specifier_qualifier_list
		public RuleCall getSpecifier_qualifier_listSpecifier_qualifier_listParserRuleCall_2_1_0() { return cSpecifier_qualifier_listSpecifier_qualifier_listParserRuleCall_2_1_0; }
		
		//type_qualifier=type_specifier
		public Assignment getType_qualifierAssignment_3() { return cType_qualifierAssignment_3; }
		
		//type_specifier
		public RuleCall getType_qualifierType_specifierParserRuleCall_3_0() { return cType_qualifierType_specifierParserRuleCall_3_0; }
	}
	public class Struct_declarator_listElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.struct_declarator_list");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cStruct_declaratorAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cStruct_declaratorStruct_declaratorParserRuleCall_0_0 = (RuleCall)cStruct_declaratorAssignment_0.eContents().get(0);
		private final Assignment cStruct_declarator_list2Assignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cStruct_declarator_list2Struct_declarator_list2ParserRuleCall_1_0 = (RuleCall)cStruct_declarator_list2Assignment_1.eContents().get(0);
		
		//struct_declarator_list:
		//	struct_declarator=struct_declarator struct_declarator_list2=struct_declarator_list2;
		@Override public ParserRule getRule() { return rule; }
		
		//struct_declarator=struct_declarator struct_declarator_list2=struct_declarator_list2
		public Group getGroup() { return cGroup; }
		
		//struct_declarator=struct_declarator
		public Assignment getStruct_declaratorAssignment_0() { return cStruct_declaratorAssignment_0; }
		
		//struct_declarator
		public RuleCall getStruct_declaratorStruct_declaratorParserRuleCall_0_0() { return cStruct_declaratorStruct_declaratorParserRuleCall_0_0; }
		
		//struct_declarator_list2=struct_declarator_list2
		public Assignment getStruct_declarator_list2Assignment_1() { return cStruct_declarator_list2Assignment_1; }
		
		//struct_declarator_list2
		public RuleCall getStruct_declarator_list2Struct_declarator_list2ParserRuleCall_1_0() { return cStruct_declarator_list2Struct_declarator_list2ParserRuleCall_1_0; }
	}
	public class Struct_declarator_list2Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.struct_declarator_list2");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStruct_declarator_list2Action_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cStruct_declaratorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cStruct_declaratorStruct_declaratorParserRuleCall_1_1_0 = (RuleCall)cStruct_declaratorAssignment_1_1.eContents().get(0);
		private final Assignment cStruct_declarator_list2Assignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cStruct_declarator_list2Struct_declarator_list2ParserRuleCall_1_2_0 = (RuleCall)cStruct_declarator_list2Assignment_1_2.eContents().get(0);
		
		//struct_declarator_list2:
		//	{struct_declarator_list2} (',' struct_declarator=struct_declarator struct_declarator_list2=struct_declarator_list2)?;
		@Override public ParserRule getRule() { return rule; }
		
		//{struct_declarator_list2} (',' struct_declarator=struct_declarator struct_declarator_list2=struct_declarator_list2)?
		public Group getGroup() { return cGroup; }
		
		//{struct_declarator_list2}
		public Action getStruct_declarator_list2Action_0() { return cStruct_declarator_list2Action_0; }
		
		//(',' struct_declarator=struct_declarator struct_declarator_list2=struct_declarator_list2)?
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//struct_declarator=struct_declarator
		public Assignment getStruct_declaratorAssignment_1_1() { return cStruct_declaratorAssignment_1_1; }
		
		//struct_declarator
		public RuleCall getStruct_declaratorStruct_declaratorParserRuleCall_1_1_0() { return cStruct_declaratorStruct_declaratorParserRuleCall_1_1_0; }
		
		//struct_declarator_list2=struct_declarator_list2
		public Assignment getStruct_declarator_list2Assignment_1_2() { return cStruct_declarator_list2Assignment_1_2; }
		
		//struct_declarator_list2
		public RuleCall getStruct_declarator_list2Struct_declarator_list2ParserRuleCall_1_2_0() { return cStruct_declarator_list2Struct_declarator_list2ParserRuleCall_1_2_0; }
	}
	public class Struct_declaratorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.struct_declarator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cColonKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cConstant_expressionAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cConstant_expressionConstant_expressionParserRuleCall_0_1_0 = (RuleCall)cConstant_expressionAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cDeclaratorAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cDeclaratorDeclaratorParserRuleCall_1_0_0 = (RuleCall)cDeclaratorAssignment_1_0.eContents().get(0);
		private final Keyword cColonKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cConstant_expressionAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cConstant_expressionConstant_expressionParserRuleCall_1_2_0 = (RuleCall)cConstant_expressionAssignment_1_2.eContents().get(0);
		private final Assignment cDeclaratorAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cDeclaratorDeclaratorParserRuleCall_2_0 = (RuleCall)cDeclaratorAssignment_2.eContents().get(0);
		
		//struct_declarator:
		//	':' constant_expression=constant_expression | declarator=declarator ':' constant_expression=constant_expression |
		//	declarator=declarator;
		@Override public ParserRule getRule() { return rule; }
		
		//':' constant_expression=constant_expression | declarator=declarator ':' constant_expression=constant_expression |
		//declarator=declarator
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//':' constant_expression=constant_expression
		public Group getGroup_0() { return cGroup_0; }
		
		//':'
		public Keyword getColonKeyword_0_0() { return cColonKeyword_0_0; }
		
		//constant_expression=constant_expression
		public Assignment getConstant_expressionAssignment_0_1() { return cConstant_expressionAssignment_0_1; }
		
		//constant_expression
		public RuleCall getConstant_expressionConstant_expressionParserRuleCall_0_1_0() { return cConstant_expressionConstant_expressionParserRuleCall_0_1_0; }
		
		//declarator=declarator ':' constant_expression=constant_expression
		public Group getGroup_1() { return cGroup_1; }
		
		//declarator=declarator
		public Assignment getDeclaratorAssignment_1_0() { return cDeclaratorAssignment_1_0; }
		
		//declarator
		public RuleCall getDeclaratorDeclaratorParserRuleCall_1_0_0() { return cDeclaratorDeclaratorParserRuleCall_1_0_0; }
		
		//':'
		public Keyword getColonKeyword_1_1() { return cColonKeyword_1_1; }
		
		//constant_expression=constant_expression
		public Assignment getConstant_expressionAssignment_1_2() { return cConstant_expressionAssignment_1_2; }
		
		//constant_expression
		public RuleCall getConstant_expressionConstant_expressionParserRuleCall_1_2_0() { return cConstant_expressionConstant_expressionParserRuleCall_1_2_0; }
		
		//declarator=declarator
		public Assignment getDeclaratorAssignment_2() { return cDeclaratorAssignment_2; }
		
		//declarator
		public RuleCall getDeclaratorDeclaratorParserRuleCall_2_0() { return cDeclaratorDeclaratorParserRuleCall_2_0; }
	}
	public class Enum_specifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.enum_specifier");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cEnumtAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cEnumtENUMParserRuleCall_0_0_0 = (RuleCall)cEnumtAssignment_0_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cEnumerator_listAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cEnumerator_listEnumerator_listParserRuleCall_0_2_0 = (RuleCall)cEnumerator_listAssignment_0_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cEnumtAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cEnumtENUMParserRuleCall_1_0_0 = (RuleCall)cEnumtAssignment_1_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cEnumerator_listAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cEnumerator_listEnumerator_listParserRuleCall_1_2_0 = (RuleCall)cEnumerator_listAssignment_1_2.eContents().get(0);
		private final Keyword cCommaKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Keyword cRightCurlyBracketKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Assignment cEnumtAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cEnumtENUMParserRuleCall_2_0_0 = (RuleCall)cEnumtAssignment_2_0.eContents().get(0);
		private final Assignment cIdentifierAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cIdentifierIDTerminalRuleCall_2_1_0 = (RuleCall)cIdentifierAssignment_2_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Assignment cEnumerator_listAssignment_2_3 = (Assignment)cGroup_2.eContents().get(3);
		private final RuleCall cEnumerator_listEnumerator_listParserRuleCall_2_3_0 = (RuleCall)cEnumerator_listAssignment_2_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_4 = (Keyword)cGroup_2.eContents().get(4);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Assignment cEnumtAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cEnumtENUMParserRuleCall_3_0_0 = (RuleCall)cEnumtAssignment_3_0.eContents().get(0);
		private final Assignment cIdentifierAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cIdentifierIDTerminalRuleCall_3_1_0 = (RuleCall)cIdentifierAssignment_3_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Assignment cEnumerator_listAssignment_3_3 = (Assignment)cGroup_3.eContents().get(3);
		private final RuleCall cEnumerator_listEnumerator_listParserRuleCall_3_3_0 = (RuleCall)cEnumerator_listAssignment_3_3.eContents().get(0);
		private final Keyword cCommaKeyword_3_4 = (Keyword)cGroup_3.eContents().get(4);
		private final Keyword cRightCurlyBracketKeyword_3_5 = (Keyword)cGroup_3.eContents().get(5);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Assignment cEnumtAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cEnumtENUMParserRuleCall_4_0_0 = (RuleCall)cEnumtAssignment_4_0.eContents().get(0);
		private final Assignment cIdentifierAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cIdentifierIDTerminalRuleCall_4_1_0 = (RuleCall)cIdentifierAssignment_4_1.eContents().get(0);
		
		//enum_specifier:
		//	enumt=ENUM '{' enumerator_list=enumerator_list '}' | enumt=ENUM '{' enumerator_list=enumerator_list ',' '}' |
		//	enumt=ENUM identifier=ID '{' enumerator_list=enumerator_list '}' | enumt=ENUM identifier=ID '{'
		//	enumerator_list=enumerator_list ',' '}' | enumt=ENUM identifier=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//enumt=ENUM '{' enumerator_list=enumerator_list '}' | enumt=ENUM '{' enumerator_list=enumerator_list ',' '}' | enumt=ENUM
		//identifier=ID '{' enumerator_list=enumerator_list '}' | enumt=ENUM identifier=ID '{' enumerator_list=enumerator_list
		//',' '}' | enumt=ENUM identifier=ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//enumt=ENUM '{' enumerator_list=enumerator_list '}'
		public Group getGroup_0() { return cGroup_0; }
		
		//enumt=ENUM
		public Assignment getEnumtAssignment_0_0() { return cEnumtAssignment_0_0; }
		
		//ENUM
		public RuleCall getEnumtENUMParserRuleCall_0_0_0() { return cEnumtENUMParserRuleCall_0_0_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_0_1() { return cLeftCurlyBracketKeyword_0_1; }
		
		//enumerator_list=enumerator_list
		public Assignment getEnumerator_listAssignment_0_2() { return cEnumerator_listAssignment_0_2; }
		
		//enumerator_list
		public RuleCall getEnumerator_listEnumerator_listParserRuleCall_0_2_0() { return cEnumerator_listEnumerator_listParserRuleCall_0_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_0_3() { return cRightCurlyBracketKeyword_0_3; }
		
		//enumt=ENUM '{' enumerator_list=enumerator_list ',' '}'
		public Group getGroup_1() { return cGroup_1; }
		
		//enumt=ENUM
		public Assignment getEnumtAssignment_1_0() { return cEnumtAssignment_1_0; }
		
		//ENUM
		public RuleCall getEnumtENUMParserRuleCall_1_0_0() { return cEnumtENUMParserRuleCall_1_0_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1_1() { return cLeftCurlyBracketKeyword_1_1; }
		
		//enumerator_list=enumerator_list
		public Assignment getEnumerator_listAssignment_1_2() { return cEnumerator_listAssignment_1_2; }
		
		//enumerator_list
		public RuleCall getEnumerator_listEnumerator_listParserRuleCall_1_2_0() { return cEnumerator_listEnumerator_listParserRuleCall_1_2_0; }
		
		//','
		public Keyword getCommaKeyword_1_3() { return cCommaKeyword_1_3; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_1_4() { return cRightCurlyBracketKeyword_1_4; }
		
		//enumt=ENUM identifier=ID '{' enumerator_list=enumerator_list '}'
		public Group getGroup_2() { return cGroup_2; }
		
		//enumt=ENUM
		public Assignment getEnumtAssignment_2_0() { return cEnumtAssignment_2_0; }
		
		//ENUM
		public RuleCall getEnumtENUMParserRuleCall_2_0_0() { return cEnumtENUMParserRuleCall_2_0_0; }
		
		//identifier=ID
		public Assignment getIdentifierAssignment_2_1() { return cIdentifierAssignment_2_1; }
		
		//ID
		public RuleCall getIdentifierIDTerminalRuleCall_2_1_0() { return cIdentifierIDTerminalRuleCall_2_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2_2() { return cLeftCurlyBracketKeyword_2_2; }
		
		//enumerator_list=enumerator_list
		public Assignment getEnumerator_listAssignment_2_3() { return cEnumerator_listAssignment_2_3; }
		
		//enumerator_list
		public RuleCall getEnumerator_listEnumerator_listParserRuleCall_2_3_0() { return cEnumerator_listEnumerator_listParserRuleCall_2_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_2_4() { return cRightCurlyBracketKeyword_2_4; }
		
		//enumt=ENUM identifier=ID '{' enumerator_list=enumerator_list ',' '}'
		public Group getGroup_3() { return cGroup_3; }
		
		//enumt=ENUM
		public Assignment getEnumtAssignment_3_0() { return cEnumtAssignment_3_0; }
		
		//ENUM
		public RuleCall getEnumtENUMParserRuleCall_3_0_0() { return cEnumtENUMParserRuleCall_3_0_0; }
		
		//identifier=ID
		public Assignment getIdentifierAssignment_3_1() { return cIdentifierAssignment_3_1; }
		
		//ID
		public RuleCall getIdentifierIDTerminalRuleCall_3_1_0() { return cIdentifierIDTerminalRuleCall_3_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3_2() { return cLeftCurlyBracketKeyword_3_2; }
		
		//enumerator_list=enumerator_list
		public Assignment getEnumerator_listAssignment_3_3() { return cEnumerator_listAssignment_3_3; }
		
		//enumerator_list
		public RuleCall getEnumerator_listEnumerator_listParserRuleCall_3_3_0() { return cEnumerator_listEnumerator_listParserRuleCall_3_3_0; }
		
		//','
		public Keyword getCommaKeyword_3_4() { return cCommaKeyword_3_4; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3_5() { return cRightCurlyBracketKeyword_3_5; }
		
		//enumt=ENUM identifier=ID
		public Group getGroup_4() { return cGroup_4; }
		
		//enumt=ENUM
		public Assignment getEnumtAssignment_4_0() { return cEnumtAssignment_4_0; }
		
		//ENUM
		public RuleCall getEnumtENUMParserRuleCall_4_0_0() { return cEnumtENUMParserRuleCall_4_0_0; }
		
		//identifier=ID
		public Assignment getIdentifierAssignment_4_1() { return cIdentifierAssignment_4_1; }
		
		//ID
		public RuleCall getIdentifierIDTerminalRuleCall_4_1_0() { return cIdentifierIDTerminalRuleCall_4_1_0; }
	}
	public class Enumerator_listElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.enumerator_list");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cEnumeratorAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cEnumeratorEnumeratorParserRuleCall_0_0 = (RuleCall)cEnumeratorAssignment_0.eContents().get(0);
		private final Assignment cEnumerator_list2Assignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cEnumerator_list2Enumerator_list2ParserRuleCall_1_0 = (RuleCall)cEnumerator_list2Assignment_1.eContents().get(0);
		
		//enumerator_list:
		//	enumerator=enumerator enumerator_list2=enumerator_list2;
		@Override public ParserRule getRule() { return rule; }
		
		//enumerator=enumerator enumerator_list2=enumerator_list2
		public Group getGroup() { return cGroup; }
		
		//enumerator=enumerator
		public Assignment getEnumeratorAssignment_0() { return cEnumeratorAssignment_0; }
		
		//enumerator
		public RuleCall getEnumeratorEnumeratorParserRuleCall_0_0() { return cEnumeratorEnumeratorParserRuleCall_0_0; }
		
		//enumerator_list2=enumerator_list2
		public Assignment getEnumerator_list2Assignment_1() { return cEnumerator_list2Assignment_1; }
		
		//enumerator_list2
		public RuleCall getEnumerator_list2Enumerator_list2ParserRuleCall_1_0() { return cEnumerator_list2Enumerator_list2ParserRuleCall_1_0; }
	}
	public class Enumerator_list2Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.enumerator_list2");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCommaKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cEnumeratorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cEnumeratorEnumeratorParserRuleCall_1_0 = (RuleCall)cEnumeratorAssignment_1.eContents().get(0);
		private final Assignment cEnumerator_list2Assignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cEnumerator_list2Enumerator_list2ParserRuleCall_2_0 = (RuleCall)cEnumerator_list2Assignment_2.eContents().get(0);
		
		//enumerator_list2:
		//	(',' enumerator=enumerator enumerator_list2=enumerator_list2)?;
		@Override public ParserRule getRule() { return rule; }
		
		//(',' enumerator=enumerator enumerator_list2=enumerator_list2)?
		public Group getGroup() { return cGroup; }
		
		//','
		public Keyword getCommaKeyword_0() { return cCommaKeyword_0; }
		
		//enumerator=enumerator
		public Assignment getEnumeratorAssignment_1() { return cEnumeratorAssignment_1; }
		
		//enumerator
		public RuleCall getEnumeratorEnumeratorParserRuleCall_1_0() { return cEnumeratorEnumeratorParserRuleCall_1_0; }
		
		//enumerator_list2=enumerator_list2
		public Assignment getEnumerator_list2Assignment_2() { return cEnumerator_list2Assignment_2; }
		
		//enumerator_list2
		public RuleCall getEnumerator_list2Enumerator_list2ParserRuleCall_2_0() { return cEnumerator_list2Enumerator_list2ParserRuleCall_2_0; }
	}
	public class EnumeratorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.enumerator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cEnumeration_constantAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cEnumeration_constantEnumeration_constantParserRuleCall_0_0_0 = (RuleCall)cEnumeration_constantAssignment_0_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cConstant_expressionAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cConstant_expressionConstant_expressionParserRuleCall_0_2_0 = (RuleCall)cConstant_expressionAssignment_0_2.eContents().get(0);
		private final Assignment cEnumeration_constantAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cEnumeration_constantEnumeration_constantParserRuleCall_1_0 = (RuleCall)cEnumeration_constantAssignment_1.eContents().get(0);
		
		////OLHAR
		// enumerator / * identifiers must be flagged as ENUMERATION_CONSTANT * /:
		//	enumeration_constant=enumeration_constant '=' constant_expression=constant_expression |
		//	enumeration_constant=enumeration_constant;
		@Override public ParserRule getRule() { return rule; }
		
		//enumeration_constant=enumeration_constant '=' constant_expression=constant_expression |
		//enumeration_constant=enumeration_constant
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//enumeration_constant=enumeration_constant '=' constant_expression=constant_expression
		public Group getGroup_0() { return cGroup_0; }
		
		//enumeration_constant=enumeration_constant
		public Assignment getEnumeration_constantAssignment_0_0() { return cEnumeration_constantAssignment_0_0; }
		
		//enumeration_constant
		public RuleCall getEnumeration_constantEnumeration_constantParserRuleCall_0_0_0() { return cEnumeration_constantEnumeration_constantParserRuleCall_0_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_0_1() { return cEqualsSignKeyword_0_1; }
		
		//constant_expression=constant_expression
		public Assignment getConstant_expressionAssignment_0_2() { return cConstant_expressionAssignment_0_2; }
		
		//constant_expression
		public RuleCall getConstant_expressionConstant_expressionParserRuleCall_0_2_0() { return cConstant_expressionConstant_expressionParserRuleCall_0_2_0; }
		
		//enumeration_constant=enumeration_constant
		public Assignment getEnumeration_constantAssignment_1() { return cEnumeration_constantAssignment_1; }
		
		//enumeration_constant
		public RuleCall getEnumeration_constantEnumeration_constantParserRuleCall_1_0() { return cEnumeration_constantEnumeration_constantParserRuleCall_1_0; }
	}
	public class Atomic_type_specifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.atomic_type_specifier");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAtomicAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAtomicATOMICParserRuleCall_0_0 = (RuleCall)cAtomicAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cType_nameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cType_nameType_nameParserRuleCall_2_0 = (RuleCall)cType_nameAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//atomic_type_specifier:
		//	atomic=ATOMIC '(' type_name=type_name ')';
		@Override public ParserRule getRule() { return rule; }
		
		//atomic=ATOMIC '(' type_name=type_name ')'
		public Group getGroup() { return cGroup; }
		
		//atomic=ATOMIC
		public Assignment getAtomicAssignment_0() { return cAtomicAssignment_0; }
		
		//ATOMIC
		public RuleCall getAtomicATOMICParserRuleCall_0_0() { return cAtomicATOMICParserRuleCall_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//type_name=type_name
		public Assignment getType_nameAssignment_2() { return cType_nameAssignment_2; }
		
		//type_name
		public RuleCall getType_nameType_nameParserRuleCall_2_0() { return cType_nameType_nameParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class Type_qualifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.type_qualifier");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cConstAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cConstCONSTParserRuleCall_0_0 = (RuleCall)cConstAssignment_0.eContents().get(0);
		private final Assignment cRestrictAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cRestrictRESTRICTParserRuleCall_1_0 = (RuleCall)cRestrictAssignment_1.eContents().get(0);
		private final Assignment cVolatileAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cVolatileVOLATILEParserRuleCall_2_0 = (RuleCall)cVolatileAssignment_2.eContents().get(0);
		private final Assignment cAtomicAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cAtomicATOMICParserRuleCall_3_0 = (RuleCall)cAtomicAssignment_3.eContents().get(0);
		
		//type_qualifier:
		//	const=CONST | restrict=RESTRICT | volatile=VOLATILE | atomic=ATOMIC;
		@Override public ParserRule getRule() { return rule; }
		
		//const=CONST | restrict=RESTRICT | volatile=VOLATILE | atomic=ATOMIC
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//const=CONST
		public Assignment getConstAssignment_0() { return cConstAssignment_0; }
		
		//CONST
		public RuleCall getConstCONSTParserRuleCall_0_0() { return cConstCONSTParserRuleCall_0_0; }
		
		//restrict=RESTRICT
		public Assignment getRestrictAssignment_1() { return cRestrictAssignment_1; }
		
		//RESTRICT
		public RuleCall getRestrictRESTRICTParserRuleCall_1_0() { return cRestrictRESTRICTParserRuleCall_1_0; }
		
		//volatile=VOLATILE
		public Assignment getVolatileAssignment_2() { return cVolatileAssignment_2; }
		
		//VOLATILE
		public RuleCall getVolatileVOLATILEParserRuleCall_2_0() { return cVolatileVOLATILEParserRuleCall_2_0; }
		
		//atomic=ATOMIC
		public Assignment getAtomicAssignment_3() { return cAtomicAssignment_3; }
		
		//ATOMIC
		public RuleCall getAtomicATOMICParserRuleCall_3_0() { return cAtomicATOMICParserRuleCall_3_0; }
	}
	public class Function_specifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.function_specifier");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cInlineAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cInlineINLINEParserRuleCall_0_0 = (RuleCall)cInlineAssignment_0.eContents().get(0);
		private final Assignment cNoreturnAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cNoreturnNORETURNParserRuleCall_1_0 = (RuleCall)cNoreturnAssignment_1.eContents().get(0);
		
		//function_specifier:
		//	inline=INLINE | noreturn=NORETURN;
		@Override public ParserRule getRule() { return rule; }
		
		//inline=INLINE | noreturn=NORETURN
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//inline=INLINE
		public Assignment getInlineAssignment_0() { return cInlineAssignment_0; }
		
		//INLINE
		public RuleCall getInlineINLINEParserRuleCall_0_0() { return cInlineINLINEParserRuleCall_0_0; }
		
		//noreturn=NORETURN
		public Assignment getNoreturnAssignment_1() { return cNoreturnAssignment_1; }
		
		//NORETURN
		public RuleCall getNoreturnNORETURNParserRuleCall_1_0() { return cNoreturnNORETURNParserRuleCall_1_0; }
	}
	public class Alignment_specifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.alignment_specifier");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cAlignasAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cAlignasALIGNASParserRuleCall_0_0_0 = (RuleCall)cAlignasAssignment_0_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cType_nameAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cType_nameType_nameParserRuleCall_0_2_0 = (RuleCall)cType_nameAssignment_0_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cAlignasAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cAlignasALIGNASParserRuleCall_1_0_0 = (RuleCall)cAlignasAssignment_1_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cConstant_expressionAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cConstant_expressionConstant_expressionParserRuleCall_1_2_0 = (RuleCall)cConstant_expressionAssignment_1_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		
		//alignment_specifier:
		//	alignas=ALIGNAS '(' type_name=type_name ')' | alignas=ALIGNAS '(' constant_expression=constant_expression ')';
		@Override public ParserRule getRule() { return rule; }
		
		//alignas=ALIGNAS '(' type_name=type_name ')' | alignas=ALIGNAS '(' constant_expression=constant_expression ')'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//alignas=ALIGNAS '(' type_name=type_name ')'
		public Group getGroup_0() { return cGroup_0; }
		
		//alignas=ALIGNAS
		public Assignment getAlignasAssignment_0_0() { return cAlignasAssignment_0_0; }
		
		//ALIGNAS
		public RuleCall getAlignasALIGNASParserRuleCall_0_0_0() { return cAlignasALIGNASParserRuleCall_0_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_1() { return cLeftParenthesisKeyword_0_1; }
		
		//type_name=type_name
		public Assignment getType_nameAssignment_0_2() { return cType_nameAssignment_0_2; }
		
		//type_name
		public RuleCall getType_nameType_nameParserRuleCall_0_2_0() { return cType_nameType_nameParserRuleCall_0_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_3() { return cRightParenthesisKeyword_0_3; }
		
		//alignas=ALIGNAS '(' constant_expression=constant_expression ')'
		public Group getGroup_1() { return cGroup_1; }
		
		//alignas=ALIGNAS
		public Assignment getAlignasAssignment_1_0() { return cAlignasAssignment_1_0; }
		
		//ALIGNAS
		public RuleCall getAlignasALIGNASParserRuleCall_1_0_0() { return cAlignasALIGNASParserRuleCall_1_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_1() { return cLeftParenthesisKeyword_1_1; }
		
		//constant_expression=constant_expression
		public Assignment getConstant_expressionAssignment_1_2() { return cConstant_expressionAssignment_1_2; }
		
		//constant_expression
		public RuleCall getConstant_expressionConstant_expressionParserRuleCall_1_2_0() { return cConstant_expressionConstant_expressionParserRuleCall_1_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_3() { return cRightParenthesisKeyword_1_3; }
	}
	public class DeclaratorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.declarator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cPointerAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cPointerPointerParserRuleCall_0_0_0 = (RuleCall)cPointerAssignment_0_0.eContents().get(0);
		private final Assignment cDirect_declaratorAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cDirect_declaratorDirect_declaratorParserRuleCall_0_1_0 = (RuleCall)cDirect_declaratorAssignment_0_1.eContents().get(0);
		private final Assignment cDirect_declaratorAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cDirect_declaratorDirect_declaratorParserRuleCall_1_0 = (RuleCall)cDirect_declaratorAssignment_1.eContents().get(0);
		
		//declarator:
		//	pointer=pointer direct_declarator=direct_declarator | direct_declarator=direct_declarator;
		@Override public ParserRule getRule() { return rule; }
		
		//pointer=pointer direct_declarator=direct_declarator | direct_declarator=direct_declarator
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//pointer=pointer direct_declarator=direct_declarator
		public Group getGroup_0() { return cGroup_0; }
		
		//pointer=pointer
		public Assignment getPointerAssignment_0_0() { return cPointerAssignment_0_0; }
		
		//pointer
		public RuleCall getPointerPointerParserRuleCall_0_0_0() { return cPointerPointerParserRuleCall_0_0_0; }
		
		//direct_declarator=direct_declarator
		public Assignment getDirect_declaratorAssignment_0_1() { return cDirect_declaratorAssignment_0_1; }
		
		//direct_declarator
		public RuleCall getDirect_declaratorDirect_declaratorParserRuleCall_0_1_0() { return cDirect_declaratorDirect_declaratorParserRuleCall_0_1_0; }
		
		//direct_declarator=direct_declarator
		public Assignment getDirect_declaratorAssignment_1() { return cDirect_declaratorAssignment_1; }
		
		//direct_declarator
		public RuleCall getDirect_declaratorDirect_declaratorParserRuleCall_1_0() { return cDirect_declaratorDirect_declaratorParserRuleCall_1_0; }
	}
	public class Direct_declaratorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.direct_declarator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cNameAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0_0 = (RuleCall)cNameAssignment_0_0.eContents().get(0);
		private final Assignment cDirect_declaratorsAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cDirect_declaratorsDirect_declarator2ParserRuleCall_0_1_0 = (RuleCall)cDirect_declaratorsAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cDeclaratorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cDeclaratorDeclaratorParserRuleCall_1_1_0 = (RuleCall)cDeclaratorAssignment_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cDirect_declaratorsAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cDirect_declaratorsDirect_declarator2ParserRuleCall_1_3_0 = (RuleCall)cDirect_declaratorsAssignment_1_3.eContents().get(0);
		
		//direct_declarator:
		//	name=ID direct_declarators+=direct_declarator2* | '(' Declarator=declarator ')'
		//	direct_declarators+=direct_declarator2*;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID direct_declarators+=direct_declarator2* | '(' Declarator=declarator ')' direct_declarators+=direct_declarator2*
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//name=ID direct_declarators+=direct_declarator2*
		public Group getGroup_0() { return cGroup_0; }
		
		//name=ID
		public Assignment getNameAssignment_0_0() { return cNameAssignment_0_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0_0() { return cNameIDTerminalRuleCall_0_0_0; }
		
		//direct_declarators+=direct_declarator2*
		public Assignment getDirect_declaratorsAssignment_0_1() { return cDirect_declaratorsAssignment_0_1; }
		
		//direct_declarator2
		public RuleCall getDirect_declaratorsDirect_declarator2ParserRuleCall_0_1_0() { return cDirect_declaratorsDirect_declarator2ParserRuleCall_0_1_0; }
		
		//'(' Declarator=declarator ')' direct_declarators+=direct_declarator2*
		public Group getGroup_1() { return cGroup_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }
		
		//Declarator=declarator
		public Assignment getDeclaratorAssignment_1_1() { return cDeclaratorAssignment_1_1; }
		
		//declarator
		public RuleCall getDeclaratorDeclaratorParserRuleCall_1_1_0() { return cDeclaratorDeclaratorParserRuleCall_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }
		
		//direct_declarators+=direct_declarator2*
		public Assignment getDirect_declaratorsAssignment_1_3() { return cDirect_declaratorsAssignment_1_3; }
		
		//direct_declarator2
		public RuleCall getDirect_declaratorsDirect_declarator2ParserRuleCall_1_3_0() { return cDirect_declaratorsDirect_declarator2ParserRuleCall_1_3_0; }
	}
	public class Direct_declarator2Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.direct_declarator2");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cAsteriskKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cLeftSquareBracketKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cStaticAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cStaticSTATICParserRuleCall_2_1_0 = (RuleCall)cStaticAssignment_2_1.eContents().get(0);
		private final Assignment cType_qualifier_listAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cType_qualifier_listType_qualifier_listParserRuleCall_2_2_0 = (RuleCall)cType_qualifier_listAssignment_2_2.eContents().get(0);
		private final Assignment cAssignment_expressionAssignment_2_3 = (Assignment)cGroup_2.eContents().get(3);
		private final RuleCall cAssignment_expressionAssignment_expressionParserRuleCall_2_3_0 = (RuleCall)cAssignment_expressionAssignment_2_3.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2_4 = (Keyword)cGroup_2.eContents().get(4);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Keyword cLeftSquareBracketKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cStaticAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cStaticSTATICParserRuleCall_3_1_0 = (RuleCall)cStaticAssignment_3_1.eContents().get(0);
		private final Assignment cAssignment_expressionAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cAssignment_expressionAssignment_expressionParserRuleCall_3_2_0 = (RuleCall)cAssignment_expressionAssignment_3_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Keyword cLeftSquareBracketKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cType_qualifier_listAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cType_qualifier_listType_qualifier_listParserRuleCall_4_1_0 = (RuleCall)cType_qualifier_listAssignment_4_1.eContents().get(0);
		private final Keyword cAsteriskKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		private final Keyword cRightSquareBracketKeyword_4_3 = (Keyword)cGroup_4.eContents().get(3);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Keyword cLeftSquareBracketKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cType_qualifier_listAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cType_qualifier_listType_qualifier_listParserRuleCall_5_1_0 = (RuleCall)cType_qualifier_listAssignment_5_1.eContents().get(0);
		private final Assignment cStaticAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cStaticSTATICParserRuleCall_5_2_0 = (RuleCall)cStaticAssignment_5_2.eContents().get(0);
		private final Assignment cAssignment_expressionAssignment_5_3 = (Assignment)cGroup_5.eContents().get(3);
		private final RuleCall cAssignment_expressionAssignment_expressionParserRuleCall_5_3_0 = (RuleCall)cAssignment_expressionAssignment_5_3.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_5_4 = (Keyword)cGroup_5.eContents().get(4);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final Keyword cLeftSquareBracketKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cType_qualifier_listAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cType_qualifier_listType_qualifier_listParserRuleCall_6_1_0 = (RuleCall)cType_qualifier_listAssignment_6_1.eContents().get(0);
		private final Assignment cAssignment_expressionAssignment_6_2 = (Assignment)cGroup_6.eContents().get(2);
		private final RuleCall cAssignment_expressionAssignment_expressionParserRuleCall_6_2_0 = (RuleCall)cAssignment_expressionAssignment_6_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_6_3 = (Keyword)cGroup_6.eContents().get(3);
		private final Group cGroup_7 = (Group)cAlternatives.eContents().get(7);
		private final Keyword cLeftSquareBracketKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cType_qualifier_listAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cType_qualifier_listType_qualifier_listParserRuleCall_7_1_0 = (RuleCall)cType_qualifier_listAssignment_7_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_7_2 = (Keyword)cGroup_7.eContents().get(2);
		private final Group cGroup_8 = (Group)cAlternatives.eContents().get(8);
		private final Keyword cLeftSquareBracketKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Assignment cAssignment_expressionAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final RuleCall cAssignment_expressionAssignment_expressionParserRuleCall_8_1_0 = (RuleCall)cAssignment_expressionAssignment_8_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_8_2 = (Keyword)cGroup_8.eContents().get(2);
		private final Group cGroup_9 = (Group)cAlternatives.eContents().get(9);
		private final Keyword cLeftParenthesisKeyword_9_0 = (Keyword)cGroup_9.eContents().get(0);
		private final Assignment cParameter_type_listAssignment_9_1 = (Assignment)cGroup_9.eContents().get(1);
		private final RuleCall cParameter_type_listParameter_type_listParserRuleCall_9_1_0 = (RuleCall)cParameter_type_listAssignment_9_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_9_2 = (Keyword)cGroup_9.eContents().get(2);
		private final Group cGroup_10 = (Group)cAlternatives.eContents().get(10);
		private final Keyword cLeftParenthesisKeyword_10_0 = (Keyword)cGroup_10.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_10_1 = (Keyword)cGroup_10.eContents().get(1);
		private final Group cGroup_11 = (Group)cAlternatives.eContents().get(11);
		private final Keyword cLeftParenthesisKeyword_11_0 = (Keyword)cGroup_11.eContents().get(0);
		private final Assignment cIdentifier_listAssignment_11_1 = (Assignment)cGroup_11.eContents().get(1);
		private final RuleCall cIdentifier_listIdentifier_listParserRuleCall_11_1_0 = (RuleCall)cIdentifier_listAssignment_11_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_11_2 = (Keyword)cGroup_11.eContents().get(2);
		
		//direct_declarator2:
		//	'[' ']' | '[' '*' ']' | '[' static=STATIC type_qualifier_list=type_qualifier_list
		//	assignment_expression=assignment_expression ']' | '[' static=STATIC assignment_expression=assignment_expression ']' |
		//	'[' type_qualifier_list=type_qualifier_list '*' ']' | '[' type_qualifier_list=type_qualifier_list static=STATIC
		//	assignment_expression=assignment_expression ']' | '[' type_qualifier_list=type_qualifier_list
		//	assignment_expression=assignment_expression ']' | '[' type_qualifier_list=type_qualifier_list ']' | '['
		//	assignment_expression=assignment_expression ']' | '(' parameter_type_list=parameter_type_list ')' | '(' ')' | '('
		//	identifier_list=identifier_list ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'[' ']' | '[' '*' ']' | '[' static=STATIC type_qualifier_list=type_qualifier_list
		//assignment_expression=assignment_expression ']' | '[' static=STATIC assignment_expression=assignment_expression ']' |
		//'[' type_qualifier_list=type_qualifier_list '*' ']' | '[' type_qualifier_list=type_qualifier_list static=STATIC
		//assignment_expression=assignment_expression ']' | '[' type_qualifier_list=type_qualifier_list
		//assignment_expression=assignment_expression ']' | '[' type_qualifier_list=type_qualifier_list ']' | '['
		//assignment_expression=assignment_expression ']' | '(' parameter_type_list=parameter_type_list ')' | '(' ')' | '('
		//identifier_list=identifier_list ')'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'[' ']'
		public Group getGroup_0() { return cGroup_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_0_0() { return cLeftSquareBracketKeyword_0_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_0_1() { return cRightSquareBracketKeyword_0_1; }
		
		//'[' '*' ']'
		public Group getGroup_1() { return cGroup_1; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1_0() { return cLeftSquareBracketKeyword_1_0; }
		
		//'*'
		public Keyword getAsteriskKeyword_1_1() { return cAsteriskKeyword_1_1; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_1_2() { return cRightSquareBracketKeyword_1_2; }
		
		//'[' static=STATIC type_qualifier_list=type_qualifier_list assignment_expression=assignment_expression ']'
		public Group getGroup_2() { return cGroup_2; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_2_0() { return cLeftSquareBracketKeyword_2_0; }
		
		//static=STATIC
		public Assignment getStaticAssignment_2_1() { return cStaticAssignment_2_1; }
		
		//STATIC
		public RuleCall getStaticSTATICParserRuleCall_2_1_0() { return cStaticSTATICParserRuleCall_2_1_0; }
		
		//type_qualifier_list=type_qualifier_list
		public Assignment getType_qualifier_listAssignment_2_2() { return cType_qualifier_listAssignment_2_2; }
		
		//type_qualifier_list
		public RuleCall getType_qualifier_listType_qualifier_listParserRuleCall_2_2_0() { return cType_qualifier_listType_qualifier_listParserRuleCall_2_2_0; }
		
		//assignment_expression=assignment_expression
		public Assignment getAssignment_expressionAssignment_2_3() { return cAssignment_expressionAssignment_2_3; }
		
		//assignment_expression
		public RuleCall getAssignment_expressionAssignment_expressionParserRuleCall_2_3_0() { return cAssignment_expressionAssignment_expressionParserRuleCall_2_3_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_2_4() { return cRightSquareBracketKeyword_2_4; }
		
		//'[' static=STATIC assignment_expression=assignment_expression ']'
		public Group getGroup_3() { return cGroup_3; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_3_0() { return cLeftSquareBracketKeyword_3_0; }
		
		//static=STATIC
		public Assignment getStaticAssignment_3_1() { return cStaticAssignment_3_1; }
		
		//STATIC
		public RuleCall getStaticSTATICParserRuleCall_3_1_0() { return cStaticSTATICParserRuleCall_3_1_0; }
		
		//assignment_expression=assignment_expression
		public Assignment getAssignment_expressionAssignment_3_2() { return cAssignment_expressionAssignment_3_2; }
		
		//assignment_expression
		public RuleCall getAssignment_expressionAssignment_expressionParserRuleCall_3_2_0() { return cAssignment_expressionAssignment_expressionParserRuleCall_3_2_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_3_3() { return cRightSquareBracketKeyword_3_3; }
		
		//'[' type_qualifier_list=type_qualifier_list '*' ']'
		public Group getGroup_4() { return cGroup_4; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_4_0() { return cLeftSquareBracketKeyword_4_0; }
		
		//type_qualifier_list=type_qualifier_list
		public Assignment getType_qualifier_listAssignment_4_1() { return cType_qualifier_listAssignment_4_1; }
		
		//type_qualifier_list
		public RuleCall getType_qualifier_listType_qualifier_listParserRuleCall_4_1_0() { return cType_qualifier_listType_qualifier_listParserRuleCall_4_1_0; }
		
		//'*'
		public Keyword getAsteriskKeyword_4_2() { return cAsteriskKeyword_4_2; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_4_3() { return cRightSquareBracketKeyword_4_3; }
		
		//'[' type_qualifier_list=type_qualifier_list static=STATIC assignment_expression=assignment_expression ']'
		public Group getGroup_5() { return cGroup_5; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_5_0() { return cLeftSquareBracketKeyword_5_0; }
		
		//type_qualifier_list=type_qualifier_list
		public Assignment getType_qualifier_listAssignment_5_1() { return cType_qualifier_listAssignment_5_1; }
		
		//type_qualifier_list
		public RuleCall getType_qualifier_listType_qualifier_listParserRuleCall_5_1_0() { return cType_qualifier_listType_qualifier_listParserRuleCall_5_1_0; }
		
		//static=STATIC
		public Assignment getStaticAssignment_5_2() { return cStaticAssignment_5_2; }
		
		//STATIC
		public RuleCall getStaticSTATICParserRuleCall_5_2_0() { return cStaticSTATICParserRuleCall_5_2_0; }
		
		//assignment_expression=assignment_expression
		public Assignment getAssignment_expressionAssignment_5_3() { return cAssignment_expressionAssignment_5_3; }
		
		//assignment_expression
		public RuleCall getAssignment_expressionAssignment_expressionParserRuleCall_5_3_0() { return cAssignment_expressionAssignment_expressionParserRuleCall_5_3_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_5_4() { return cRightSquareBracketKeyword_5_4; }
		
		//'[' type_qualifier_list=type_qualifier_list assignment_expression=assignment_expression ']'
		public Group getGroup_6() { return cGroup_6; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_6_0() { return cLeftSquareBracketKeyword_6_0; }
		
		//type_qualifier_list=type_qualifier_list
		public Assignment getType_qualifier_listAssignment_6_1() { return cType_qualifier_listAssignment_6_1; }
		
		//type_qualifier_list
		public RuleCall getType_qualifier_listType_qualifier_listParserRuleCall_6_1_0() { return cType_qualifier_listType_qualifier_listParserRuleCall_6_1_0; }
		
		//assignment_expression=assignment_expression
		public Assignment getAssignment_expressionAssignment_6_2() { return cAssignment_expressionAssignment_6_2; }
		
		//assignment_expression
		public RuleCall getAssignment_expressionAssignment_expressionParserRuleCall_6_2_0() { return cAssignment_expressionAssignment_expressionParserRuleCall_6_2_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_6_3() { return cRightSquareBracketKeyword_6_3; }
		
		//'[' type_qualifier_list=type_qualifier_list ']'
		public Group getGroup_7() { return cGroup_7; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_7_0() { return cLeftSquareBracketKeyword_7_0; }
		
		//type_qualifier_list=type_qualifier_list
		public Assignment getType_qualifier_listAssignment_7_1() { return cType_qualifier_listAssignment_7_1; }
		
		//type_qualifier_list
		public RuleCall getType_qualifier_listType_qualifier_listParserRuleCall_7_1_0() { return cType_qualifier_listType_qualifier_listParserRuleCall_7_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_7_2() { return cRightSquareBracketKeyword_7_2; }
		
		//'[' assignment_expression=assignment_expression ']'
		public Group getGroup_8() { return cGroup_8; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_8_0() { return cLeftSquareBracketKeyword_8_0; }
		
		//assignment_expression=assignment_expression
		public Assignment getAssignment_expressionAssignment_8_1() { return cAssignment_expressionAssignment_8_1; }
		
		//assignment_expression
		public RuleCall getAssignment_expressionAssignment_expressionParserRuleCall_8_1_0() { return cAssignment_expressionAssignment_expressionParserRuleCall_8_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_8_2() { return cRightSquareBracketKeyword_8_2; }
		
		//'(' parameter_type_list=parameter_type_list ')'
		public Group getGroup_9() { return cGroup_9; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_9_0() { return cLeftParenthesisKeyword_9_0; }
		
		//parameter_type_list=parameter_type_list
		public Assignment getParameter_type_listAssignment_9_1() { return cParameter_type_listAssignment_9_1; }
		
		//parameter_type_list
		public RuleCall getParameter_type_listParameter_type_listParserRuleCall_9_1_0() { return cParameter_type_listParameter_type_listParserRuleCall_9_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_9_2() { return cRightParenthesisKeyword_9_2; }
		
		//'(' ')'
		public Group getGroup_10() { return cGroup_10; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_10_0() { return cLeftParenthesisKeyword_10_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_10_1() { return cRightParenthesisKeyword_10_1; }
		
		//'(' identifier_list=identifier_list ')'
		public Group getGroup_11() { return cGroup_11; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_11_0() { return cLeftParenthesisKeyword_11_0; }
		
		//identifier_list=identifier_list
		public Assignment getIdentifier_listAssignment_11_1() { return cIdentifier_listAssignment_11_1; }
		
		//identifier_list
		public RuleCall getIdentifier_listIdentifier_listParserRuleCall_11_1_0() { return cIdentifier_listIdentifier_listParserRuleCall_11_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_11_2() { return cRightParenthesisKeyword_11_2; }
	}
	public class PointerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.pointer");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cAsteriskKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cType_qualifier_listAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cType_qualifier_listType_qualifier_listParserRuleCall_0_1_0 = (RuleCall)cType_qualifier_listAssignment_0_1.eContents().get(0);
		private final Assignment cPointerAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cPointerPointerParserRuleCall_0_2_0 = (RuleCall)cPointerAssignment_0_2.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cAsteriskKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cType_qualifier_listAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cType_qualifier_listType_qualifier_listParserRuleCall_1_1_0 = (RuleCall)cType_qualifier_listAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cAsteriskKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cPointerAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cPointerPointerParserRuleCall_2_1_0 = (RuleCall)cPointerAssignment_2_1.eContents().get(0);
		private final Keyword cAsteriskKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		
		//pointer:
		//	'*' type_qualifier_list=type_qualifier_list pointer=pointer | '*' type_qualifier_list=type_qualifier_list | '*'
		//	pointer=pointer | '*';
		@Override public ParserRule getRule() { return rule; }
		
		//'*' type_qualifier_list=type_qualifier_list pointer=pointer | '*' type_qualifier_list=type_qualifier_list | '*'
		//pointer=pointer | '*'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'*' type_qualifier_list=type_qualifier_list pointer=pointer
		public Group getGroup_0() { return cGroup_0; }
		
		//'*'
		public Keyword getAsteriskKeyword_0_0() { return cAsteriskKeyword_0_0; }
		
		//type_qualifier_list=type_qualifier_list
		public Assignment getType_qualifier_listAssignment_0_1() { return cType_qualifier_listAssignment_0_1; }
		
		//type_qualifier_list
		public RuleCall getType_qualifier_listType_qualifier_listParserRuleCall_0_1_0() { return cType_qualifier_listType_qualifier_listParserRuleCall_0_1_0; }
		
		//pointer=pointer
		public Assignment getPointerAssignment_0_2() { return cPointerAssignment_0_2; }
		
		//pointer
		public RuleCall getPointerPointerParserRuleCall_0_2_0() { return cPointerPointerParserRuleCall_0_2_0; }
		
		//'*' type_qualifier_list=type_qualifier_list
		public Group getGroup_1() { return cGroup_1; }
		
		//'*'
		public Keyword getAsteriskKeyword_1_0() { return cAsteriskKeyword_1_0; }
		
		//type_qualifier_list=type_qualifier_list
		public Assignment getType_qualifier_listAssignment_1_1() { return cType_qualifier_listAssignment_1_1; }
		
		//type_qualifier_list
		public RuleCall getType_qualifier_listType_qualifier_listParserRuleCall_1_1_0() { return cType_qualifier_listType_qualifier_listParserRuleCall_1_1_0; }
		
		//'*' pointer=pointer
		public Group getGroup_2() { return cGroup_2; }
		
		//'*'
		public Keyword getAsteriskKeyword_2_0() { return cAsteriskKeyword_2_0; }
		
		//pointer=pointer
		public Assignment getPointerAssignment_2_1() { return cPointerAssignment_2_1; }
		
		//pointer
		public RuleCall getPointerPointerParserRuleCall_2_1_0() { return cPointerPointerParserRuleCall_2_1_0; }
		
		//'*'
		public Keyword getAsteriskKeyword_3() { return cAsteriskKeyword_3; }
	}
	public class Type_qualifier_listElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.type_qualifier_list");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cType_qualifierAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cType_qualifierType_qualifierParserRuleCall_0_0 = (RuleCall)cType_qualifierAssignment_0.eContents().get(0);
		private final Assignment cType_qualifier_list2Assignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cType_qualifier_list2Type_qualifier_list2ParserRuleCall_1_0 = (RuleCall)cType_qualifier_list2Assignment_1.eContents().get(0);
		
		//type_qualifier_list:
		//	type_qualifier=type_qualifier type_qualifier_list2=type_qualifier_list2;
		@Override public ParserRule getRule() { return rule; }
		
		//type_qualifier=type_qualifier type_qualifier_list2=type_qualifier_list2
		public Group getGroup() { return cGroup; }
		
		//type_qualifier=type_qualifier
		public Assignment getType_qualifierAssignment_0() { return cType_qualifierAssignment_0; }
		
		//type_qualifier
		public RuleCall getType_qualifierType_qualifierParserRuleCall_0_0() { return cType_qualifierType_qualifierParserRuleCall_0_0; }
		
		//type_qualifier_list2=type_qualifier_list2
		public Assignment getType_qualifier_list2Assignment_1() { return cType_qualifier_list2Assignment_1; }
		
		//type_qualifier_list2
		public RuleCall getType_qualifier_list2Type_qualifier_list2ParserRuleCall_1_0() { return cType_qualifier_list2Type_qualifier_list2ParserRuleCall_1_0; }
	}
	public class Type_qualifier_list2Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.type_qualifier_list2");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cType_qualifier_list2Action_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cType_qualifierAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cType_qualifierType_qualifierParserRuleCall_1_0_0 = (RuleCall)cType_qualifierAssignment_1_0.eContents().get(0);
		private final Assignment cType_qualifier_list2Assignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cType_qualifier_list2Type_qualifier_list2ParserRuleCall_1_1_0 = (RuleCall)cType_qualifier_list2Assignment_1_1.eContents().get(0);
		
		//type_qualifier_list2:
		//	{type_qualifier_list2} (type_qualifier=type_qualifier type_qualifier_list2=type_qualifier_list2)?;
		@Override public ParserRule getRule() { return rule; }
		
		//{type_qualifier_list2} (type_qualifier=type_qualifier type_qualifier_list2=type_qualifier_list2)?
		public Group getGroup() { return cGroup; }
		
		//{type_qualifier_list2}
		public Action getType_qualifier_list2Action_0() { return cType_qualifier_list2Action_0; }
		
		//(type_qualifier=type_qualifier type_qualifier_list2=type_qualifier_list2)?
		public Group getGroup_1() { return cGroup_1; }
		
		//type_qualifier=type_qualifier
		public Assignment getType_qualifierAssignment_1_0() { return cType_qualifierAssignment_1_0; }
		
		//type_qualifier
		public RuleCall getType_qualifierType_qualifierParserRuleCall_1_0_0() { return cType_qualifierType_qualifierParserRuleCall_1_0_0; }
		
		//type_qualifier_list2=type_qualifier_list2
		public Assignment getType_qualifier_list2Assignment_1_1() { return cType_qualifier_list2Assignment_1_1; }
		
		//type_qualifier_list2
		public RuleCall getType_qualifier_list2Type_qualifier_list2ParserRuleCall_1_1_0() { return cType_qualifier_list2Type_qualifier_list2ParserRuleCall_1_1_0; }
	}
	public class Parameter_type_listElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.parameter_type_list");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cParameter_listAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cParameter_listParameter_listParserRuleCall_0_0_0 = (RuleCall)cParameter_listAssignment_0_0.eContents().get(0);
		private final Keyword cCommaKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cEllipsisAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cEllipsisELLIPSISTerminalRuleCall_0_2_0 = (RuleCall)cEllipsisAssignment_0_2.eContents().get(0);
		private final Assignment cParameter_listAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cParameter_listParameter_listParserRuleCall_1_0 = (RuleCall)cParameter_listAssignment_1.eContents().get(0);
		
		//parameter_type_list:
		//	parameter_list=parameter_list ',' ellipsis=ELLIPSIS | parameter_list=parameter_list;
		@Override public ParserRule getRule() { return rule; }
		
		//parameter_list=parameter_list ',' ellipsis=ELLIPSIS | parameter_list=parameter_list
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//parameter_list=parameter_list ',' ellipsis=ELLIPSIS
		public Group getGroup_0() { return cGroup_0; }
		
		//parameter_list=parameter_list
		public Assignment getParameter_listAssignment_0_0() { return cParameter_listAssignment_0_0; }
		
		//parameter_list
		public RuleCall getParameter_listParameter_listParserRuleCall_0_0_0() { return cParameter_listParameter_listParserRuleCall_0_0_0; }
		
		//','
		public Keyword getCommaKeyword_0_1() { return cCommaKeyword_0_1; }
		
		//ellipsis=ELLIPSIS
		public Assignment getEllipsisAssignment_0_2() { return cEllipsisAssignment_0_2; }
		
		//ELLIPSIS
		public RuleCall getEllipsisELLIPSISTerminalRuleCall_0_2_0() { return cEllipsisELLIPSISTerminalRuleCall_0_2_0; }
		
		//parameter_list=parameter_list
		public Assignment getParameter_listAssignment_1() { return cParameter_listAssignment_1; }
		
		//parameter_list
		public RuleCall getParameter_listParameter_listParserRuleCall_1_0() { return cParameter_listParameter_listParserRuleCall_1_0; }
	}
	public class Parameter_listElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.parameter_list");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cParameter_declarationAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cParameter_declarationParameter_declarationParserRuleCall_0_0 = (RuleCall)cParameter_declarationAssignment_0.eContents().get(0);
		private final Assignment cParameter_list2Assignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cParameter_list2Parameter_list2ParserRuleCall_1_0 = (RuleCall)cParameter_list2Assignment_1.eContents().get(0);
		
		//parameter_list:
		//	parameter_declaration=parameter_declaration parameter_list2=parameter_list2;
		@Override public ParserRule getRule() { return rule; }
		
		//parameter_declaration=parameter_declaration parameter_list2=parameter_list2
		public Group getGroup() { return cGroup; }
		
		//parameter_declaration=parameter_declaration
		public Assignment getParameter_declarationAssignment_0() { return cParameter_declarationAssignment_0; }
		
		//parameter_declaration
		public RuleCall getParameter_declarationParameter_declarationParserRuleCall_0_0() { return cParameter_declarationParameter_declarationParserRuleCall_0_0; }
		
		//parameter_list2=parameter_list2
		public Assignment getParameter_list2Assignment_1() { return cParameter_list2Assignment_1; }
		
		//parameter_list2
		public RuleCall getParameter_list2Parameter_list2ParserRuleCall_1_0() { return cParameter_list2Parameter_list2ParserRuleCall_1_0; }
	}
	public class Parameter_list2Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.parameter_list2");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cParameter_list2Action_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cParameter_declarationAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cParameter_declarationParameter_declarationParserRuleCall_1_1_0 = (RuleCall)cParameter_declarationAssignment_1_1.eContents().get(0);
		private final Assignment cParameter_list2Assignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cParameter_list2Parameter_list2ParserRuleCall_1_2_0 = (RuleCall)cParameter_list2Assignment_1_2.eContents().get(0);
		
		//parameter_list2:
		//	{parameter_list2} (',' parameter_declaration=parameter_declaration parameter_list2=parameter_list2)?;
		@Override public ParserRule getRule() { return rule; }
		
		//{parameter_list2} (',' parameter_declaration=parameter_declaration parameter_list2=parameter_list2)?
		public Group getGroup() { return cGroup; }
		
		//{parameter_list2}
		public Action getParameter_list2Action_0() { return cParameter_list2Action_0; }
		
		//(',' parameter_declaration=parameter_declaration parameter_list2=parameter_list2)?
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//parameter_declaration=parameter_declaration
		public Assignment getParameter_declarationAssignment_1_1() { return cParameter_declarationAssignment_1_1; }
		
		//parameter_declaration
		public RuleCall getParameter_declarationParameter_declarationParserRuleCall_1_1_0() { return cParameter_declarationParameter_declarationParserRuleCall_1_1_0; }
		
		//parameter_list2=parameter_list2
		public Assignment getParameter_list2Assignment_1_2() { return cParameter_list2Assignment_1_2; }
		
		//parameter_list2
		public RuleCall getParameter_list2Parameter_list2ParserRuleCall_1_2_0() { return cParameter_list2Parameter_list2ParserRuleCall_1_2_0; }
	}
	public class Parameter_declarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.parameter_declaration");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cDeclaration_specifiersAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cDeclaration_specifiersDeclaration_specifiersParserRuleCall_0_0_0 = (RuleCall)cDeclaration_specifiersAssignment_0_0.eContents().get(0);
		private final Assignment cDeclaratorAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cDeclaratorDeclaratorParserRuleCall_0_1_0 = (RuleCall)cDeclaratorAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cDeclaration_specifiersAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cDeclaration_specifiersDeclaration_specifiersParserRuleCall_1_0_0 = (RuleCall)cDeclaration_specifiersAssignment_1_0.eContents().get(0);
		private final Assignment cAbstract_declaratorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cAbstract_declaratorAbstract_declaratorParserRuleCall_1_1_0 = (RuleCall)cAbstract_declaratorAssignment_1_1.eContents().get(0);
		private final Assignment cDeclaration_specifiersAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cDeclaration_specifiersDeclaration_specifiersParserRuleCall_2_0 = (RuleCall)cDeclaration_specifiersAssignment_2.eContents().get(0);
		
		//parameter_declaration:
		//	declaration_specifiers=declaration_specifiers declarator=declarator | declaration_specifiers=declaration_specifiers
		//	abstract_declarator=abstract_declarator | declaration_specifiers=declaration_specifiers;
		@Override public ParserRule getRule() { return rule; }
		
		//declaration_specifiers=declaration_specifiers declarator=declarator | declaration_specifiers=declaration_specifiers
		//abstract_declarator=abstract_declarator | declaration_specifiers=declaration_specifiers
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//declaration_specifiers=declaration_specifiers declarator=declarator
		public Group getGroup_0() { return cGroup_0; }
		
		//declaration_specifiers=declaration_specifiers
		public Assignment getDeclaration_specifiersAssignment_0_0() { return cDeclaration_specifiersAssignment_0_0; }
		
		//declaration_specifiers
		public RuleCall getDeclaration_specifiersDeclaration_specifiersParserRuleCall_0_0_0() { return cDeclaration_specifiersDeclaration_specifiersParserRuleCall_0_0_0; }
		
		//declarator=declarator
		public Assignment getDeclaratorAssignment_0_1() { return cDeclaratorAssignment_0_1; }
		
		//declarator
		public RuleCall getDeclaratorDeclaratorParserRuleCall_0_1_0() { return cDeclaratorDeclaratorParserRuleCall_0_1_0; }
		
		//declaration_specifiers=declaration_specifiers abstract_declarator=abstract_declarator
		public Group getGroup_1() { return cGroup_1; }
		
		//declaration_specifiers=declaration_specifiers
		public Assignment getDeclaration_specifiersAssignment_1_0() { return cDeclaration_specifiersAssignment_1_0; }
		
		//declaration_specifiers
		public RuleCall getDeclaration_specifiersDeclaration_specifiersParserRuleCall_1_0_0() { return cDeclaration_specifiersDeclaration_specifiersParserRuleCall_1_0_0; }
		
		//abstract_declarator=abstract_declarator
		public Assignment getAbstract_declaratorAssignment_1_1() { return cAbstract_declaratorAssignment_1_1; }
		
		//abstract_declarator
		public RuleCall getAbstract_declaratorAbstract_declaratorParserRuleCall_1_1_0() { return cAbstract_declaratorAbstract_declaratorParserRuleCall_1_1_0; }
		
		//declaration_specifiers=declaration_specifiers
		public Assignment getDeclaration_specifiersAssignment_2() { return cDeclaration_specifiersAssignment_2; }
		
		//declaration_specifiers
		public RuleCall getDeclaration_specifiersDeclaration_specifiersParserRuleCall_2_0() { return cDeclaration_specifiersDeclaration_specifiersParserRuleCall_2_0; }
	}
	public class Identifier_listElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.identifier_list");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdentifierAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cIdentifierIDTerminalRuleCall_0_0 = (RuleCall)cIdentifierAssignment_0.eContents().get(0);
		private final Assignment cIdentifier_list2Assignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIdentifier_list2Identifier_list2ParserRuleCall_1_0 = (RuleCall)cIdentifier_list2Assignment_1.eContents().get(0);
		
		//identifier_list:
		//	identifier=ID identifier_list2=identifier_list2;
		@Override public ParserRule getRule() { return rule; }
		
		//identifier=ID identifier_list2=identifier_list2
		public Group getGroup() { return cGroup; }
		
		//identifier=ID
		public Assignment getIdentifierAssignment_0() { return cIdentifierAssignment_0; }
		
		//ID
		public RuleCall getIdentifierIDTerminalRuleCall_0_0() { return cIdentifierIDTerminalRuleCall_0_0; }
		
		//identifier_list2=identifier_list2
		public Assignment getIdentifier_list2Assignment_1() { return cIdentifier_list2Assignment_1; }
		
		//identifier_list2
		public RuleCall getIdentifier_list2Identifier_list2ParserRuleCall_1_0() { return cIdentifier_list2Identifier_list2ParserRuleCall_1_0; }
	}
	public class Identifier_list2Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.identifier_list2");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIdentifier_list2Action_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cIdentifierAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cIdentifierIDTerminalRuleCall_1_1_0 = (RuleCall)cIdentifierAssignment_1_1.eContents().get(0);
		private final Assignment cIdentifier_list2Assignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cIdentifier_list2Identifier_list2ParserRuleCall_1_2_0 = (RuleCall)cIdentifier_list2Assignment_1_2.eContents().get(0);
		
		//identifier_list2:
		//	{identifier_list2} (',' identifier=ID identifier_list2=identifier_list2)?;
		@Override public ParserRule getRule() { return rule; }
		
		//{identifier_list2} (',' identifier=ID identifier_list2=identifier_list2)?
		public Group getGroup() { return cGroup; }
		
		//{identifier_list2}
		public Action getIdentifier_list2Action_0() { return cIdentifier_list2Action_0; }
		
		//(',' identifier=ID identifier_list2=identifier_list2)?
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//identifier=ID
		public Assignment getIdentifierAssignment_1_1() { return cIdentifierAssignment_1_1; }
		
		//ID
		public RuleCall getIdentifierIDTerminalRuleCall_1_1_0() { return cIdentifierIDTerminalRuleCall_1_1_0; }
		
		//identifier_list2=identifier_list2
		public Assignment getIdentifier_list2Assignment_1_2() { return cIdentifier_list2Assignment_1_2; }
		
		//identifier_list2
		public RuleCall getIdentifier_list2Identifier_list2ParserRuleCall_1_2_0() { return cIdentifier_list2Identifier_list2ParserRuleCall_1_2_0; }
	}
	public class Type_nameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.type_name");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cSpecifier_qualifier_listAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cSpecifier_qualifier_listSpecifier_qualifier_listParserRuleCall_0_0_0 = (RuleCall)cSpecifier_qualifier_listAssignment_0_0.eContents().get(0);
		private final Assignment cAbstract_declaratorAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cAbstract_declaratorAbstract_declaratorParserRuleCall_0_1_0 = (RuleCall)cAbstract_declaratorAssignment_0_1.eContents().get(0);
		private final Assignment cSpecifier_qualifier_listAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cSpecifier_qualifier_listSpecifier_qualifier_listParserRuleCall_1_0 = (RuleCall)cSpecifier_qualifier_listAssignment_1.eContents().get(0);
		
		//type_name:
		//	specifier_qualifier_list=specifier_qualifier_list abstract_declarator=abstract_declarator |
		//	specifier_qualifier_list=specifier_qualifier_list;
		@Override public ParserRule getRule() { return rule; }
		
		//specifier_qualifier_list=specifier_qualifier_list abstract_declarator=abstract_declarator |
		//specifier_qualifier_list=specifier_qualifier_list
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//specifier_qualifier_list=specifier_qualifier_list abstract_declarator=abstract_declarator
		public Group getGroup_0() { return cGroup_0; }
		
		//specifier_qualifier_list=specifier_qualifier_list
		public Assignment getSpecifier_qualifier_listAssignment_0_0() { return cSpecifier_qualifier_listAssignment_0_0; }
		
		//specifier_qualifier_list
		public RuleCall getSpecifier_qualifier_listSpecifier_qualifier_listParserRuleCall_0_0_0() { return cSpecifier_qualifier_listSpecifier_qualifier_listParserRuleCall_0_0_0; }
		
		//abstract_declarator=abstract_declarator
		public Assignment getAbstract_declaratorAssignment_0_1() { return cAbstract_declaratorAssignment_0_1; }
		
		//abstract_declarator
		public RuleCall getAbstract_declaratorAbstract_declaratorParserRuleCall_0_1_0() { return cAbstract_declaratorAbstract_declaratorParserRuleCall_0_1_0; }
		
		//specifier_qualifier_list=specifier_qualifier_list
		public Assignment getSpecifier_qualifier_listAssignment_1() { return cSpecifier_qualifier_listAssignment_1; }
		
		//specifier_qualifier_list
		public RuleCall getSpecifier_qualifier_listSpecifier_qualifier_listParserRuleCall_1_0() { return cSpecifier_qualifier_listSpecifier_qualifier_listParserRuleCall_1_0; }
	}
	public class Abstract_declaratorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.abstract_declarator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cPointerAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cPointerPointerParserRuleCall_0_0_0 = (RuleCall)cPointerAssignment_0_0.eContents().get(0);
		private final Assignment cDirect_abstract_declaratorAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cDirect_abstract_declaratorDirect_abstract_declaratorParserRuleCall_0_1_0 = (RuleCall)cDirect_abstract_declaratorAssignment_0_1.eContents().get(0);
		private final Assignment cPointerAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cPointerPointerParserRuleCall_1_0 = (RuleCall)cPointerAssignment_1.eContents().get(0);
		private final Assignment cDirect_abstract_declaratorAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cDirect_abstract_declaratorDirect_abstract_declaratorParserRuleCall_2_0 = (RuleCall)cDirect_abstract_declaratorAssignment_2.eContents().get(0);
		
		//abstract_declarator:
		//	pointer=pointer direct_abstract_declarator=direct_abstract_declarator | pointer=pointer |
		//	direct_abstract_declarator=direct_abstract_declarator;
		@Override public ParserRule getRule() { return rule; }
		
		//pointer=pointer direct_abstract_declarator=direct_abstract_declarator | pointer=pointer |
		//direct_abstract_declarator=direct_abstract_declarator
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//pointer=pointer direct_abstract_declarator=direct_abstract_declarator
		public Group getGroup_0() { return cGroup_0; }
		
		//pointer=pointer
		public Assignment getPointerAssignment_0_0() { return cPointerAssignment_0_0; }
		
		//pointer
		public RuleCall getPointerPointerParserRuleCall_0_0_0() { return cPointerPointerParserRuleCall_0_0_0; }
		
		//direct_abstract_declarator=direct_abstract_declarator
		public Assignment getDirect_abstract_declaratorAssignment_0_1() { return cDirect_abstract_declaratorAssignment_0_1; }
		
		//direct_abstract_declarator
		public RuleCall getDirect_abstract_declaratorDirect_abstract_declaratorParserRuleCall_0_1_0() { return cDirect_abstract_declaratorDirect_abstract_declaratorParserRuleCall_0_1_0; }
		
		//pointer=pointer
		public Assignment getPointerAssignment_1() { return cPointerAssignment_1; }
		
		//pointer
		public RuleCall getPointerPointerParserRuleCall_1_0() { return cPointerPointerParserRuleCall_1_0; }
		
		//direct_abstract_declarator=direct_abstract_declarator
		public Assignment getDirect_abstract_declaratorAssignment_2() { return cDirect_abstract_declaratorAssignment_2; }
		
		//direct_abstract_declarator
		public RuleCall getDirect_abstract_declaratorDirect_abstract_declaratorParserRuleCall_2_0() { return cDirect_abstract_declaratorDirect_abstract_declaratorParserRuleCall_2_0; }
	}
	public class Direct_abstract_declaratorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.direct_abstract_declarator");
		private final Assignment cDirect_abstract_declarator2Assignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cDirect_abstract_declarator2Direct_abstract_declarator2ParserRuleCall_0 = (RuleCall)cDirect_abstract_declarator2Assignment.eContents().get(0);
		
		////TODO Olhar esse tem como refatorar ( A | B| C) direct_abstract_declarator2
		// direct_abstract_declarator:
		//	direct_abstract_declarator2+=direct_abstract_declarator2+;
		@Override public ParserRule getRule() { return rule; }
		
		//direct_abstract_declarator2+=direct_abstract_declarator2+
		public Assignment getDirect_abstract_declarator2Assignment() { return cDirect_abstract_declarator2Assignment; }
		
		//direct_abstract_declarator2
		public RuleCall getDirect_abstract_declarator2Direct_abstract_declarator2ParserRuleCall_0() { return cDirect_abstract_declarator2Direct_abstract_declarator2ParserRuleCall_0; }
	}
	public class Direct_abstract_declarator2Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.direct_abstract_declarator2");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cAsteriskKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cLeftSquareBracketKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cStaticAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cStaticSTATICParserRuleCall_2_1_0 = (RuleCall)cStaticAssignment_2_1.eContents().get(0);
		private final Assignment cType_qualifier_listAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cType_qualifier_listType_qualifier_listParserRuleCall_2_2_0 = (RuleCall)cType_qualifier_listAssignment_2_2.eContents().get(0);
		private final Assignment cAssignment_expressionAssignment_2_3 = (Assignment)cGroup_2.eContents().get(3);
		private final RuleCall cAssignment_expressionAssignment_expressionParserRuleCall_2_3_0 = (RuleCall)cAssignment_expressionAssignment_2_3.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2_4 = (Keyword)cGroup_2.eContents().get(4);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Keyword cLeftSquareBracketKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cStaticAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cStaticSTATICParserRuleCall_3_1_0 = (RuleCall)cStaticAssignment_3_1.eContents().get(0);
		private final Assignment cAssignment_expressionAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cAssignment_expressionAssignment_expressionParserRuleCall_3_2_0 = (RuleCall)cAssignment_expressionAssignment_3_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Keyword cLeftSquareBracketKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cType_qualifier_listAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cType_qualifier_listType_qualifier_listParserRuleCall_4_1_0 = (RuleCall)cType_qualifier_listAssignment_4_1.eContents().get(0);
		private final Assignment cAssignment_expressionAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cAssignment_expressionAssignment_expressionParserRuleCall_4_2_0 = (RuleCall)cAssignment_expressionAssignment_4_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_4_3 = (Keyword)cGroup_4.eContents().get(3);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Keyword cLeftSquareBracketKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cType_qualifier_listAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cType_qualifier_listType_qualifier_listParserRuleCall_5_1_0 = (RuleCall)cType_qualifier_listAssignment_5_1.eContents().get(0);
		private final Assignment cStaticAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cStaticSTATICParserRuleCall_5_2_0 = (RuleCall)cStaticAssignment_5_2.eContents().get(0);
		private final Assignment cAssignment_expressionAssignment_5_3 = (Assignment)cGroup_5.eContents().get(3);
		private final RuleCall cAssignment_expressionAssignment_expressionParserRuleCall_5_3_0 = (RuleCall)cAssignment_expressionAssignment_5_3.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_5_4 = (Keyword)cGroup_5.eContents().get(4);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final Keyword cLeftSquareBracketKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cType_qualifier_listAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cType_qualifier_listType_qualifier_listParserRuleCall_6_1_0 = (RuleCall)cType_qualifier_listAssignment_6_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_6_2 = (Keyword)cGroup_6.eContents().get(2);
		private final Group cGroup_7 = (Group)cAlternatives.eContents().get(7);
		private final Keyword cLeftSquareBracketKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cAssignment_expressionAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cAssignment_expressionAssignment_expressionParserRuleCall_7_1_0 = (RuleCall)cAssignment_expressionAssignment_7_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_7_2 = (Keyword)cGroup_7.eContents().get(2);
		private final Group cGroup_8 = (Group)cAlternatives.eContents().get(8);
		private final Keyword cLeftParenthesisKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_8_1 = (Keyword)cGroup_8.eContents().get(1);
		private final Group cGroup_9 = (Group)cAlternatives.eContents().get(9);
		private final Keyword cLeftParenthesisKeyword_9_0 = (Keyword)cGroup_9.eContents().get(0);
		private final Assignment cParameter_type_listAssignment_9_1 = (Assignment)cGroup_9.eContents().get(1);
		private final RuleCall cParameter_type_listParameter_type_listParserRuleCall_9_1_0 = (RuleCall)cParameter_type_listAssignment_9_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_9_2 = (Keyword)cGroup_9.eContents().get(2);
		
		//direct_abstract_declarator2:
		//	'[' ']' | '[' '*' ']' | '[' static=STATIC type_qualifier_list=type_qualifier_list
		//	assignment_expression=assignment_expression ']' | '[' static=STATIC assignment_expression=assignment_expression ']' |
		//	'[' type_qualifier_list=type_qualifier_list assignment_expression=assignment_expression ']' | '['
		//	type_qualifier_list=type_qualifier_list static=STATIC assignment_expression=assignment_expression ']' | '['
		//	type_qualifier_list=type_qualifier_list ']' | '[' assignment_expression=assignment_expression ']' | '(' ')' | '('
		//	parameter_type_list=parameter_type_list ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'[' ']' | '[' '*' ']' | '[' static=STATIC type_qualifier_list=type_qualifier_list
		//assignment_expression=assignment_expression ']' | '[' static=STATIC assignment_expression=assignment_expression ']' |
		//'[' type_qualifier_list=type_qualifier_list assignment_expression=assignment_expression ']' | '['
		//type_qualifier_list=type_qualifier_list static=STATIC assignment_expression=assignment_expression ']' | '['
		//type_qualifier_list=type_qualifier_list ']' | '[' assignment_expression=assignment_expression ']' | '(' ')' | '('
		//parameter_type_list=parameter_type_list ')'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'[' ']'
		public Group getGroup_0() { return cGroup_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_0_0() { return cLeftSquareBracketKeyword_0_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_0_1() { return cRightSquareBracketKeyword_0_1; }
		
		//'[' '*' ']'
		public Group getGroup_1() { return cGroup_1; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1_0() { return cLeftSquareBracketKeyword_1_0; }
		
		//'*'
		public Keyword getAsteriskKeyword_1_1() { return cAsteriskKeyword_1_1; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_1_2() { return cRightSquareBracketKeyword_1_2; }
		
		//'[' static=STATIC type_qualifier_list=type_qualifier_list assignment_expression=assignment_expression ']'
		public Group getGroup_2() { return cGroup_2; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_2_0() { return cLeftSquareBracketKeyword_2_0; }
		
		//static=STATIC
		public Assignment getStaticAssignment_2_1() { return cStaticAssignment_2_1; }
		
		//STATIC
		public RuleCall getStaticSTATICParserRuleCall_2_1_0() { return cStaticSTATICParserRuleCall_2_1_0; }
		
		//type_qualifier_list=type_qualifier_list
		public Assignment getType_qualifier_listAssignment_2_2() { return cType_qualifier_listAssignment_2_2; }
		
		//type_qualifier_list
		public RuleCall getType_qualifier_listType_qualifier_listParserRuleCall_2_2_0() { return cType_qualifier_listType_qualifier_listParserRuleCall_2_2_0; }
		
		//assignment_expression=assignment_expression
		public Assignment getAssignment_expressionAssignment_2_3() { return cAssignment_expressionAssignment_2_3; }
		
		//assignment_expression
		public RuleCall getAssignment_expressionAssignment_expressionParserRuleCall_2_3_0() { return cAssignment_expressionAssignment_expressionParserRuleCall_2_3_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_2_4() { return cRightSquareBracketKeyword_2_4; }
		
		//'[' static=STATIC assignment_expression=assignment_expression ']'
		public Group getGroup_3() { return cGroup_3; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_3_0() { return cLeftSquareBracketKeyword_3_0; }
		
		//static=STATIC
		public Assignment getStaticAssignment_3_1() { return cStaticAssignment_3_1; }
		
		//STATIC
		public RuleCall getStaticSTATICParserRuleCall_3_1_0() { return cStaticSTATICParserRuleCall_3_1_0; }
		
		//assignment_expression=assignment_expression
		public Assignment getAssignment_expressionAssignment_3_2() { return cAssignment_expressionAssignment_3_2; }
		
		//assignment_expression
		public RuleCall getAssignment_expressionAssignment_expressionParserRuleCall_3_2_0() { return cAssignment_expressionAssignment_expressionParserRuleCall_3_2_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_3_3() { return cRightSquareBracketKeyword_3_3; }
		
		//'[' type_qualifier_list=type_qualifier_list assignment_expression=assignment_expression ']'
		public Group getGroup_4() { return cGroup_4; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_4_0() { return cLeftSquareBracketKeyword_4_0; }
		
		//type_qualifier_list=type_qualifier_list
		public Assignment getType_qualifier_listAssignment_4_1() { return cType_qualifier_listAssignment_4_1; }
		
		//type_qualifier_list
		public RuleCall getType_qualifier_listType_qualifier_listParserRuleCall_4_1_0() { return cType_qualifier_listType_qualifier_listParserRuleCall_4_1_0; }
		
		//assignment_expression=assignment_expression
		public Assignment getAssignment_expressionAssignment_4_2() { return cAssignment_expressionAssignment_4_2; }
		
		//assignment_expression
		public RuleCall getAssignment_expressionAssignment_expressionParserRuleCall_4_2_0() { return cAssignment_expressionAssignment_expressionParserRuleCall_4_2_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_4_3() { return cRightSquareBracketKeyword_4_3; }
		
		//'[' type_qualifier_list=type_qualifier_list static=STATIC assignment_expression=assignment_expression ']'
		public Group getGroup_5() { return cGroup_5; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_5_0() { return cLeftSquareBracketKeyword_5_0; }
		
		//type_qualifier_list=type_qualifier_list
		public Assignment getType_qualifier_listAssignment_5_1() { return cType_qualifier_listAssignment_5_1; }
		
		//type_qualifier_list
		public RuleCall getType_qualifier_listType_qualifier_listParserRuleCall_5_1_0() { return cType_qualifier_listType_qualifier_listParserRuleCall_5_1_0; }
		
		//static=STATIC
		public Assignment getStaticAssignment_5_2() { return cStaticAssignment_5_2; }
		
		//STATIC
		public RuleCall getStaticSTATICParserRuleCall_5_2_0() { return cStaticSTATICParserRuleCall_5_2_0; }
		
		//assignment_expression=assignment_expression
		public Assignment getAssignment_expressionAssignment_5_3() { return cAssignment_expressionAssignment_5_3; }
		
		//assignment_expression
		public RuleCall getAssignment_expressionAssignment_expressionParserRuleCall_5_3_0() { return cAssignment_expressionAssignment_expressionParserRuleCall_5_3_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_5_4() { return cRightSquareBracketKeyword_5_4; }
		
		//'[' type_qualifier_list=type_qualifier_list ']'
		public Group getGroup_6() { return cGroup_6; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_6_0() { return cLeftSquareBracketKeyword_6_0; }
		
		//type_qualifier_list=type_qualifier_list
		public Assignment getType_qualifier_listAssignment_6_1() { return cType_qualifier_listAssignment_6_1; }
		
		//type_qualifier_list
		public RuleCall getType_qualifier_listType_qualifier_listParserRuleCall_6_1_0() { return cType_qualifier_listType_qualifier_listParserRuleCall_6_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_6_2() { return cRightSquareBracketKeyword_6_2; }
		
		//'[' assignment_expression=assignment_expression ']'
		public Group getGroup_7() { return cGroup_7; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_7_0() { return cLeftSquareBracketKeyword_7_0; }
		
		//assignment_expression=assignment_expression
		public Assignment getAssignment_expressionAssignment_7_1() { return cAssignment_expressionAssignment_7_1; }
		
		//assignment_expression
		public RuleCall getAssignment_expressionAssignment_expressionParserRuleCall_7_1_0() { return cAssignment_expressionAssignment_expressionParserRuleCall_7_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_7_2() { return cRightSquareBracketKeyword_7_2; }
		
		//'(' ')'
		public Group getGroup_8() { return cGroup_8; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_8_0() { return cLeftParenthesisKeyword_8_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_8_1() { return cRightParenthesisKeyword_8_1; }
		
		//'(' parameter_type_list=parameter_type_list ')'
		public Group getGroup_9() { return cGroup_9; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_9_0() { return cLeftParenthesisKeyword_9_0; }
		
		//parameter_type_list=parameter_type_list
		public Assignment getParameter_type_listAssignment_9_1() { return cParameter_type_listAssignment_9_1; }
		
		//parameter_type_list
		public RuleCall getParameter_type_listParameter_type_listParserRuleCall_9_1_0() { return cParameter_type_listParameter_type_listParserRuleCall_9_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_9_2() { return cRightParenthesisKeyword_9_2; }
	}
	public class InitializerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.initializer");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cInitializer_listAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cInitializer_listInitializer_listParserRuleCall_0_1_0 = (RuleCall)cInitializer_listAssignment_0_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cInitializer_listAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cInitializer_listInitializer_listParserRuleCall_1_1_0 = (RuleCall)cInitializer_listAssignment_1_1.eContents().get(0);
		private final Keyword cCommaKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Keyword cRightCurlyBracketKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Assignment cAssignment_expressionAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cAssignment_expressionAssignment_expressionParserRuleCall_2_0 = (RuleCall)cAssignment_expressionAssignment_2.eContents().get(0);
		
		////TODO Olhar esse
		// initializer:
		//	'{' initializer_list=initializer_list '}' | '{' initializer_list=initializer_list ',' '}' |
		//	assignment_expression=assignment_expression;
		@Override public ParserRule getRule() { return rule; }
		
		//'{' initializer_list=initializer_list '}' | '{' initializer_list=initializer_list ',' '}' |
		//assignment_expression=assignment_expression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'{' initializer_list=initializer_list '}'
		public Group getGroup_0() { return cGroup_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_0_0() { return cLeftCurlyBracketKeyword_0_0; }
		
		//initializer_list=initializer_list
		public Assignment getInitializer_listAssignment_0_1() { return cInitializer_listAssignment_0_1; }
		
		//initializer_list
		public RuleCall getInitializer_listInitializer_listParserRuleCall_0_1_0() { return cInitializer_listInitializer_listParserRuleCall_0_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_0_2() { return cRightCurlyBracketKeyword_0_2; }
		
		//'{' initializer_list=initializer_list ',' '}'
		public Group getGroup_1() { return cGroup_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1_0() { return cLeftCurlyBracketKeyword_1_0; }
		
		//initializer_list=initializer_list
		public Assignment getInitializer_listAssignment_1_1() { return cInitializer_listAssignment_1_1; }
		
		//initializer_list
		public RuleCall getInitializer_listInitializer_listParserRuleCall_1_1_0() { return cInitializer_listInitializer_listParserRuleCall_1_1_0; }
		
		//','
		public Keyword getCommaKeyword_1_2() { return cCommaKeyword_1_2; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_1_3() { return cRightCurlyBracketKeyword_1_3; }
		
		//assignment_expression=assignment_expression
		public Assignment getAssignment_expressionAssignment_2() { return cAssignment_expressionAssignment_2; }
		
		//assignment_expression
		public RuleCall getAssignment_expressionAssignment_expressionParserRuleCall_2_0() { return cAssignment_expressionAssignment_expressionParserRuleCall_2_0; }
	}
	public class Initializer_listElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.initializer_list");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cDesignationAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cDesignationDesignationParserRuleCall_0_0_0 = (RuleCall)cDesignationAssignment_0_0.eContents().get(0);
		private final Assignment cInitializerAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cInitializerInitializerParserRuleCall_0_1_0 = (RuleCall)cInitializerAssignment_0_1.eContents().get(0);
		private final Assignment cInitializer_list2Assignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cInitializer_list2Initializer_list2ParserRuleCall_0_2_0 = (RuleCall)cInitializer_list2Assignment_0_2.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cInitializerAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cInitializerInitializerParserRuleCall_1_0_0 = (RuleCall)cInitializerAssignment_1_0.eContents().get(0);
		private final Assignment cInitializer_list2Assignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cInitializer_list2Initializer_list2ParserRuleCall_1_1_0 = (RuleCall)cInitializer_list2Assignment_1_1.eContents().get(0);
		
		////TODO OLHAR esse
		// initializer_list:
		//	designation=designation initializer=initializer initializer_list2=initializer_list2 | initializer=initializer
		//	initializer_list2=initializer_list2;
		@Override public ParserRule getRule() { return rule; }
		
		//designation=designation initializer=initializer initializer_list2=initializer_list2 | initializer=initializer
		//initializer_list2=initializer_list2
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//designation=designation initializer=initializer initializer_list2=initializer_list2
		public Group getGroup_0() { return cGroup_0; }
		
		//designation=designation
		public Assignment getDesignationAssignment_0_0() { return cDesignationAssignment_0_0; }
		
		//designation
		public RuleCall getDesignationDesignationParserRuleCall_0_0_0() { return cDesignationDesignationParserRuleCall_0_0_0; }
		
		//initializer=initializer
		public Assignment getInitializerAssignment_0_1() { return cInitializerAssignment_0_1; }
		
		//initializer
		public RuleCall getInitializerInitializerParserRuleCall_0_1_0() { return cInitializerInitializerParserRuleCall_0_1_0; }
		
		//initializer_list2=initializer_list2
		public Assignment getInitializer_list2Assignment_0_2() { return cInitializer_list2Assignment_0_2; }
		
		//initializer_list2
		public RuleCall getInitializer_list2Initializer_list2ParserRuleCall_0_2_0() { return cInitializer_list2Initializer_list2ParserRuleCall_0_2_0; }
		
		//initializer=initializer initializer_list2=initializer_list2
		public Group getGroup_1() { return cGroup_1; }
		
		//initializer=initializer
		public Assignment getInitializerAssignment_1_0() { return cInitializerAssignment_1_0; }
		
		//initializer
		public RuleCall getInitializerInitializerParserRuleCall_1_0_0() { return cInitializerInitializerParserRuleCall_1_0_0; }
		
		//initializer_list2=initializer_list2
		public Assignment getInitializer_list2Assignment_1_1() { return cInitializer_list2Assignment_1_1; }
		
		//initializer_list2
		public RuleCall getInitializer_list2Initializer_list2ParserRuleCall_1_1_0() { return cInitializer_list2Initializer_list2ParserRuleCall_1_1_0; }
	}
	public class Initializer_list2Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.initializer_list2");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cInitializer_list2Action_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Keyword cCommaKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Assignment cDesignationAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cDesignationDesignationParserRuleCall_1_0_1_0 = (RuleCall)cDesignationAssignment_1_0_1.eContents().get(0);
		private final Assignment cInitializerAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cInitializerInitializerParserRuleCall_1_0_2_0 = (RuleCall)cInitializerAssignment_1_0_2.eContents().get(0);
		private final Assignment cInitializer_list2Assignment_1_0_3 = (Assignment)cGroup_1_0.eContents().get(3);
		private final RuleCall cInitializer_list2Initializer_list2ParserRuleCall_1_0_3_0 = (RuleCall)cInitializer_list2Assignment_1_0_3.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cInitializerAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cInitializerInitializerParserRuleCall_1_1_1_0 = (RuleCall)cInitializerAssignment_1_1_1.eContents().get(0);
		private final Assignment cInitializer_list2Assignment_1_1_2 = (Assignment)cGroup_1_1.eContents().get(2);
		private final RuleCall cInitializer_list2Initializer_list2ParserRuleCall_1_1_2_0 = (RuleCall)cInitializer_list2Assignment_1_1_2.eContents().get(0);
		
		//initializer_list2:
		//	{initializer_list2} (',' designation=designation initializer=initializer initializer_list2=initializer_list2 | ','
		//	initializer=initializer initializer_list2=initializer_list2)?;
		@Override public ParserRule getRule() { return rule; }
		
		//{initializer_list2} (',' designation=designation initializer=initializer initializer_list2=initializer_list2 | ','
		//initializer=initializer initializer_list2=initializer_list2)?
		public Group getGroup() { return cGroup; }
		
		//{initializer_list2}
		public Action getInitializer_list2Action_0() { return cInitializer_list2Action_0; }
		
		//(',' designation=designation initializer=initializer initializer_list2=initializer_list2 | ',' initializer=initializer
		//initializer_list2=initializer_list2)?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//',' designation=designation initializer=initializer initializer_list2=initializer_list2
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//','
		public Keyword getCommaKeyword_1_0_0() { return cCommaKeyword_1_0_0; }
		
		//designation=designation
		public Assignment getDesignationAssignment_1_0_1() { return cDesignationAssignment_1_0_1; }
		
		//designation
		public RuleCall getDesignationDesignationParserRuleCall_1_0_1_0() { return cDesignationDesignationParserRuleCall_1_0_1_0; }
		
		//initializer=initializer
		public Assignment getInitializerAssignment_1_0_2() { return cInitializerAssignment_1_0_2; }
		
		//initializer
		public RuleCall getInitializerInitializerParserRuleCall_1_0_2_0() { return cInitializerInitializerParserRuleCall_1_0_2_0; }
		
		//initializer_list2=initializer_list2
		public Assignment getInitializer_list2Assignment_1_0_3() { return cInitializer_list2Assignment_1_0_3; }
		
		//initializer_list2
		public RuleCall getInitializer_list2Initializer_list2ParserRuleCall_1_0_3_0() { return cInitializer_list2Initializer_list2ParserRuleCall_1_0_3_0; }
		
		//',' initializer=initializer initializer_list2=initializer_list2
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//','
		public Keyword getCommaKeyword_1_1_0() { return cCommaKeyword_1_1_0; }
		
		//initializer=initializer
		public Assignment getInitializerAssignment_1_1_1() { return cInitializerAssignment_1_1_1; }
		
		//initializer
		public RuleCall getInitializerInitializerParserRuleCall_1_1_1_0() { return cInitializerInitializerParserRuleCall_1_1_1_0; }
		
		//initializer_list2=initializer_list2
		public Assignment getInitializer_list2Assignment_1_1_2() { return cInitializer_list2Assignment_1_1_2; }
		
		//initializer_list2
		public RuleCall getInitializer_list2Initializer_list2ParserRuleCall_1_1_2_0() { return cInitializer_list2Initializer_list2ParserRuleCall_1_1_2_0; }
	}
	public class DesignationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.designation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDesignator_listAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDesignator_listDesignator_listParserRuleCall_0_0 = (RuleCall)cDesignator_listAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//designation:
		//	designator_list=designator_list '=';
		@Override public ParserRule getRule() { return rule; }
		
		//designator_list=designator_list '='
		public Group getGroup() { return cGroup; }
		
		//designator_list=designator_list
		public Assignment getDesignator_listAssignment_0() { return cDesignator_listAssignment_0; }
		
		//designator_list
		public RuleCall getDesignator_listDesignator_listParserRuleCall_0_0() { return cDesignator_listDesignator_listParserRuleCall_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
	}
	public class Designator_listElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.designator_list");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDesignatorAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDesignatorDesignatorParserRuleCall_0_0 = (RuleCall)cDesignatorAssignment_0.eContents().get(0);
		private final Assignment cDesignator_list2Assignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDesignator_list2Designator_list2ParserRuleCall_1_0 = (RuleCall)cDesignator_list2Assignment_1.eContents().get(0);
		
		//designator_list:
		//	designator=designator designator_list2=designator_list2;
		@Override public ParserRule getRule() { return rule; }
		
		//designator=designator designator_list2=designator_list2
		public Group getGroup() { return cGroup; }
		
		//designator=designator
		public Assignment getDesignatorAssignment_0() { return cDesignatorAssignment_0; }
		
		//designator
		public RuleCall getDesignatorDesignatorParserRuleCall_0_0() { return cDesignatorDesignatorParserRuleCall_0_0; }
		
		//designator_list2=designator_list2
		public Assignment getDesignator_list2Assignment_1() { return cDesignator_list2Assignment_1; }
		
		//designator_list2
		public RuleCall getDesignator_list2Designator_list2ParserRuleCall_1_0() { return cDesignator_list2Designator_list2ParserRuleCall_1_0; }
	}
	public class Designator_list2Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.designator_list2");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDesignator_list2Action_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cDesignatorAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cDesignatorDesignatorParserRuleCall_1_0_0 = (RuleCall)cDesignatorAssignment_1_0.eContents().get(0);
		private final Assignment cDesignator_list2Assignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cDesignator_list2Designator_list2ParserRuleCall_1_1_0 = (RuleCall)cDesignator_list2Assignment_1_1.eContents().get(0);
		
		//designator_list2:
		//	{designator_list2} (designator=designator designator_list2=designator_list2)?;
		@Override public ParserRule getRule() { return rule; }
		
		//{designator_list2} (designator=designator designator_list2=designator_list2)?
		public Group getGroup() { return cGroup; }
		
		//{designator_list2}
		public Action getDesignator_list2Action_0() { return cDesignator_list2Action_0; }
		
		//(designator=designator designator_list2=designator_list2)?
		public Group getGroup_1() { return cGroup_1; }
		
		//designator=designator
		public Assignment getDesignatorAssignment_1_0() { return cDesignatorAssignment_1_0; }
		
		//designator
		public RuleCall getDesignatorDesignatorParserRuleCall_1_0_0() { return cDesignatorDesignatorParserRuleCall_1_0_0; }
		
		//designator_list2=designator_list2
		public Assignment getDesignator_list2Assignment_1_1() { return cDesignator_list2Assignment_1_1; }
		
		//designator_list2
		public RuleCall getDesignator_list2Designator_list2ParserRuleCall_1_1_0() { return cDesignator_list2Designator_list2ParserRuleCall_1_1_0; }
	}
	public class DesignatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.designator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cConstant_expressionAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cConstant_expressionConstant_expressionParserRuleCall_0_1_0 = (RuleCall)cConstant_expressionAssignment_0_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cIdentifierAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cIdentifierIDTerminalRuleCall_1_1_0 = (RuleCall)cIdentifierAssignment_1_1.eContents().get(0);
		
		//designator:
		//	'[' constant_expression=constant_expression ']' | '.' identifier=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'[' constant_expression=constant_expression ']' | '.' identifier=ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'[' constant_expression=constant_expression ']'
		public Group getGroup_0() { return cGroup_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_0_0() { return cLeftSquareBracketKeyword_0_0; }
		
		//constant_expression=constant_expression
		public Assignment getConstant_expressionAssignment_0_1() { return cConstant_expressionAssignment_0_1; }
		
		//constant_expression
		public RuleCall getConstant_expressionConstant_expressionParserRuleCall_0_1_0() { return cConstant_expressionConstant_expressionParserRuleCall_0_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_0_2() { return cRightSquareBracketKeyword_0_2; }
		
		//'.' identifier=ID
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//identifier=ID
		public Assignment getIdentifierAssignment_1_1() { return cIdentifierAssignment_1_1; }
		
		//ID
		public RuleCall getIdentifierIDTerminalRuleCall_1_1_0() { return cIdentifierIDTerminalRuleCall_1_1_0; }
	}
	public class Static_assert_declarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.static_assert_declaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cStatic_assertAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cStatic_assertSTATIC_ASSERTParserRuleCall_0_0 = (RuleCall)cStatic_assertAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cConstant_expressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConstant_expressionConstant_expressionParserRuleCall_2_0 = (RuleCall)cConstant_expressionAssignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cString_literalAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cString_literalSTRING_LITERALTerminalRuleCall_4_0 = (RuleCall)cString_literalAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cSemicolonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		////Olhar
		// static_assert_declaration:
		//	static_assert=STATIC_ASSERT '(' constant_expression=constant_expression ',' string_literal=STRING_LITERAL ')' ';';
		@Override public ParserRule getRule() { return rule; }
		
		//static_assert=STATIC_ASSERT '(' constant_expression=constant_expression ',' string_literal=STRING_LITERAL ')' ';'
		public Group getGroup() { return cGroup; }
		
		//static_assert=STATIC_ASSERT
		public Assignment getStatic_assertAssignment_0() { return cStatic_assertAssignment_0; }
		
		//STATIC_ASSERT
		public RuleCall getStatic_assertSTATIC_ASSERTParserRuleCall_0_0() { return cStatic_assertSTATIC_ASSERTParserRuleCall_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//constant_expression=constant_expression
		public Assignment getConstant_expressionAssignment_2() { return cConstant_expressionAssignment_2; }
		
		//constant_expression
		public RuleCall getConstant_expressionConstant_expressionParserRuleCall_2_0() { return cConstant_expressionConstant_expressionParserRuleCall_2_0; }
		
		//','
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }
		
		//string_literal=STRING_LITERAL
		public Assignment getString_literalAssignment_4() { return cString_literalAssignment_4; }
		
		//STRING_LITERAL
		public RuleCall getString_literalSTRING_LITERALTerminalRuleCall_4_0() { return cString_literalSTRING_LITERALTerminalRuleCall_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
		
		//';'
		public Keyword getSemicolonKeyword_6() { return cSemicolonKeyword_6; }
	}
	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.statement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cLabeled_statementAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cLabeled_statementLabeled_statementParserRuleCall_0_0 = (RuleCall)cLabeled_statementAssignment_0.eContents().get(0);
		private final Assignment cCompound_statementAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cCompound_statementCompound_statementParserRuleCall_1_0 = (RuleCall)cCompound_statementAssignment_1.eContents().get(0);
		private final Assignment cExpression_statementAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cExpression_statementExpression_statementParserRuleCall_2_0 = (RuleCall)cExpression_statementAssignment_2.eContents().get(0);
		private final Assignment cSelection_statementAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cSelection_statementSelection_statementParserRuleCall_3_0 = (RuleCall)cSelection_statementAssignment_3.eContents().get(0);
		private final Assignment cIteration_statementAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final RuleCall cIteration_statementIteration_statementParserRuleCall_4_0 = (RuleCall)cIteration_statementAssignment_4.eContents().get(0);
		private final Assignment cJump_statementAssignment_5 = (Assignment)cAlternatives.eContents().get(5);
		private final RuleCall cJump_statementJump_statementParserRuleCall_5_0 = (RuleCall)cJump_statementAssignment_5.eContents().get(0);
		
		////OLHAR
		// statement:
		//	labeled_statement=labeled_statement | compound_statement=compound_statement |
		//	expression_statement=expression_statement | selection_statement=selection_statement |
		//	iteration_statement=iteration_statement | jump_statement=jump_statement;
		@Override public ParserRule getRule() { return rule; }
		
		//labeled_statement=labeled_statement | compound_statement=compound_statement | expression_statement=expression_statement
		//| selection_statement=selection_statement | iteration_statement=iteration_statement | jump_statement=jump_statement
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//labeled_statement=labeled_statement
		public Assignment getLabeled_statementAssignment_0() { return cLabeled_statementAssignment_0; }
		
		//labeled_statement
		public RuleCall getLabeled_statementLabeled_statementParserRuleCall_0_0() { return cLabeled_statementLabeled_statementParserRuleCall_0_0; }
		
		//compound_statement=compound_statement
		public Assignment getCompound_statementAssignment_1() { return cCompound_statementAssignment_1; }
		
		//compound_statement
		public RuleCall getCompound_statementCompound_statementParserRuleCall_1_0() { return cCompound_statementCompound_statementParserRuleCall_1_0; }
		
		//expression_statement=expression_statement
		public Assignment getExpression_statementAssignment_2() { return cExpression_statementAssignment_2; }
		
		//expression_statement
		public RuleCall getExpression_statementExpression_statementParserRuleCall_2_0() { return cExpression_statementExpression_statementParserRuleCall_2_0; }
		
		//selection_statement=selection_statement
		public Assignment getSelection_statementAssignment_3() { return cSelection_statementAssignment_3; }
		
		//selection_statement
		public RuleCall getSelection_statementSelection_statementParserRuleCall_3_0() { return cSelection_statementSelection_statementParserRuleCall_3_0; }
		
		//iteration_statement=iteration_statement
		public Assignment getIteration_statementAssignment_4() { return cIteration_statementAssignment_4; }
		
		//iteration_statement
		public RuleCall getIteration_statementIteration_statementParserRuleCall_4_0() { return cIteration_statementIteration_statementParserRuleCall_4_0; }
		
		//jump_statement=jump_statement
		public Assignment getJump_statementAssignment_5() { return cJump_statementAssignment_5; }
		
		//jump_statement
		public RuleCall getJump_statementJump_statementParserRuleCall_5_0() { return cJump_statementJump_statementParserRuleCall_5_0; }
	}
	public class Labeled_statementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.labeled_statement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cIdentifierAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cIdentifierIDTerminalRuleCall_0_0_0 = (RuleCall)cIdentifierAssignment_0_0.eContents().get(0);
		private final Keyword cColonKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cStatementAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cStatementStatementParserRuleCall_0_2_0 = (RuleCall)cStatementAssignment_0_2.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cCaseAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cCaseCASEParserRuleCall_1_0_0 = (RuleCall)cCaseAssignment_1_0.eContents().get(0);
		private final Assignment cConstant_expressionAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cConstant_expressionConstant_expressionParserRuleCall_1_1_0 = (RuleCall)cConstant_expressionAssignment_1_1.eContents().get(0);
		private final Keyword cColonKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cStatementAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cStatementStatementParserRuleCall_1_3_0 = (RuleCall)cStatementAssignment_1_3.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Assignment cDefaultAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cDefaultDEFAULTParserRuleCall_2_0_0 = (RuleCall)cDefaultAssignment_2_0.eContents().get(0);
		private final Keyword cColonKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cStatementAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cStatementStatementParserRuleCall_2_2_0 = (RuleCall)cStatementAssignment_2_2.eContents().get(0);
		
		////OLHAR
		// labeled_statement:
		//	identifier=ID ':' statement=statement | case=CASE constant_expression=constant_expression ':' statement=statement |
		//	default=DEFAULT ':' statement=statement;
		@Override public ParserRule getRule() { return rule; }
		
		//identifier=ID ':' statement=statement | case=CASE constant_expression=constant_expression ':' statement=statement |
		//default=DEFAULT ':' statement=statement
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//identifier=ID ':' statement=statement
		public Group getGroup_0() { return cGroup_0; }
		
		//identifier=ID
		public Assignment getIdentifierAssignment_0_0() { return cIdentifierAssignment_0_0; }
		
		//ID
		public RuleCall getIdentifierIDTerminalRuleCall_0_0_0() { return cIdentifierIDTerminalRuleCall_0_0_0; }
		
		//':'
		public Keyword getColonKeyword_0_1() { return cColonKeyword_0_1; }
		
		//statement=statement
		public Assignment getStatementAssignment_0_2() { return cStatementAssignment_0_2; }
		
		//statement
		public RuleCall getStatementStatementParserRuleCall_0_2_0() { return cStatementStatementParserRuleCall_0_2_0; }
		
		//case=CASE constant_expression=constant_expression ':' statement=statement
		public Group getGroup_1() { return cGroup_1; }
		
		//case=CASE
		public Assignment getCaseAssignment_1_0() { return cCaseAssignment_1_0; }
		
		//CASE
		public RuleCall getCaseCASEParserRuleCall_1_0_0() { return cCaseCASEParserRuleCall_1_0_0; }
		
		//constant_expression=constant_expression
		public Assignment getConstant_expressionAssignment_1_1() { return cConstant_expressionAssignment_1_1; }
		
		//constant_expression
		public RuleCall getConstant_expressionConstant_expressionParserRuleCall_1_1_0() { return cConstant_expressionConstant_expressionParserRuleCall_1_1_0; }
		
		//':'
		public Keyword getColonKeyword_1_2() { return cColonKeyword_1_2; }
		
		//statement=statement
		public Assignment getStatementAssignment_1_3() { return cStatementAssignment_1_3; }
		
		//statement
		public RuleCall getStatementStatementParserRuleCall_1_3_0() { return cStatementStatementParserRuleCall_1_3_0; }
		
		//default=DEFAULT ':' statement=statement
		public Group getGroup_2() { return cGroup_2; }
		
		//default=DEFAULT
		public Assignment getDefaultAssignment_2_0() { return cDefaultAssignment_2_0; }
		
		//DEFAULT
		public RuleCall getDefaultDEFAULTParserRuleCall_2_0_0() { return cDefaultDEFAULTParserRuleCall_2_0_0; }
		
		//':'
		public Keyword getColonKeyword_2_1() { return cColonKeyword_2_1; }
		
		//statement=statement
		public Assignment getStatementAssignment_2_2() { return cStatementAssignment_2_2; }
		
		//statement
		public RuleCall getStatementStatementParserRuleCall_2_2_0() { return cStatementStatementParserRuleCall_2_2_0; }
	}
	public class Compound_statementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.compound_statement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cBlock_item_listAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cBlock_item_listBlock_itemParserRuleCall_1_1_0 = (RuleCall)cBlock_item_listAssignment_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		/// *
		// * compound_statement
		//	: '{' '}'
		//	| '{'  block_item_list+=block_item_list '}'
		//;
		// * / compound_statement:
		//	'{' '}' | '{' block_item_list+=block_item* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'{' '}' | '{' block_item_list+=block_item* '}'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'{' '}'
		public Group getGroup_0() { return cGroup_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_0_0() { return cLeftCurlyBracketKeyword_0_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_0_1() { return cRightCurlyBracketKeyword_0_1; }
		
		//'{' block_item_list+=block_item* '}'
		public Group getGroup_1() { return cGroup_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1_0() { return cLeftCurlyBracketKeyword_1_0; }
		
		//block_item_list+=block_item*
		public Assignment getBlock_item_listAssignment_1_1() { return cBlock_item_listAssignment_1_1; }
		
		//block_item
		public RuleCall getBlock_item_listBlock_itemParserRuleCall_1_1_0() { return cBlock_item_listBlock_itemParserRuleCall_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_1_2() { return cRightCurlyBracketKeyword_1_2; }
	}
	public class Block_itemElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.block_item");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cDeclarationAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cDeclarationDeclarationParserRuleCall_0_0 = (RuleCall)cDeclarationAssignment_0.eContents().get(0);
		private final Assignment cStatementAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cStatementStatementParserRuleCall_1_0 = (RuleCall)cStatementAssignment_1.eContents().get(0);
		
		//block_item:
		//	declaration=declaration | statement=statement;
		@Override public ParserRule getRule() { return rule; }
		
		//declaration=declaration | statement=statement
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//declaration=declaration
		public Assignment getDeclarationAssignment_0() { return cDeclarationAssignment_0; }
		
		//declaration
		public RuleCall getDeclarationDeclarationParserRuleCall_0_0() { return cDeclarationDeclarationParserRuleCall_0_0; }
		
		//statement=statement
		public Assignment getStatementAssignment_1() { return cStatementAssignment_1; }
		
		//statement
		public RuleCall getStatementStatementParserRuleCall_1_0() { return cStatementStatementParserRuleCall_1_0; }
	}
	public class Expression_statementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.expression_statement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cSemicolonKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cExpressionAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cExpressionExpressionParserRuleCall_1_0_0 = (RuleCall)cExpressionAssignment_1_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		
		//expression_statement:
		//	';' | expression=expression ';';
		@Override public ParserRule getRule() { return rule; }
		
		//';' | expression=expression ';'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//';'
		public Keyword getSemicolonKeyword_0() { return cSemicolonKeyword_0; }
		
		//expression=expression ';'
		public Group getGroup_1() { return cGroup_1; }
		
		//expression=expression
		public Assignment getExpressionAssignment_1_0() { return cExpressionAssignment_1_0; }
		
		//expression
		public RuleCall getExpressionExpressionParserRuleCall_1_0_0() { return cExpressionExpressionParserRuleCall_1_0_0; }
		
		//';'
		public Keyword getSemicolonKeyword_1_1() { return cSemicolonKeyword_1_1; }
	}
	public class Selection_statementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.selection_statement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cIfAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cIfIFParserRuleCall_0_0_0 = (RuleCall)cIfAssignment_0_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cExpressionAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cExpressionExpressionParserRuleCall_0_2_0 = (RuleCall)cExpressionAssignment_0_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Assignment cStatementAssignment_0_4 = (Assignment)cGroup_0.eContents().get(4);
		private final RuleCall cStatementStatementParserRuleCall_0_4_0 = (RuleCall)cStatementAssignment_0_4.eContents().get(0);
		private final Assignment cElseAssignment_0_5 = (Assignment)cGroup_0.eContents().get(5);
		private final RuleCall cElseELSEParserRuleCall_0_5_0 = (RuleCall)cElseAssignment_0_5.eContents().get(0);
		private final Assignment cStatement2Assignment_0_6 = (Assignment)cGroup_0.eContents().get(6);
		private final RuleCall cStatement2StatementParserRuleCall_0_6_0 = (RuleCall)cStatement2Assignment_0_6.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cIfAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cIfIFParserRuleCall_1_0_0 = (RuleCall)cIfAssignment_1_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cExpressionAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cExpressionExpressionParserRuleCall_1_2_0 = (RuleCall)cExpressionAssignment_1_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Assignment cStatementAssignment_1_4 = (Assignment)cGroup_1.eContents().get(4);
		private final RuleCall cStatementStatementParserRuleCall_1_4_0 = (RuleCall)cStatementAssignment_1_4.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Assignment cSwitchAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cSwitchSWITCHParserRuleCall_2_0_0 = (RuleCall)cSwitchAssignment_2_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cExpressionAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cExpressionExpressionParserRuleCall_2_2_0 = (RuleCall)cExpressionAssignment_2_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final Assignment cStatementAssignment_2_4 = (Assignment)cGroup_2.eContents().get(4);
		private final RuleCall cStatementStatementParserRuleCall_2_4_0 = (RuleCall)cStatementAssignment_2_4.eContents().get(0);
		
		//selection_statement:
		//	if=IF '(' expression=expression ')' statement=statement else=ELSE statement2=statement | if=IF '('
		//	expression=expression ')' statement=statement | switch=SWITCH '(' expression=expression ')' statement=statement;
		@Override public ParserRule getRule() { return rule; }
		
		//if=IF '(' expression=expression ')' statement=statement else=ELSE statement2=statement | if=IF '(' expression=expression
		//')' statement=statement | switch=SWITCH '(' expression=expression ')' statement=statement
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//if=IF '(' expression=expression ')' statement=statement else=ELSE statement2=statement
		public Group getGroup_0() { return cGroup_0; }
		
		//if=IF
		public Assignment getIfAssignment_0_0() { return cIfAssignment_0_0; }
		
		//IF
		public RuleCall getIfIFParserRuleCall_0_0_0() { return cIfIFParserRuleCall_0_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_1() { return cLeftParenthesisKeyword_0_1; }
		
		//expression=expression
		public Assignment getExpressionAssignment_0_2() { return cExpressionAssignment_0_2; }
		
		//expression
		public RuleCall getExpressionExpressionParserRuleCall_0_2_0() { return cExpressionExpressionParserRuleCall_0_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_3() { return cRightParenthesisKeyword_0_3; }
		
		//statement=statement
		public Assignment getStatementAssignment_0_4() { return cStatementAssignment_0_4; }
		
		//statement
		public RuleCall getStatementStatementParserRuleCall_0_4_0() { return cStatementStatementParserRuleCall_0_4_0; }
		
		//else=ELSE
		public Assignment getElseAssignment_0_5() { return cElseAssignment_0_5; }
		
		//ELSE
		public RuleCall getElseELSEParserRuleCall_0_5_0() { return cElseELSEParserRuleCall_0_5_0; }
		
		//statement2=statement
		public Assignment getStatement2Assignment_0_6() { return cStatement2Assignment_0_6; }
		
		//statement
		public RuleCall getStatement2StatementParserRuleCall_0_6_0() { return cStatement2StatementParserRuleCall_0_6_0; }
		
		//if=IF '(' expression=expression ')' statement=statement
		public Group getGroup_1() { return cGroup_1; }
		
		//if=IF
		public Assignment getIfAssignment_1_0() { return cIfAssignment_1_0; }
		
		//IF
		public RuleCall getIfIFParserRuleCall_1_0_0() { return cIfIFParserRuleCall_1_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_1() { return cLeftParenthesisKeyword_1_1; }
		
		//expression=expression
		public Assignment getExpressionAssignment_1_2() { return cExpressionAssignment_1_2; }
		
		//expression
		public RuleCall getExpressionExpressionParserRuleCall_1_2_0() { return cExpressionExpressionParserRuleCall_1_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_3() { return cRightParenthesisKeyword_1_3; }
		
		//statement=statement
		public Assignment getStatementAssignment_1_4() { return cStatementAssignment_1_4; }
		
		//statement
		public RuleCall getStatementStatementParserRuleCall_1_4_0() { return cStatementStatementParserRuleCall_1_4_0; }
		
		//switch=SWITCH '(' expression=expression ')' statement=statement
		public Group getGroup_2() { return cGroup_2; }
		
		//switch=SWITCH
		public Assignment getSwitchAssignment_2_0() { return cSwitchAssignment_2_0; }
		
		//SWITCH
		public RuleCall getSwitchSWITCHParserRuleCall_2_0_0() { return cSwitchSWITCHParserRuleCall_2_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_1() { return cLeftParenthesisKeyword_2_1; }
		
		//expression=expression
		public Assignment getExpressionAssignment_2_2() { return cExpressionAssignment_2_2; }
		
		//expression
		public RuleCall getExpressionExpressionParserRuleCall_2_2_0() { return cExpressionExpressionParserRuleCall_2_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_3() { return cRightParenthesisKeyword_2_3; }
		
		//statement=statement
		public Assignment getStatementAssignment_2_4() { return cStatementAssignment_2_4; }
		
		//statement
		public RuleCall getStatementStatementParserRuleCall_2_4_0() { return cStatementStatementParserRuleCall_2_4_0; }
	}
	public class Iteration_statementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.iteration_statement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cWhileAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cWhileWHILEParserRuleCall_0_0_0 = (RuleCall)cWhileAssignment_0_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cExpressionAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cExpressionExpressionParserRuleCall_0_2_0 = (RuleCall)cExpressionAssignment_0_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Assignment cStatementAssignment_0_4 = (Assignment)cGroup_0.eContents().get(4);
		private final RuleCall cStatementStatementParserRuleCall_0_4_0 = (RuleCall)cStatementAssignment_0_4.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cDoAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cDoDOParserRuleCall_1_0_0 = (RuleCall)cDoAssignment_1_0.eContents().get(0);
		private final Assignment cStatementAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cStatementStatementParserRuleCall_1_1_0 = (RuleCall)cStatementAssignment_1_1.eContents().get(0);
		private final Assignment cWhileAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cWhileWHILEParserRuleCall_1_2_0 = (RuleCall)cWhileAssignment_1_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Assignment cExpressionAssignment_1_4 = (Assignment)cGroup_1.eContents().get(4);
		private final RuleCall cExpressionExpressionParserRuleCall_1_4_0 = (RuleCall)cExpressionAssignment_1_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_5 = (Keyword)cGroup_1.eContents().get(5);
		private final Keyword cSemicolonKeyword_1_6 = (Keyword)cGroup_1.eContents().get(6);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Assignment cForAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cForFORParserRuleCall_2_0_0 = (RuleCall)cForAssignment_2_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cExpression_statementAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cExpression_statementExpression_statementParserRuleCall_2_2_0 = (RuleCall)cExpression_statementAssignment_2_2.eContents().get(0);
		private final Assignment cExpression_statement2Assignment_2_3 = (Assignment)cGroup_2.eContents().get(3);
		private final RuleCall cExpression_statement2Expression_statementParserRuleCall_2_3_0 = (RuleCall)cExpression_statement2Assignment_2_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_4 = (Keyword)cGroup_2.eContents().get(4);
		private final Assignment cStatementAssignment_2_5 = (Assignment)cGroup_2.eContents().get(5);
		private final RuleCall cStatementStatementParserRuleCall_2_5_0 = (RuleCall)cStatementAssignment_2_5.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Assignment cForAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cForFORParserRuleCall_3_0_0 = (RuleCall)cForAssignment_3_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cExpression_statementAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cExpression_statementExpression_statementParserRuleCall_3_2_0 = (RuleCall)cExpression_statementAssignment_3_2.eContents().get(0);
		private final Assignment cExpression_statement2Assignment_3_3 = (Assignment)cGroup_3.eContents().get(3);
		private final RuleCall cExpression_statement2Expression_statementParserRuleCall_3_3_0 = (RuleCall)cExpression_statement2Assignment_3_3.eContents().get(0);
		private final Assignment cExpressionAssignment_3_4 = (Assignment)cGroup_3.eContents().get(4);
		private final RuleCall cExpressionExpressionParserRuleCall_3_4_0 = (RuleCall)cExpressionAssignment_3_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_5 = (Keyword)cGroup_3.eContents().get(5);
		private final Assignment cStatementAssignment_3_6 = (Assignment)cGroup_3.eContents().get(6);
		private final RuleCall cStatementStatementParserRuleCall_3_6_0 = (RuleCall)cStatementAssignment_3_6.eContents().get(0);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Assignment cForAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cForFORParserRuleCall_4_0_0 = (RuleCall)cForAssignment_4_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cDeclarationAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cDeclarationDeclarationParserRuleCall_4_2_0 = (RuleCall)cDeclarationAssignment_4_2.eContents().get(0);
		private final Assignment cExpression_statementAssignment_4_3 = (Assignment)cGroup_4.eContents().get(3);
		private final RuleCall cExpression_statementExpression_statementParserRuleCall_4_3_0 = (RuleCall)cExpression_statementAssignment_4_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4_4 = (Keyword)cGroup_4.eContents().get(4);
		private final Assignment cStatementAssignment_4_5 = (Assignment)cGroup_4.eContents().get(5);
		private final RuleCall cStatementStatementParserRuleCall_4_5_0 = (RuleCall)cStatementAssignment_4_5.eContents().get(0);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Assignment cForAssignment_5_0 = (Assignment)cGroup_5.eContents().get(0);
		private final RuleCall cForFORParserRuleCall_5_0_0 = (RuleCall)cForAssignment_5_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cDeclarationAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cDeclarationDeclarationParserRuleCall_5_2_0 = (RuleCall)cDeclarationAssignment_5_2.eContents().get(0);
		private final Assignment cExpression_statementAssignment_5_3 = (Assignment)cGroup_5.eContents().get(3);
		private final RuleCall cExpression_statementExpression_statementParserRuleCall_5_3_0 = (RuleCall)cExpression_statementAssignment_5_3.eContents().get(0);
		private final Assignment cExpressionAssignment_5_4 = (Assignment)cGroup_5.eContents().get(4);
		private final RuleCall cExpressionExpressionParserRuleCall_5_4_0 = (RuleCall)cExpressionAssignment_5_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5_5 = (Keyword)cGroup_5.eContents().get(5);
		private final Assignment cStatementAssignment_5_6 = (Assignment)cGroup_5.eContents().get(6);
		private final RuleCall cStatementStatementParserRuleCall_5_6_0 = (RuleCall)cStatementAssignment_5_6.eContents().get(0);
		
		//iteration_statement:
		//	while=WHILE '(' expression=expression ')' statement=statement | do=DO statement=statement while=WHILE '('
		//	expression=expression ')' ';' | for=FOR '(' expression_statement=expression_statement
		//	expression_statement2=expression_statement ')' statement=statement | for=FOR '('
		//	expression_statement=expression_statement expression_statement2=expression_statement expression=expression ')'
		//	statement=statement | for=FOR '(' declaration=declaration expression_statement=expression_statement ')'
		//	statement=statement | for=FOR '(' declaration=declaration expression_statement=expression_statement
		//	expression=expression ')' statement=statement;
		@Override public ParserRule getRule() { return rule; }
		
		//while=WHILE '(' expression=expression ')' statement=statement | do=DO statement=statement while=WHILE '('
		//expression=expression ')' ';' | for=FOR '(' expression_statement=expression_statement
		//expression_statement2=expression_statement ')' statement=statement | for=FOR '('
		//expression_statement=expression_statement expression_statement2=expression_statement expression=expression ')'
		//statement=statement | for=FOR '(' declaration=declaration expression_statement=expression_statement ')'
		//statement=statement | for=FOR '(' declaration=declaration expression_statement=expression_statement
		//expression=expression ')' statement=statement
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//while=WHILE '(' expression=expression ')' statement=statement
		public Group getGroup_0() { return cGroup_0; }
		
		//while=WHILE
		public Assignment getWhileAssignment_0_0() { return cWhileAssignment_0_0; }
		
		//WHILE
		public RuleCall getWhileWHILEParserRuleCall_0_0_0() { return cWhileWHILEParserRuleCall_0_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_1() { return cLeftParenthesisKeyword_0_1; }
		
		//expression=expression
		public Assignment getExpressionAssignment_0_2() { return cExpressionAssignment_0_2; }
		
		//expression
		public RuleCall getExpressionExpressionParserRuleCall_0_2_0() { return cExpressionExpressionParserRuleCall_0_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_3() { return cRightParenthesisKeyword_0_3; }
		
		//statement=statement
		public Assignment getStatementAssignment_0_4() { return cStatementAssignment_0_4; }
		
		//statement
		public RuleCall getStatementStatementParserRuleCall_0_4_0() { return cStatementStatementParserRuleCall_0_4_0; }
		
		//do=DO statement=statement while=WHILE '(' expression=expression ')' ';'
		public Group getGroup_1() { return cGroup_1; }
		
		//do=DO
		public Assignment getDoAssignment_1_0() { return cDoAssignment_1_0; }
		
		//DO
		public RuleCall getDoDOParserRuleCall_1_0_0() { return cDoDOParserRuleCall_1_0_0; }
		
		//statement=statement
		public Assignment getStatementAssignment_1_1() { return cStatementAssignment_1_1; }
		
		//statement
		public RuleCall getStatementStatementParserRuleCall_1_1_0() { return cStatementStatementParserRuleCall_1_1_0; }
		
		//while=WHILE
		public Assignment getWhileAssignment_1_2() { return cWhileAssignment_1_2; }
		
		//WHILE
		public RuleCall getWhileWHILEParserRuleCall_1_2_0() { return cWhileWHILEParserRuleCall_1_2_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_3() { return cLeftParenthesisKeyword_1_3; }
		
		//expression=expression
		public Assignment getExpressionAssignment_1_4() { return cExpressionAssignment_1_4; }
		
		//expression
		public RuleCall getExpressionExpressionParserRuleCall_1_4_0() { return cExpressionExpressionParserRuleCall_1_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_5() { return cRightParenthesisKeyword_1_5; }
		
		//';'
		public Keyword getSemicolonKeyword_1_6() { return cSemicolonKeyword_1_6; }
		
		//for=FOR '(' expression_statement=expression_statement expression_statement2=expression_statement ')' statement=statement
		public Group getGroup_2() { return cGroup_2; }
		
		//for=FOR
		public Assignment getForAssignment_2_0() { return cForAssignment_2_0; }
		
		//FOR
		public RuleCall getForFORParserRuleCall_2_0_0() { return cForFORParserRuleCall_2_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_1() { return cLeftParenthesisKeyword_2_1; }
		
		//expression_statement=expression_statement
		public Assignment getExpression_statementAssignment_2_2() { return cExpression_statementAssignment_2_2; }
		
		//expression_statement
		public RuleCall getExpression_statementExpression_statementParserRuleCall_2_2_0() { return cExpression_statementExpression_statementParserRuleCall_2_2_0; }
		
		//expression_statement2=expression_statement
		public Assignment getExpression_statement2Assignment_2_3() { return cExpression_statement2Assignment_2_3; }
		
		//expression_statement
		public RuleCall getExpression_statement2Expression_statementParserRuleCall_2_3_0() { return cExpression_statement2Expression_statementParserRuleCall_2_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_4() { return cRightParenthesisKeyword_2_4; }
		
		//statement=statement
		public Assignment getStatementAssignment_2_5() { return cStatementAssignment_2_5; }
		
		//statement
		public RuleCall getStatementStatementParserRuleCall_2_5_0() { return cStatementStatementParserRuleCall_2_5_0; }
		
		//for=FOR '(' expression_statement=expression_statement expression_statement2=expression_statement expression=expression
		//')' statement=statement
		public Group getGroup_3() { return cGroup_3; }
		
		//for=FOR
		public Assignment getForAssignment_3_0() { return cForAssignment_3_0; }
		
		//FOR
		public RuleCall getForFORParserRuleCall_3_0_0() { return cForFORParserRuleCall_3_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3_1() { return cLeftParenthesisKeyword_3_1; }
		
		//expression_statement=expression_statement
		public Assignment getExpression_statementAssignment_3_2() { return cExpression_statementAssignment_3_2; }
		
		//expression_statement
		public RuleCall getExpression_statementExpression_statementParserRuleCall_3_2_0() { return cExpression_statementExpression_statementParserRuleCall_3_2_0; }
		
		//expression_statement2=expression_statement
		public Assignment getExpression_statement2Assignment_3_3() { return cExpression_statement2Assignment_3_3; }
		
		//expression_statement
		public RuleCall getExpression_statement2Expression_statementParserRuleCall_3_3_0() { return cExpression_statement2Expression_statementParserRuleCall_3_3_0; }
		
		//expression=expression
		public Assignment getExpressionAssignment_3_4() { return cExpressionAssignment_3_4; }
		
		//expression
		public RuleCall getExpressionExpressionParserRuleCall_3_4_0() { return cExpressionExpressionParserRuleCall_3_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3_5() { return cRightParenthesisKeyword_3_5; }
		
		//statement=statement
		public Assignment getStatementAssignment_3_6() { return cStatementAssignment_3_6; }
		
		//statement
		public RuleCall getStatementStatementParserRuleCall_3_6_0() { return cStatementStatementParserRuleCall_3_6_0; }
		
		//for=FOR '(' declaration=declaration expression_statement=expression_statement ')' statement=statement
		public Group getGroup_4() { return cGroup_4; }
		
		//for=FOR
		public Assignment getForAssignment_4_0() { return cForAssignment_4_0; }
		
		//FOR
		public RuleCall getForFORParserRuleCall_4_0_0() { return cForFORParserRuleCall_4_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_4_1() { return cLeftParenthesisKeyword_4_1; }
		
		//declaration=declaration
		public Assignment getDeclarationAssignment_4_2() { return cDeclarationAssignment_4_2; }
		
		//declaration
		public RuleCall getDeclarationDeclarationParserRuleCall_4_2_0() { return cDeclarationDeclarationParserRuleCall_4_2_0; }
		
		//expression_statement=expression_statement
		public Assignment getExpression_statementAssignment_4_3() { return cExpression_statementAssignment_4_3; }
		
		//expression_statement
		public RuleCall getExpression_statementExpression_statementParserRuleCall_4_3_0() { return cExpression_statementExpression_statementParserRuleCall_4_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4_4() { return cRightParenthesisKeyword_4_4; }
		
		//statement=statement
		public Assignment getStatementAssignment_4_5() { return cStatementAssignment_4_5; }
		
		//statement
		public RuleCall getStatementStatementParserRuleCall_4_5_0() { return cStatementStatementParserRuleCall_4_5_0; }
		
		//for=FOR '(' declaration=declaration expression_statement=expression_statement expression=expression ')'
		//statement=statement
		public Group getGroup_5() { return cGroup_5; }
		
		//for=FOR
		public Assignment getForAssignment_5_0() { return cForAssignment_5_0; }
		
		//FOR
		public RuleCall getForFORParserRuleCall_5_0_0() { return cForFORParserRuleCall_5_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_5_1() { return cLeftParenthesisKeyword_5_1; }
		
		//declaration=declaration
		public Assignment getDeclarationAssignment_5_2() { return cDeclarationAssignment_5_2; }
		
		//declaration
		public RuleCall getDeclarationDeclarationParserRuleCall_5_2_0() { return cDeclarationDeclarationParserRuleCall_5_2_0; }
		
		//expression_statement=expression_statement
		public Assignment getExpression_statementAssignment_5_3() { return cExpression_statementAssignment_5_3; }
		
		//expression_statement
		public RuleCall getExpression_statementExpression_statementParserRuleCall_5_3_0() { return cExpression_statementExpression_statementParserRuleCall_5_3_0; }
		
		//expression=expression
		public Assignment getExpressionAssignment_5_4() { return cExpressionAssignment_5_4; }
		
		//expression
		public RuleCall getExpressionExpressionParserRuleCall_5_4_0() { return cExpressionExpressionParserRuleCall_5_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5_5() { return cRightParenthesisKeyword_5_5; }
		
		//statement=statement
		public Assignment getStatementAssignment_5_6() { return cStatementAssignment_5_6; }
		
		//statement
		public RuleCall getStatementStatementParserRuleCall_5_6_0() { return cStatementStatementParserRuleCall_5_6_0; }
	}
	public class Jump_statementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.jump_statement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cGotoAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cGotoGOTOParserRuleCall_0_0_0 = (RuleCall)cGotoAssignment_0_0.eContents().get(0);
		private final Assignment cIdentifierAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cIdentifierIDTerminalRuleCall_0_1_0 = (RuleCall)cIdentifierAssignment_0_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cContinueAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cContinueCONTINUEParserRuleCall_1_0_0 = (RuleCall)cContinueAssignment_1_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Assignment cBreakAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cBreakBREAKParserRuleCall_2_0_0 = (RuleCall)cBreakAssignment_2_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Assignment cReturnAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cReturnRETURNParserRuleCall_3_0_0 = (RuleCall)cReturnAssignment_3_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Assignment cReturnAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cReturnRETURNParserRuleCall_4_0_0 = (RuleCall)cReturnAssignment_4_0.eContents().get(0);
		private final Assignment cExpressionAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_4_1_0 = (RuleCall)cExpressionAssignment_4_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		
		//jump_statement:
		//	goto=GOTO identifier=ID ';' | continue=CONTINUE ';' | break=BREAK ';' | return=RETURN ';' | return=RETURN
		//	expression=expression ';';
		@Override public ParserRule getRule() { return rule; }
		
		//goto=GOTO identifier=ID ';' | continue=CONTINUE ';' | break=BREAK ';' | return=RETURN ';' | return=RETURN
		//expression=expression ';'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//goto=GOTO identifier=ID ';'
		public Group getGroup_0() { return cGroup_0; }
		
		//goto=GOTO
		public Assignment getGotoAssignment_0_0() { return cGotoAssignment_0_0; }
		
		//GOTO
		public RuleCall getGotoGOTOParserRuleCall_0_0_0() { return cGotoGOTOParserRuleCall_0_0_0; }
		
		//identifier=ID
		public Assignment getIdentifierAssignment_0_1() { return cIdentifierAssignment_0_1; }
		
		//ID
		public RuleCall getIdentifierIDTerminalRuleCall_0_1_0() { return cIdentifierIDTerminalRuleCall_0_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_0_2() { return cSemicolonKeyword_0_2; }
		
		//continue=CONTINUE ';'
		public Group getGroup_1() { return cGroup_1; }
		
		//continue=CONTINUE
		public Assignment getContinueAssignment_1_0() { return cContinueAssignment_1_0; }
		
		//CONTINUE
		public RuleCall getContinueCONTINUEParserRuleCall_1_0_0() { return cContinueCONTINUEParserRuleCall_1_0_0; }
		
		//';'
		public Keyword getSemicolonKeyword_1_1() { return cSemicolonKeyword_1_1; }
		
		//break=BREAK ';'
		public Group getGroup_2() { return cGroup_2; }
		
		//break=BREAK
		public Assignment getBreakAssignment_2_0() { return cBreakAssignment_2_0; }
		
		//BREAK
		public RuleCall getBreakBREAKParserRuleCall_2_0_0() { return cBreakBREAKParserRuleCall_2_0_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2_1() { return cSemicolonKeyword_2_1; }
		
		//return=RETURN ';'
		public Group getGroup_3() { return cGroup_3; }
		
		//return=RETURN
		public Assignment getReturnAssignment_3_0() { return cReturnAssignment_3_0; }
		
		//RETURN
		public RuleCall getReturnRETURNParserRuleCall_3_0_0() { return cReturnRETURNParserRuleCall_3_0_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3_1() { return cSemicolonKeyword_3_1; }
		
		//return=RETURN expression=expression ';'
		public Group getGroup_4() { return cGroup_4; }
		
		//return=RETURN
		public Assignment getReturnAssignment_4_0() { return cReturnAssignment_4_0; }
		
		//RETURN
		public RuleCall getReturnRETURNParserRuleCall_4_0_0() { return cReturnRETURNParserRuleCall_4_0_0; }
		
		//expression=expression
		public Assignment getExpressionAssignment_4_1() { return cExpressionAssignment_4_1; }
		
		//expression
		public RuleCall getExpressionExpressionParserRuleCall_4_1_0() { return cExpressionExpressionParserRuleCall_4_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_4_2() { return cSemicolonKeyword_4_2; }
	}
	public class Translation_unitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.translation_unit");
		private final Assignment cExternal_declarationAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cExternal_declarationExternal_declarationParserRuleCall_0 = (RuleCall)cExternal_declarationAssignment.eContents().get(0);
		
		//translation_unit:
		//	external_declaration=external_declaration;
		@Override public ParserRule getRule() { return rule; }
		
		//external_declaration=external_declaration
		public Assignment getExternal_declarationAssignment() { return cExternal_declarationAssignment; }
		
		//external_declaration
		public RuleCall getExternal_declarationExternal_declarationParserRuleCall_0() { return cExternal_declarationExternal_declarationParserRuleCall_0; }
	}
	public class External_declarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.external_declaration");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cFunction_definitionAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cFunction_definitionFunction_definitionParserRuleCall_0_0 = (RuleCall)cFunction_definitionAssignment_0.eContents().get(0);
		private final Assignment cDeclarationAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cDeclarationDeclarationParserRuleCall_1_0 = (RuleCall)cDeclarationAssignment_1.eContents().get(0);
		
		//external_declaration:
		//	function_definition=function_definition | declaration=declaration;
		@Override public ParserRule getRule() { return rule; }
		
		//function_definition=function_definition | declaration=declaration
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//function_definition=function_definition
		public Assignment getFunction_definitionAssignment_0() { return cFunction_definitionAssignment_0; }
		
		//function_definition
		public RuleCall getFunction_definitionFunction_definitionParserRuleCall_0_0() { return cFunction_definitionFunction_definitionParserRuleCall_0_0; }
		
		//declaration=declaration
		public Assignment getDeclarationAssignment_1() { return cDeclarationAssignment_1; }
		
		//declaration
		public RuleCall getDeclarationDeclarationParserRuleCall_1_0() { return cDeclarationDeclarationParserRuleCall_1_0; }
	}
	public class Function_definitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.function_definition");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cDeclaration_specifiersAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cDeclaration_specifiersDeclaration_specifiersParserRuleCall_0_0_0 = (RuleCall)cDeclaration_specifiersAssignment_0_0.eContents().get(0);
		private final Assignment cDeclaratorAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cDeclaratorDeclaratorParserRuleCall_0_1_0 = (RuleCall)cDeclaratorAssignment_0_1.eContents().get(0);
		private final Assignment cDeclaration_listAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cDeclaration_listDeclaration_listParserRuleCall_0_2_0 = (RuleCall)cDeclaration_listAssignment_0_2.eContents().get(0);
		private final Assignment cCompound_statementAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cCompound_statementCompound_statementParserRuleCall_0_3_0 = (RuleCall)cCompound_statementAssignment_0_3.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cDeclaration_specifiersAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cDeclaration_specifiersDeclaration_specifiersParserRuleCall_1_0_0 = (RuleCall)cDeclaration_specifiersAssignment_1_0.eContents().get(0);
		private final Assignment cDeclaratorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cDeclaratorDeclaratorParserRuleCall_1_1_0 = (RuleCall)cDeclaratorAssignment_1_1.eContents().get(0);
		private final Assignment cCompound_statementAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cCompound_statementCompound_statementParserRuleCall_1_2_0 = (RuleCall)cCompound_statementAssignment_1_2.eContents().get(0);
		
		/// *
		// * function_definition
		//	: declaration_specifiers+=declaration_specifiers declarator=declarator declaration_list+=declaration_list compound_statement=compound_statement
		//	| declaration_specifiers+=declaration_specifiers declarator=declarator compound_statement=compound_statement
		//	;
		// * /
		//function_definition:
		//	declaration_specifiers=declaration_specifiers declarator=declarator declaration_list=declaration_list
		//	compound_statement=compound_statement | declaration_specifiers=declaration_specifiers declarator=declarator
		//	compound_statement=compound_statement;
		@Override public ParserRule getRule() { return rule; }
		
		//declaration_specifiers=declaration_specifiers declarator=declarator declaration_list=declaration_list
		//compound_statement=compound_statement | declaration_specifiers=declaration_specifiers declarator=declarator
		//compound_statement=compound_statement
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//declaration_specifiers=declaration_specifiers declarator=declarator declaration_list=declaration_list
		//compound_statement=compound_statement
		public Group getGroup_0() { return cGroup_0; }
		
		//declaration_specifiers=declaration_specifiers
		public Assignment getDeclaration_specifiersAssignment_0_0() { return cDeclaration_specifiersAssignment_0_0; }
		
		//declaration_specifiers
		public RuleCall getDeclaration_specifiersDeclaration_specifiersParserRuleCall_0_0_0() { return cDeclaration_specifiersDeclaration_specifiersParserRuleCall_0_0_0; }
		
		//declarator=declarator
		public Assignment getDeclaratorAssignment_0_1() { return cDeclaratorAssignment_0_1; }
		
		//declarator
		public RuleCall getDeclaratorDeclaratorParserRuleCall_0_1_0() { return cDeclaratorDeclaratorParserRuleCall_0_1_0; }
		
		//declaration_list=declaration_list
		public Assignment getDeclaration_listAssignment_0_2() { return cDeclaration_listAssignment_0_2; }
		
		//declaration_list
		public RuleCall getDeclaration_listDeclaration_listParserRuleCall_0_2_0() { return cDeclaration_listDeclaration_listParserRuleCall_0_2_0; }
		
		//compound_statement=compound_statement
		public Assignment getCompound_statementAssignment_0_3() { return cCompound_statementAssignment_0_3; }
		
		//compound_statement
		public RuleCall getCompound_statementCompound_statementParserRuleCall_0_3_0() { return cCompound_statementCompound_statementParserRuleCall_0_3_0; }
		
		//declaration_specifiers=declaration_specifiers declarator=declarator compound_statement=compound_statement
		public Group getGroup_1() { return cGroup_1; }
		
		//declaration_specifiers=declaration_specifiers
		public Assignment getDeclaration_specifiersAssignment_1_0() { return cDeclaration_specifiersAssignment_1_0; }
		
		//declaration_specifiers
		public RuleCall getDeclaration_specifiersDeclaration_specifiersParserRuleCall_1_0_0() { return cDeclaration_specifiersDeclaration_specifiersParserRuleCall_1_0_0; }
		
		//declarator=declarator
		public Assignment getDeclaratorAssignment_1_1() { return cDeclaratorAssignment_1_1; }
		
		//declarator
		public RuleCall getDeclaratorDeclaratorParserRuleCall_1_1_0() { return cDeclaratorDeclaratorParserRuleCall_1_1_0; }
		
		//compound_statement=compound_statement
		public Assignment getCompound_statementAssignment_1_2() { return cCompound_statementAssignment_1_2; }
		
		//compound_statement
		public RuleCall getCompound_statementCompound_statementParserRuleCall_1_2_0() { return cCompound_statementCompound_statementParserRuleCall_1_2_0; }
	}
	public class Declaration_listElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.declaration_list");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDeclarationAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDeclarationDeclarationParserRuleCall_0_0 = (RuleCall)cDeclarationAssignment_0.eContents().get(0);
		private final Assignment cDeclaration_list_2Assignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDeclaration_list_2Declaration_list2ParserRuleCall_1_0 = (RuleCall)cDeclaration_list_2Assignment_1.eContents().get(0);
		
		//declaration_list:
		//	declaration=declaration declaration_list_2=declaration_list2;
		@Override public ParserRule getRule() { return rule; }
		
		//declaration=declaration declaration_list_2=declaration_list2
		public Group getGroup() { return cGroup; }
		
		//declaration=declaration
		public Assignment getDeclarationAssignment_0() { return cDeclarationAssignment_0; }
		
		//declaration
		public RuleCall getDeclarationDeclarationParserRuleCall_0_0() { return cDeclarationDeclarationParserRuleCall_0_0; }
		
		//declaration_list_2=declaration_list2
		public Assignment getDeclaration_list_2Assignment_1() { return cDeclaration_list_2Assignment_1; }
		
		//declaration_list2
		public RuleCall getDeclaration_list_2Declaration_list2ParserRuleCall_1_0() { return cDeclaration_list_2Declaration_list2ParserRuleCall_1_0; }
	}
	public class Declaration_list2Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.declaration_list2");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDeclaration_list2Action_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cDeclarationAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cDeclarationDeclarationParserRuleCall_1_0_0 = (RuleCall)cDeclarationAssignment_1_0.eContents().get(0);
		private final Assignment cDeclaration_list2Assignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cDeclaration_list2Declaration_list2ParserRuleCall_1_1_0 = (RuleCall)cDeclaration_list2Assignment_1_1.eContents().get(0);
		
		//declaration_list2:
		//	{declaration_list2} (declaration=declaration declaration_list2=declaration_list2)?;
		@Override public ParserRule getRule() { return rule; }
		
		//{declaration_list2} (declaration=declaration declaration_list2=declaration_list2)?
		public Group getGroup() { return cGroup; }
		
		//{declaration_list2}
		public Action getDeclaration_list2Action_0() { return cDeclaration_list2Action_0; }
		
		//(declaration=declaration declaration_list2=declaration_list2)?
		public Group getGroup_1() { return cGroup_1; }
		
		//declaration=declaration
		public Assignment getDeclarationAssignment_1_0() { return cDeclarationAssignment_1_0; }
		
		//declaration
		public RuleCall getDeclarationDeclarationParserRuleCall_1_0_0() { return cDeclarationDeclarationParserRuleCall_1_0_0; }
		
		//declaration_list2=declaration_list2
		public Assignment getDeclaration_list2Assignment_1_1() { return cDeclaration_list2Assignment_1_1; }
		
		//declaration_list2
		public RuleCall getDeclaration_list2Declaration_list2ParserRuleCall_1_1_0() { return cDeclaration_list2Declaration_list2ParserRuleCall_1_1_0; }
	}
	public class AUTOElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.AUTO");
		private final Keyword cAutoKeyword = (Keyword)rule.eContents().get(1);
		
		//// "auto"					{ return(AUTO); }
		// AUTO:
		//	"auto";
		@Override public ParserRule getRule() { return rule; }
		
		//"auto"
		public Keyword getAutoKeyword() { return cAutoKeyword; }
	}
	public class BREAKElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.BREAK");
		private final Keyword cBreakKeyword = (Keyword)rule.eContents().get(1);
		
		////"break"					{ return(BREAK); }
		// BREAK:
		//	"break";
		@Override public ParserRule getRule() { return rule; }
		
		//"break"
		public Keyword getBreakKeyword() { return cBreakKeyword; }
	}
	public class CASEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.CASE");
		private final Keyword cCaseKeyword = (Keyword)rule.eContents().get(1);
		
		////"case"					{ return(CASE); }
		// CASE:
		//	"case";
		@Override public ParserRule getRule() { return rule; }
		
		//"case"
		public Keyword getCaseKeyword() { return cCaseKeyword; }
	}
	public class CHARElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.CHAR");
		private final Keyword cCharKeyword = (Keyword)rule.eContents().get(1);
		
		////"char"					{ return(CHAR); }
		// CHAR:
		//	"char";
		@Override public ParserRule getRule() { return rule; }
		
		//"char"
		public Keyword getCharKeyword() { return cCharKeyword; }
	}
	public class CONSTElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.CONST");
		private final Keyword cConstKeyword = (Keyword)rule.eContents().get(1);
		
		////"const"					{ return(CONST); }
		// CONST:
		//	"const";
		@Override public ParserRule getRule() { return rule; }
		
		//"const"
		public Keyword getConstKeyword() { return cConstKeyword; }
	}
	public class CONTINUEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.CONTINUE");
		private final Keyword cContinueKeyword = (Keyword)rule.eContents().get(1);
		
		////"continue"				{ return(CONTINUE); }
		// CONTINUE:
		//	"continue";
		@Override public ParserRule getRule() { return rule; }
		
		//"continue"
		public Keyword getContinueKeyword() { return cContinueKeyword; }
	}
	public class DEFAULTElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.DEFAULT");
		private final Keyword cDefaultKeyword = (Keyword)rule.eContents().get(1);
		
		////"default"				{ return(DEFAULT); }
		// DEFAULT:
		//	"default";
		@Override public ParserRule getRule() { return rule; }
		
		//"default"
		public Keyword getDefaultKeyword() { return cDefaultKeyword; }
	}
	public class DOElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.DO");
		private final Keyword cDoKeyword = (Keyword)rule.eContents().get(1);
		
		////"do"					{ return(DO); }
		// DO:
		//	"do";
		@Override public ParserRule getRule() { return rule; }
		
		//"do"
		public Keyword getDoKeyword() { return cDoKeyword; }
	}
	public class DOUBLEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.DOUBLE");
		private final Keyword cDoubleKeyword = (Keyword)rule.eContents().get(1);
		
		////"double"				{ return(DOUBLE); }
		// DOUBLE:
		//	"double";
		@Override public ParserRule getRule() { return rule; }
		
		//"double"
		public Keyword getDoubleKeyword() { return cDoubleKeyword; }
	}
	public class ELSEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.ELSE");
		private final Keyword cElseKeyword = (Keyword)rule.eContents().get(1);
		
		////"else"					{ return(ELSE); }
		// ELSE:
		//	"else";
		@Override public ParserRule getRule() { return rule; }
		
		//"else"
		public Keyword getElseKeyword() { return cElseKeyword; }
	}
	public class ENUMElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.ENUM");
		private final Keyword cEnumKeyword = (Keyword)rule.eContents().get(1);
		
		////"enum"					{ return(ENUM); }
		// ENUM:
		//	"enum";
		@Override public ParserRule getRule() { return rule; }
		
		//"enum"
		public Keyword getEnumKeyword() { return cEnumKeyword; }
	}
	public class EXTERNElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.EXTERN");
		private final Keyword cExternKeyword = (Keyword)rule.eContents().get(1);
		
		////"extern"				{ return(EXTERN); }
		// EXTERN:
		//	"extern";
		@Override public ParserRule getRule() { return rule; }
		
		//"extern"
		public Keyword getExternKeyword() { return cExternKeyword; }
	}
	public class FLOATElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.FLOAT");
		private final Keyword cFloatKeyword = (Keyword)rule.eContents().get(1);
		
		////"float"					{ return(FLOAT); }
		// FLOAT:
		//	"float";
		@Override public ParserRule getRule() { return rule; }
		
		//"float"
		public Keyword getFloatKeyword() { return cFloatKeyword; }
	}
	public class FORElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.FOR");
		private final Keyword cForKeyword = (Keyword)rule.eContents().get(1);
		
		////"for"					{ return(FOR); }
		// FOR:
		//	"for";
		@Override public ParserRule getRule() { return rule; }
		
		//"for"
		public Keyword getForKeyword() { return cForKeyword; }
	}
	public class GOTOElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.GOTO");
		private final Keyword cGotoKeyword = (Keyword)rule.eContents().get(1);
		
		////"goto"					{ return(GOTO); }
		// GOTO:
		//	"goto";
		@Override public ParserRule getRule() { return rule; }
		
		//"goto"
		public Keyword getGotoKeyword() { return cGotoKeyword; }
	}
	public class IFElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.IF");
		private final Keyword cIfKeyword = (Keyword)rule.eContents().get(1);
		
		////"if"					{ return(IF); }
		// IF:
		//	"if";
		@Override public ParserRule getRule() { return rule; }
		
		//"if"
		public Keyword getIfKeyword() { return cIfKeyword; }
	}
	public class INLINEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.INLINE");
		private final Keyword cInlineKeyword = (Keyword)rule.eContents().get(1);
		
		////"inline"				{ return(INLINE); }
		// INLINE:
		//	"inline";
		@Override public ParserRule getRule() { return rule; }
		
		//"inline"
		public Keyword getInlineKeyword() { return cInlineKeyword; }
	}
	public class INTNAMEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.INTNAME");
		private final Keyword cIntKeyword = (Keyword)rule.eContents().get(1);
		
		////"int"					{ return(INT); }
		// INTNAME:
		//	"int";
		@Override public ParserRule getRule() { return rule; }
		
		//"int"
		public Keyword getIntKeyword() { return cIntKeyword; }
	}
	public class LONGElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.LONG");
		private final Keyword cLongKeyword = (Keyword)rule.eContents().get(1);
		
		////  <-- Aqui nao deixou acho que int ja Ã© um terminal que pode usar que nem ID
		// //"long"					{ return(LONG); }
		// LONG:
		//	"long";
		@Override public ParserRule getRule() { return rule; }
		
		//"long"
		public Keyword getLongKeyword() { return cLongKeyword; }
	}
	public class REGISTERElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.REGISTER");
		private final Keyword cRegisterKeyword = (Keyword)rule.eContents().get(1);
		
		////"register"				{ return(REGISTER); }
		// REGISTER:
		//	"register";
		@Override public ParserRule getRule() { return rule; }
		
		//"register"
		public Keyword getRegisterKeyword() { return cRegisterKeyword; }
	}
	public class RESTRICTElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.RESTRICT");
		private final Keyword cRestrictKeyword = (Keyword)rule.eContents().get(1);
		
		////"restrict"				{ return(RESTRICT); }
		// RESTRICT:
		//	"restrict";
		@Override public ParserRule getRule() { return rule; }
		
		//"restrict"
		public Keyword getRestrictKeyword() { return cRestrictKeyword; }
	}
	public class RETURNElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.RETURN");
		private final Keyword cReturnKeyword = (Keyword)rule.eContents().get(1);
		
		////"return"				{ return(RETURN); }
		// RETURN:
		//	"return";
		@Override public ParserRule getRule() { return rule; }
		
		//"return"
		public Keyword getReturnKeyword() { return cReturnKeyword; }
	}
	public class SHORTElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.SHORT");
		private final Keyword cShortKeyword = (Keyword)rule.eContents().get(1);
		
		////"short"					{ return(SHORT); }
		// SHORT:
		//	"short";
		@Override public ParserRule getRule() { return rule; }
		
		//"short"
		public Keyword getShortKeyword() { return cShortKeyword; }
	}
	public class SIGNEDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.SIGNED");
		private final Keyword cSignedKeyword = (Keyword)rule.eContents().get(1);
		
		////"signed"				{ return(SIGNED); }
		// SIGNED:
		//	"signed";
		@Override public ParserRule getRule() { return rule; }
		
		//"signed"
		public Keyword getSignedKeyword() { return cSignedKeyword; }
	}
	public class SIZEOFElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.SIZEOF");
		private final Keyword cSizeofKeyword = (Keyword)rule.eContents().get(1);
		
		////"sizeof"				{ return(SIZEOF); }
		// SIZEOF:
		//	"sizeof";
		@Override public ParserRule getRule() { return rule; }
		
		//"sizeof"
		public Keyword getSizeofKeyword() { return cSizeofKeyword; }
	}
	public class STATICElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.STATIC");
		private final Keyword cStaticKeyword = (Keyword)rule.eContents().get(1);
		
		////"static"				{ return(STATIC); }
		// STATIC:
		//	"static";
		@Override public ParserRule getRule() { return rule; }
		
		//"static"
		public Keyword getStaticKeyword() { return cStaticKeyword; }
	}
	public class STRUCTElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.STRUCT");
		private final Keyword cStructKeyword = (Keyword)rule.eContents().get(1);
		
		////"struct"				{ return(STRUCT); }
		// STRUCT:
		//	"struct";
		@Override public ParserRule getRule() { return rule; }
		
		//"struct"
		public Keyword getStructKeyword() { return cStructKeyword; }
	}
	public class SWITCHElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.SWITCH");
		private final Keyword cSwitchKeyword = (Keyword)rule.eContents().get(1);
		
		////"switch"				{ return(SWITCH); }
		// SWITCH:
		//	"switch";
		@Override public ParserRule getRule() { return rule; }
		
		//"switch"
		public Keyword getSwitchKeyword() { return cSwitchKeyword; }
	}
	public class TYPEDEFElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.TYPEDEF");
		private final Keyword cTypedefKeyword = (Keyword)rule.eContents().get(1);
		
		////"typedef"				{ return(TYPEDEF); }
		// TYPEDEF:
		//	"typedef";
		@Override public ParserRule getRule() { return rule; }
		
		//"typedef"
		public Keyword getTypedefKeyword() { return cTypedefKeyword; }
	}
	public class UNIONElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.UNION");
		private final Keyword cUnionKeyword = (Keyword)rule.eContents().get(1);
		
		////"union"					{ return(UNION); }
		// UNION:
		//	"union";
		@Override public ParserRule getRule() { return rule; }
		
		//"union"
		public Keyword getUnionKeyword() { return cUnionKeyword; }
	}
	public class UNSIGNEDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.UNSIGNED");
		private final Keyword cUnsignedKeyword = (Keyword)rule.eContents().get(1);
		
		////"unsigned"				{ return(UNSIGNED); }
		// UNSIGNED:
		//	"unsigned";
		@Override public ParserRule getRule() { return rule; }
		
		//"unsigned"
		public Keyword getUnsignedKeyword() { return cUnsignedKeyword; }
	}
	public class VOIDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.VOID");
		private final Keyword cVoidKeyword = (Keyword)rule.eContents().get(1);
		
		////"void"					{ return(VOID); }
		// VOID:
		//	"void";
		@Override public ParserRule getRule() { return rule; }
		
		//"void"
		public Keyword getVoidKeyword() { return cVoidKeyword; }
	}
	public class VOLATILEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.VOLATILE");
		private final Keyword cVolatileKeyword = (Keyword)rule.eContents().get(1);
		
		////"volatile"				{ return(VOLATILE); }
		// VOLATILE:
		//	"volatile";
		@Override public ParserRule getRule() { return rule; }
		
		//"volatile"
		public Keyword getVolatileKeyword() { return cVolatileKeyword; }
	}
	public class WHILEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.WHILE");
		private final Keyword cWhileKeyword = (Keyword)rule.eContents().get(1);
		
		////"while"					{ return(WHILE); }
		// WHILE:
		//	"while";
		@Override public ParserRule getRule() { return rule; }
		
		//"while"
		public Keyword getWhileKeyword() { return cWhileKeyword; }
	}
	public class ALIGNASElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.ALIGNAS");
		private final Keyword c_AlignasKeyword = (Keyword)rule.eContents().get(1);
		
		////"_Alignas"                              { return ALIGNAS; }
		// ALIGNAS:
		//	"_Alignas";
		@Override public ParserRule getRule() { return rule; }
		
		//"_Alignas"
		public Keyword get_AlignasKeyword() { return c_AlignasKeyword; }
	}
	public class ALIGNOFElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.ALIGNOF");
		private final Keyword c_AlignofKeyword = (Keyword)rule.eContents().get(1);
		
		////"_Alignof"                              { return ALIGNOF; }
		// ALIGNOF:
		//	"_Alignof";
		@Override public ParserRule getRule() { return rule; }
		
		//"_Alignof"
		public Keyword get_AlignofKeyword() { return c_AlignofKeyword; }
	}
	public class ATOMICElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.ATOMIC");
		private final Keyword c_AtomicKeyword = (Keyword)rule.eContents().get(1);
		
		////"_Atomic"                               { return ATOMIC; }
		// ATOMIC:
		//	"_Atomic";
		@Override public ParserRule getRule() { return rule; }
		
		//"_Atomic"
		public Keyword get_AtomicKeyword() { return c_AtomicKeyword; }
	}
	public class BOOLElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.BOOL");
		private final Keyword c_BoolKeyword = (Keyword)rule.eContents().get(1);
		
		////"_Bool"                                 { return BOOL; }
		// BOOL:
		//	"_Bool";
		@Override public ParserRule getRule() { return rule; }
		
		//"_Bool"
		public Keyword get_BoolKeyword() { return c_BoolKeyword; }
	}
	public class COMPLEXElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.COMPLEX");
		private final Keyword c_ComplexKeyword = (Keyword)rule.eContents().get(1);
		
		////"_Complex"                              { return COMPLEX; }
		// COMPLEX:
		//	"_Complex";
		@Override public ParserRule getRule() { return rule; }
		
		//"_Complex"
		public Keyword get_ComplexKeyword() { return c_ComplexKeyword; }
	}
	public class GENERICElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.GENERIC");
		private final Keyword c_GenericKeyword = (Keyword)rule.eContents().get(1);
		
		////"_Generic"                              { return GENERIC; }
		// GENERIC:
		//	"_Generic";
		@Override public ParserRule getRule() { return rule; }
		
		//"_Generic"
		public Keyword get_GenericKeyword() { return c_GenericKeyword; }
	}
	public class IMAGINARYElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.IMAGINARY");
		private final Keyword c_ImaginaryKeyword = (Keyword)rule.eContents().get(1);
		
		////"_Imaginary"                            { return IMAGINARY; }
		// IMAGINARY:
		//	"_Imaginary";
		@Override public ParserRule getRule() { return rule; }
		
		//"_Imaginary"
		public Keyword get_ImaginaryKeyword() { return c_ImaginaryKeyword; }
	}
	public class NORETURNElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.NORETURN");
		private final Keyword c_NoreturnKeyword = (Keyword)rule.eContents().get(1);
		
		////"_Noreturn"                             { return NORETURN; }
		// NORETURN:
		//	"_Noreturn";
		@Override public ParserRule getRule() { return rule; }
		
		//"_Noreturn"
		public Keyword get_NoreturnKeyword() { return c_NoreturnKeyword; }
	}
	public class STATIC_ASSERTElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.STATIC_ASSERT");
		private final Keyword c_Static_assertKeyword = (Keyword)rule.eContents().get(1);
		
		////"_Static_assert"                        { return STATIC_ASSERT; }
		// STATIC_ASSERT:
		//	"_Static_assert";
		@Override public ParserRule getRule() { return rule; }
		
		//"_Static_assert"
		public Keyword get_Static_assertKeyword() { return c_Static_assertKeyword; }
	}
	public class THREAD_LOCALElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.THREAD_LOCAL");
		private final Keyword c_Thread_localKeyword = (Keyword)rule.eContents().get(1);
		
		////"_Thread_local"                         { return THREAD_LOCAL; }
		// THREAD_LOCAL:
		//	"_Thread_local";
		@Override public ParserRule getRule() { return rule; }
		
		//"_Thread_local"
		public Keyword get_Thread_localKeyword() { return c_Thread_localKeyword; }
	}
	public class FUNC_NAMEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.FUNC_NAME");
		private final Keyword c__func__Keyword = (Keyword)rule.eContents().get(1);
		
		////"__func__"                              { return FUNC_NAME; }
		// FUNC_NAME:
		//	"__func__";
		@Override public ParserRule getRule() { return rule; }
		
		//"__func__"
		public Keyword get__func__Keyword() { return c__func__Keyword; }
	}
	
	
	private final ModelElements pModel;
	private final Primary_expressionElements pPrimary_expression;
	private final Atomic2Elements pAtomic2;
	private final ConstantElements pConstant;
	private final Enumeration_constantElements pEnumeration_constant;
	private final String_novaElements pString_nova;
	private final Generic_selectionElements pGeneric_selection;
	private final Generic_assoc_listElements pGeneric_assoc_list;
	private final Generic_associationElements pGeneric_association;
	private final Postfix_expressionElements pPostfix_expression;
	private final Postfix_expression2Elements pPostfix_expression2;
	private final Argument_expression_listElements pArgument_expression_list;
	private final Unary_expressionElements pUnary_expression;
	private final Unary_operatorElements pUnary_operator;
	private final Cast_expressionElements pCast_expression;
	private final Multiplicative_expressionElements pMultiplicative_expression;
	private final MUL_OPElements pMUL_OP;
	private final Additive_expressionElements pAdditive_expression;
	private final Shift_expressionElements pShift_expression;
	private final Shift_opElements pShift_op;
	private final Relational_expressionElements pRelational_expression;
	private final Relational_opElements pRelational_op;
	private final Equality_expressionElements pEquality_expression;
	private final And_expressionElements pAnd_expression;
	private final Exclusive_or_expressionElements pExclusive_or_expression;
	private final Inclusive_or_expressionElements pInclusive_or_expression;
	private final Logical_and_expressionElements pLogical_and_expression;
	private final Logical_or_expressionElements pLogical_or_expression;
	private final Simple_expressionElements pSimple_expression;
	private final Conditional_expressionElements pConditional_expression;
	private final Assignment_expressionElements pAssignment_expression;
	private final Assignment_operatorElements pAssignment_operator;
	private final ExpressionElements pExpression;
	private final Expression2Elements pExpression2;
	private final Constant_expressionElements pConstant_expression;
	private final DeclarationElements pDeclaration;
	private final Declaration_specifiersElements pDeclaration_specifiers;
	private final Init_declarator_listElements pInit_declarator_list;
	private final Init_declarator_list2Elements pInit_declarator_list2;
	private final Init_declaratorElements pInit_declarator;
	private final Storage_class_specifierElements pStorage_class_specifier;
	private final Type_specifierElements pType_specifier;
	private final Struct_or_union_specifierElements pStruct_or_union_specifier;
	private final Struct_or_unionElements pStruct_or_union;
	private final Struct_declaration_listElements pStruct_declaration_list;
	private final Struct_declaration_list2Elements pStruct_declaration_list2;
	private final Struct_declarationElements pStruct_declaration;
	private final Specifier_qualifier_listElements pSpecifier_qualifier_list;
	private final Struct_declarator_listElements pStruct_declarator_list;
	private final Struct_declarator_list2Elements pStruct_declarator_list2;
	private final Struct_declaratorElements pStruct_declarator;
	private final Enum_specifierElements pEnum_specifier;
	private final Enumerator_listElements pEnumerator_list;
	private final Enumerator_list2Elements pEnumerator_list2;
	private final EnumeratorElements pEnumerator;
	private final Atomic_type_specifierElements pAtomic_type_specifier;
	private final Type_qualifierElements pType_qualifier;
	private final Function_specifierElements pFunction_specifier;
	private final Alignment_specifierElements pAlignment_specifier;
	private final DeclaratorElements pDeclarator;
	private final Direct_declaratorElements pDirect_declarator;
	private final Direct_declarator2Elements pDirect_declarator2;
	private final PointerElements pPointer;
	private final Type_qualifier_listElements pType_qualifier_list;
	private final Type_qualifier_list2Elements pType_qualifier_list2;
	private final Parameter_type_listElements pParameter_type_list;
	private final Parameter_listElements pParameter_list;
	private final Parameter_list2Elements pParameter_list2;
	private final Parameter_declarationElements pParameter_declaration;
	private final Identifier_listElements pIdentifier_list;
	private final Identifier_list2Elements pIdentifier_list2;
	private final Type_nameElements pType_name;
	private final Abstract_declaratorElements pAbstract_declarator;
	private final Direct_abstract_declaratorElements pDirect_abstract_declarator;
	private final Direct_abstract_declarator2Elements pDirect_abstract_declarator2;
	private final InitializerElements pInitializer;
	private final Initializer_listElements pInitializer_list;
	private final Initializer_list2Elements pInitializer_list2;
	private final DesignationElements pDesignation;
	private final Designator_listElements pDesignator_list;
	private final Designator_list2Elements pDesignator_list2;
	private final DesignatorElements pDesignator;
	private final Static_assert_declarationElements pStatic_assert_declaration;
	private final StatementElements pStatement;
	private final Labeled_statementElements pLabeled_statement;
	private final Compound_statementElements pCompound_statement;
	private final Block_itemElements pBlock_item;
	private final Expression_statementElements pExpression_statement;
	private final Selection_statementElements pSelection_statement;
	private final Iteration_statementElements pIteration_statement;
	private final Jump_statementElements pJump_statement;
	private final Translation_unitElements pTranslation_unit;
	private final External_declarationElements pExternal_declaration;
	private final Function_definitionElements pFunction_definition;
	private final Declaration_listElements pDeclaration_list;
	private final Declaration_list2Elements pDeclaration_list2;
	private final TerminalRule tO;
	private final TerminalRule tD;
	private final TerminalRule tNZ;
	private final TerminalRule tL;
	private final TerminalRule tA;
	private final TerminalRule tH;
	private final TerminalRule tHP;
	private final TerminalRule tE;
	private final TerminalRule tP;
	private final TerminalRule tFS;
	private final TerminalRule tIS;
	private final TerminalRule tCP;
	private final TerminalRule tSP;
	private final TerminalRule tES;
	private final TerminalRule tWS;
	private final AUTOElements pAUTO;
	private final BREAKElements pBREAK;
	private final CASEElements pCASE;
	private final CHARElements pCHAR;
	private final CONSTElements pCONST;
	private final CONTINUEElements pCONTINUE;
	private final DEFAULTElements pDEFAULT;
	private final DOElements pDO;
	private final DOUBLEElements pDOUBLE;
	private final ELSEElements pELSE;
	private final ENUMElements pENUM;
	private final EXTERNElements pEXTERN;
	private final FLOATElements pFLOAT;
	private final FORElements pFOR;
	private final GOTOElements pGOTO;
	private final IFElements pIF;
	private final INLINEElements pINLINE;
	private final INTNAMEElements pINTNAME;
	private final LONGElements pLONG;
	private final REGISTERElements pREGISTER;
	private final RESTRICTElements pRESTRICT;
	private final RETURNElements pRETURN;
	private final SHORTElements pSHORT;
	private final SIGNEDElements pSIGNED;
	private final SIZEOFElements pSIZEOF;
	private final STATICElements pSTATIC;
	private final STRUCTElements pSTRUCT;
	private final SWITCHElements pSWITCH;
	private final TYPEDEFElements pTYPEDEF;
	private final UNIONElements pUNION;
	private final UNSIGNEDElements pUNSIGNED;
	private final VOIDElements pVOID;
	private final VOLATILEElements pVOLATILE;
	private final WHILEElements pWHILE;
	private final ALIGNASElements pALIGNAS;
	private final ALIGNOFElements pALIGNOF;
	private final ATOMICElements pATOMIC;
	private final BOOLElements pBOOL;
	private final COMPLEXElements pCOMPLEX;
	private final GENERICElements pGENERIC;
	private final IMAGINARYElements pIMAGINARY;
	private final NORETURNElements pNORETURN;
	private final STATIC_ASSERTElements pSTATIC_ASSERT;
	private final THREAD_LOCALElements pTHREAD_LOCAL;
	private final FUNC_NAMEElements pFUNC_NAME;
	private final TerminalRule tELLIPSIS;
	private final TerminalRule tOR_ASSIGN;
	private final TerminalRule tXOR_ASSIGN;
	private final TerminalRule tAND_ASSIGN;
	private final TerminalRule tRIGHT_ASSIGN;
	private final TerminalRule tLEFT_ASSIGN;
	private final TerminalRule tSUB_ASSIGN;
	private final TerminalRule tADD_ASSIGN;
	private final TerminalRule tMOD_ASSIGN;
	private final TerminalRule tDIV_ASSIGN;
	private final TerminalRule tMUL_ASSIGN;
	private final TerminalRule tOR_OP;
	private final TerminalRule tAND_OP;
	private final TerminalRule tNE_OP;
	private final TerminalRule tEQ_OP;
	private final TerminalRule tGE_OP;
	private final TerminalRule tLE_OP;
	private final TerminalRule tL_OP;
	private final TerminalRule tG_OP;
	private final TerminalRule tRIGHT_OP;
	private final TerminalRule tLEFT_OP;
	private final TerminalRule tINC_OP;
	private final TerminalRule tDEC_OP;
	private final TerminalRule tPTR_OP;
	private final TerminalRule tSTRING_LITERAL;
	private final TerminalRule tF_CONSTANT;
	private final TerminalRule tI_CONSTANT;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MyDslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pPrimary_expression = new Primary_expressionElements();
		this.pAtomic2 = new Atomic2Elements();
		this.pConstant = new ConstantElements();
		this.pEnumeration_constant = new Enumeration_constantElements();
		this.pString_nova = new String_novaElements();
		this.pGeneric_selection = new Generic_selectionElements();
		this.pGeneric_assoc_list = new Generic_assoc_listElements();
		this.pGeneric_association = new Generic_associationElements();
		this.pPostfix_expression = new Postfix_expressionElements();
		this.pPostfix_expression2 = new Postfix_expression2Elements();
		this.pArgument_expression_list = new Argument_expression_listElements();
		this.pUnary_expression = new Unary_expressionElements();
		this.pUnary_operator = new Unary_operatorElements();
		this.pCast_expression = new Cast_expressionElements();
		this.pMultiplicative_expression = new Multiplicative_expressionElements();
		this.pMUL_OP = new MUL_OPElements();
		this.pAdditive_expression = new Additive_expressionElements();
		this.pShift_expression = new Shift_expressionElements();
		this.pShift_op = new Shift_opElements();
		this.pRelational_expression = new Relational_expressionElements();
		this.pRelational_op = new Relational_opElements();
		this.pEquality_expression = new Equality_expressionElements();
		this.pAnd_expression = new And_expressionElements();
		this.pExclusive_or_expression = new Exclusive_or_expressionElements();
		this.pInclusive_or_expression = new Inclusive_or_expressionElements();
		this.pLogical_and_expression = new Logical_and_expressionElements();
		this.pLogical_or_expression = new Logical_or_expressionElements();
		this.pSimple_expression = new Simple_expressionElements();
		this.pConditional_expression = new Conditional_expressionElements();
		this.pAssignment_expression = new Assignment_expressionElements();
		this.pAssignment_operator = new Assignment_operatorElements();
		this.pExpression = new ExpressionElements();
		this.pExpression2 = new Expression2Elements();
		this.pConstant_expression = new Constant_expressionElements();
		this.pDeclaration = new DeclarationElements();
		this.pDeclaration_specifiers = new Declaration_specifiersElements();
		this.pInit_declarator_list = new Init_declarator_listElements();
		this.pInit_declarator_list2 = new Init_declarator_list2Elements();
		this.pInit_declarator = new Init_declaratorElements();
		this.pStorage_class_specifier = new Storage_class_specifierElements();
		this.pType_specifier = new Type_specifierElements();
		this.pStruct_or_union_specifier = new Struct_or_union_specifierElements();
		this.pStruct_or_union = new Struct_or_unionElements();
		this.pStruct_declaration_list = new Struct_declaration_listElements();
		this.pStruct_declaration_list2 = new Struct_declaration_list2Elements();
		this.pStruct_declaration = new Struct_declarationElements();
		this.pSpecifier_qualifier_list = new Specifier_qualifier_listElements();
		this.pStruct_declarator_list = new Struct_declarator_listElements();
		this.pStruct_declarator_list2 = new Struct_declarator_list2Elements();
		this.pStruct_declarator = new Struct_declaratorElements();
		this.pEnum_specifier = new Enum_specifierElements();
		this.pEnumerator_list = new Enumerator_listElements();
		this.pEnumerator_list2 = new Enumerator_list2Elements();
		this.pEnumerator = new EnumeratorElements();
		this.pAtomic_type_specifier = new Atomic_type_specifierElements();
		this.pType_qualifier = new Type_qualifierElements();
		this.pFunction_specifier = new Function_specifierElements();
		this.pAlignment_specifier = new Alignment_specifierElements();
		this.pDeclarator = new DeclaratorElements();
		this.pDirect_declarator = new Direct_declaratorElements();
		this.pDirect_declarator2 = new Direct_declarator2Elements();
		this.pPointer = new PointerElements();
		this.pType_qualifier_list = new Type_qualifier_listElements();
		this.pType_qualifier_list2 = new Type_qualifier_list2Elements();
		this.pParameter_type_list = new Parameter_type_listElements();
		this.pParameter_list = new Parameter_listElements();
		this.pParameter_list2 = new Parameter_list2Elements();
		this.pParameter_declaration = new Parameter_declarationElements();
		this.pIdentifier_list = new Identifier_listElements();
		this.pIdentifier_list2 = new Identifier_list2Elements();
		this.pType_name = new Type_nameElements();
		this.pAbstract_declarator = new Abstract_declaratorElements();
		this.pDirect_abstract_declarator = new Direct_abstract_declaratorElements();
		this.pDirect_abstract_declarator2 = new Direct_abstract_declarator2Elements();
		this.pInitializer = new InitializerElements();
		this.pInitializer_list = new Initializer_listElements();
		this.pInitializer_list2 = new Initializer_list2Elements();
		this.pDesignation = new DesignationElements();
		this.pDesignator_list = new Designator_listElements();
		this.pDesignator_list2 = new Designator_list2Elements();
		this.pDesignator = new DesignatorElements();
		this.pStatic_assert_declaration = new Static_assert_declarationElements();
		this.pStatement = new StatementElements();
		this.pLabeled_statement = new Labeled_statementElements();
		this.pCompound_statement = new Compound_statementElements();
		this.pBlock_item = new Block_itemElements();
		this.pExpression_statement = new Expression_statementElements();
		this.pSelection_statement = new Selection_statementElements();
		this.pIteration_statement = new Iteration_statementElements();
		this.pJump_statement = new Jump_statementElements();
		this.pTranslation_unit = new Translation_unitElements();
		this.pExternal_declaration = new External_declarationElements();
		this.pFunction_definition = new Function_definitionElements();
		this.pDeclaration_list = new Declaration_listElements();
		this.pDeclaration_list2 = new Declaration_list2Elements();
		this.tO = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.O");
		this.tD = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.D");
		this.tNZ = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.NZ");
		this.tL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.L");
		this.tA = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.A");
		this.tH = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.H");
		this.tHP = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.HP");
		this.tE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.E");
		this.tP = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.P");
		this.tFS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.FS");
		this.tIS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.IS");
		this.tCP = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.CP");
		this.tSP = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.SP");
		this.tES = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.ES");
		this.tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.WS");
		this.pAUTO = new AUTOElements();
		this.pBREAK = new BREAKElements();
		this.pCASE = new CASEElements();
		this.pCHAR = new CHARElements();
		this.pCONST = new CONSTElements();
		this.pCONTINUE = new CONTINUEElements();
		this.pDEFAULT = new DEFAULTElements();
		this.pDO = new DOElements();
		this.pDOUBLE = new DOUBLEElements();
		this.pELSE = new ELSEElements();
		this.pENUM = new ENUMElements();
		this.pEXTERN = new EXTERNElements();
		this.pFLOAT = new FLOATElements();
		this.pFOR = new FORElements();
		this.pGOTO = new GOTOElements();
		this.pIF = new IFElements();
		this.pINLINE = new INLINEElements();
		this.pINTNAME = new INTNAMEElements();
		this.pLONG = new LONGElements();
		this.pREGISTER = new REGISTERElements();
		this.pRESTRICT = new RESTRICTElements();
		this.pRETURN = new RETURNElements();
		this.pSHORT = new SHORTElements();
		this.pSIGNED = new SIGNEDElements();
		this.pSIZEOF = new SIZEOFElements();
		this.pSTATIC = new STATICElements();
		this.pSTRUCT = new STRUCTElements();
		this.pSWITCH = new SWITCHElements();
		this.pTYPEDEF = new TYPEDEFElements();
		this.pUNION = new UNIONElements();
		this.pUNSIGNED = new UNSIGNEDElements();
		this.pVOID = new VOIDElements();
		this.pVOLATILE = new VOLATILEElements();
		this.pWHILE = new WHILEElements();
		this.pALIGNAS = new ALIGNASElements();
		this.pALIGNOF = new ALIGNOFElements();
		this.pATOMIC = new ATOMICElements();
		this.pBOOL = new BOOLElements();
		this.pCOMPLEX = new COMPLEXElements();
		this.pGENERIC = new GENERICElements();
		this.pIMAGINARY = new IMAGINARYElements();
		this.pNORETURN = new NORETURNElements();
		this.pSTATIC_ASSERT = new STATIC_ASSERTElements();
		this.pTHREAD_LOCAL = new THREAD_LOCALElements();
		this.pFUNC_NAME = new FUNC_NAMEElements();
		this.tELLIPSIS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.ELLIPSIS");
		this.tOR_ASSIGN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.OR_ASSIGN");
		this.tXOR_ASSIGN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.XOR_ASSIGN");
		this.tAND_ASSIGN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.AND_ASSIGN");
		this.tRIGHT_ASSIGN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.RIGHT_ASSIGN");
		this.tLEFT_ASSIGN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.LEFT_ASSIGN");
		this.tSUB_ASSIGN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.SUB_ASSIGN");
		this.tADD_ASSIGN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.ADD_ASSIGN");
		this.tMOD_ASSIGN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.MOD_ASSIGN");
		this.tDIV_ASSIGN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.DIV_ASSIGN");
		this.tMUL_ASSIGN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.MUL_ASSIGN");
		this.tOR_OP = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.OR_OP");
		this.tAND_OP = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.AND_OP");
		this.tNE_OP = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.NE_OP");
		this.tEQ_OP = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.EQ_OP");
		this.tGE_OP = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.GE_OP");
		this.tLE_OP = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.LE_OP");
		this.tL_OP = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.L_OP");
		this.tG_OP = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.G_OP");
		this.tRIGHT_OP = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.RIGHT_OP");
		this.tLEFT_OP = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.LEFT_OP");
		this.tINC_OP = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.INC_OP");
		this.tDEC_OP = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.DEC_OP");
		this.tPTR_OP = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.PTR_OP");
		this.tSTRING_LITERAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.STRING_LITERAL");
		this.tF_CONSTANT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.F_CONSTANT");
		this.tI_CONSTANT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.I_CONSTANT");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.mydsl.MyDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	declaracoes+=translation_unit*;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	////Greeting;
	// //Greeting:
	// //'Ola'name=ID'!';
	// primary_expression simple_expression:
	//	'(' simple_expression ')' | atomic2
	public Primary_expressionElements getPrimary_expressionAccess() {
		return pPrimary_expression;
	}
	
	public ParserRule getPrimary_expressionRule() {
		return getPrimary_expressionAccess().getRule();
	}
	
	//atomic2 simple_expression:
	//	{variableRef} variable=[direct_declarator] | {intType} value=I_CONSTANT | {floatType} value=F_CONSTANT | {stringType}
	//	value=string_nova | {booleanType} value=("true" | "false")
	public Atomic2Elements getAtomic2Access() {
		return pAtomic2;
	}
	
	public ParserRule getAtomic2Rule() {
		return getAtomic2Access().getRule();
	}
	
	////TODO VER se esse enum Ã© esse enum mesmo
	// constant:
	//	i_constant=I_CONSTANT / * includes character_constant * / | f_constant=F_CONSTANT | enumt=ENUM
	//	/ * after it has been defined as such * / / * AQUI ERA ENUMERATION_CONSTANT troquei pro terminal ENUM * /;
	public ConstantElements getConstantAccess() {
		return pConstant;
	}
	
	public ParserRule getConstantRule() {
		return getConstantAccess().getRule();
	}
	
	//enumeration_constant / * before it has been defined as such * /:
	//	identifier=ID;
	public Enumeration_constantElements getEnumeration_constantAccess() {
		return pEnumeration_constant;
	}
	
	public ParserRule getEnumeration_constantRule() {
		return getEnumeration_constantAccess().getRule();
	}
	
	//string_nova / * Na gramatica se chama String mais nao pode ter esse nome * /:
	//	string_literal=STRING_LITERAL | func_name=FUNC_NAME;
	public String_novaElements getString_novaAccess() {
		return pString_nova;
	}
	
	public ParserRule getString_novaRule() {
		return getString_novaAccess().getRule();
	}
	
	//generic_selection:
	//	generic=GENERIC '(' assignment_expression=assignment_expression ',' generic_assoc_list=generic_assoc_list ')';
	public Generic_selectionElements getGeneric_selectionAccess() {
		return pGeneric_selection;
	}
	
	public ParserRule getGeneric_selectionRule() {
		return getGeneric_selectionAccess().getRule();
	}
	
	//generic_assoc_list:
	//	generic_association=generic_association (',' generic_list+=generic_association)*;
	public Generic_assoc_listElements getGeneric_assoc_listAccess() {
		return pGeneric_assoc_list;
	}
	
	public ParserRule getGeneric_assoc_listRule() {
		return getGeneric_assoc_listAccess().getRule();
	}
	
	//generic_association:
	//	type_name=type_name ':' assignment_expression=assignment_expression | default=DEFAULT ':'
	//	assignment_expression=assignment_expression;
	public Generic_associationElements getGeneric_associationAccess() {
		return pGeneric_association;
	}
	
	public ParserRule getGeneric_associationRule() {
		return getGeneric_associationAccess().getRule();
	}
	
	//postfix_expression:
	//	primary_expression=primary_expression postifx_expres+=postfix_expression2* | '(' type_name=type_name ')' '{'
	//	initializer_list=initializer_list '}' postifx_expres+=postfix_expression2* | '(' type_name=type_name ')' '{'
	//	initializer_list=initializer_list ',' '}' postifx_expres+=postfix_expression2*;
	public Postfix_expressionElements getPostfix_expressionAccess() {
		return pPostfix_expression;
	}
	
	public ParserRule getPostfix_expressionRule() {
		return getPostfix_expressionAccess().getRule();
	}
	
	//postfix_expression2:
	//	'[' expression ']' | '(' ')' | '(' argument_expression_list ')' | '.' ID | PTR_OP ID | INC_OP | DEC_OP;
	public Postfix_expression2Elements getPostfix_expression2Access() {
		return pPostfix_expression2;
	}
	
	public ParserRule getPostfix_expression2Rule() {
		return getPostfix_expression2Access().getRule();
	}
	
	//argument_expression_list:
	//	assignment_expression=assignment_expression (',' list+=assignment_expression)*;
	public Argument_expression_listElements getArgument_expression_listAccess() {
		return pArgument_expression_list;
	}
	
	public ParserRule getArgument_expression_listRule() {
		return getArgument_expression_listAccess().getRule();
	}
	
	////nÃ£o vou considerar na anÃ¡lise semÃ¢ntica
	// unary_expression:
	//	postfix_expression=postfix_expression | inc_op=INC_OP unary_expression=unary_expression | dec_op=DEC_OP
	//	unary_expression=unary_expression | unary_operator=unary_operator cast_expression=cast_expression | sizeof=SIZEOF
	//	unary_expression=unary_expression | sizeof=SIZEOF '(' type_name=type_name ')' | alignof=ALIGNOF '('
	//	type_name=type_name ')';
	public Unary_expressionElements getUnary_expressionAccess() {
		return pUnary_expression;
	}
	
	public ParserRule getUnary_expressionRule() {
		return getUnary_expressionAccess().getRule();
	}
	
	//unary_operator:
	//	'&' | '*' | '+' | '-' | '~' | '!';
	public Unary_operatorElements getUnary_operatorAccess() {
		return pUnary_operator;
	}
	
	public ParserRule getUnary_operatorRule() {
		return getUnary_operatorAccess().getRule();
	}
	
	////nÃ£o vou considerar o cast na anÃ¡lise semÃ¢ntica
	// cast_expression simple_expression:
	//	unary_expression | '(' type_name=type_name ')' cast_expression=cast_expression
	public Cast_expressionElements getCast_expressionAccess() {
		return pCast_expression;
	}
	
	public ParserRule getCast_expressionRule() {
		return getCast_expressionAccess().getRule();
	}
	
	//multiplicative_expression simple_expression:
	//	primary_expression ({MUL.left=current} op=MUL_OP right=primary_expression)*
	public Multiplicative_expressionElements getMultiplicative_expressionAccess() {
		return pMultiplicative_expression;
	}
	
	public ParserRule getMultiplicative_expressionRule() {
		return getMultiplicative_expressionAccess().getRule();
	}
	
	//MUL_OP:
	//	'*' | '/' | '%';
	public MUL_OPElements getMUL_OPAccess() {
		return pMUL_OP;
	}
	
	public ParserRule getMUL_OPRule() {
		return getMUL_OPAccess().getRule();
	}
	
	//additive_expression simple_expression:
	//	multiplicative_expression ({ADD.left=current} op=('+' | '-') right=multiplicative_expression)*
	public Additive_expressionElements getAdditive_expressionAccess() {
		return pAdditive_expression;
	}
	
	public ParserRule getAdditive_expressionRule() {
		return getAdditive_expressionAccess().getRule();
	}
	
	//shift_expression simple_expression:
	//	additive_expression ({SHF.left=current} op=shift_op right=additive_expression)*
	public Shift_expressionElements getShift_expressionAccess() {
		return pShift_expression;
	}
	
	public ParserRule getShift_expressionRule() {
		return getShift_expressionAccess().getRule();
	}
	
	//shift_op:
	//	LEFT_OP | RIGHT_OP;
	public Shift_opElements getShift_opAccess() {
		return pShift_op;
	}
	
	public ParserRule getShift_opRule() {
		return getShift_opAccess().getRule();
	}
	
	//relational_expression simple_expression:
	//	shift_expression ({REL.left=current} op=relational_op right=shift_expression)*
	public Relational_expressionElements getRelational_expressionAccess() {
		return pRelational_expression;
	}
	
	public ParserRule getRelational_expressionRule() {
		return getRelational_expressionAccess().getRule();
	}
	
	//relational_op:
	//	L_OP | G_OP | LE_OP | GE_OP;
	public Relational_opElements getRelational_opAccess() {
		return pRelational_op;
	}
	
	public ParserRule getRelational_opRule() {
		return getRelational_opAccess().getRule();
	}
	
	//equality_expression simple_expression:
	//	relational_expression ({EQL.left=current} op=(EQ_OP | NE_OP) right=relational_expression)*
	public Equality_expressionElements getEquality_expressionAccess() {
		return pEquality_expression;
	}
	
	public ParserRule getEquality_expressionRule() {
		return getEquality_expressionAccess().getRule();
	}
	
	//and_expression simple_expression:
	//	equality_expression ({AND.left=current} '&' right=equality_expression)*
	public And_expressionElements getAnd_expressionAccess() {
		return pAnd_expression;
	}
	
	public ParserRule getAnd_expressionRule() {
		return getAnd_expressionAccess().getRule();
	}
	
	//exclusive_or_expression simple_expression:
	//	and_expression ({EXC_OR.left=current} '^' right=and_expression)*
	public Exclusive_or_expressionElements getExclusive_or_expressionAccess() {
		return pExclusive_or_expression;
	}
	
	public ParserRule getExclusive_or_expressionRule() {
		return getExclusive_or_expressionAccess().getRule();
	}
	
	//inclusive_or_expression simple_expression:
	//	exclusive_or_expression ({INC_OR.left=current} '|' right=exclusive_or_expression)*
	public Inclusive_or_expressionElements getInclusive_or_expressionAccess() {
		return pInclusive_or_expression;
	}
	
	public ParserRule getInclusive_or_expressionRule() {
		return getInclusive_or_expressionAccess().getRule();
	}
	
	//logical_and_expression simple_expression:
	//	inclusive_or_expression ({LOG_AND.left=current} AND_OP right=inclusive_or_expression)*
	public Logical_and_expressionElements getLogical_and_expressionAccess() {
		return pLogical_and_expression;
	}
	
	public ParserRule getLogical_and_expressionRule() {
		return getLogical_and_expressionAccess().getRule();
	}
	
	//logical_or_expression simple_expression:
	//	logical_and_expression ({LOG_OR.left=current} OR_OP right=logical_and_expression)*
	public Logical_or_expressionElements getLogical_or_expressionAccess() {
		return pLogical_or_expression;
	}
	
	public ParserRule getLogical_or_expressionRule() {
		return getLogical_or_expressionAccess().getRule();
	}
	
	//simple_expression:
	//	logical_or_expression;
	public Simple_expressionElements getSimple_expressionAccess() {
		return pSimple_expression;
	}
	
	public ParserRule getSimple_expressionRule() {
		return getSimple_expressionAccess().getRule();
	}
	
	////TODO Rever esse
	// conditional_expression:
	//	simple_expression=simple_expression | logical_or_expression=logical_or_expression '?' expression=expression ':'
	//	conditional_expression=conditional_expression;
	public Conditional_expressionElements getConditional_expressionAccess() {
		return pConditional_expression;
	}
	
	public ParserRule getConditional_expressionRule() {
		return getConditional_expressionAccess().getRule();
	}
	
	//assignment_expression:
	//	conditional_expression=conditional_expression | unary_expression=unary_expression
	//	assignment_operator=assignment_operator assignment_expression=assignment_expression;
	public Assignment_expressionElements getAssignment_expressionAccess() {
		return pAssignment_expression;
	}
	
	public ParserRule getAssignment_expressionRule() {
		return getAssignment_expressionAccess().getRule();
	}
	
	//assignment_operator:
	//	'=' | mul_assign=MUL_ASSIGN | div_assign=DIV_ASSIGN | mod_assign=MOD_ASSIGN | add_assign=ADD_ASSIGN |
	//	sub_assign=SUB_ASSIGN | left_assign=LEFT_ASSIGN | right_assign=RIGHT_ASSIGN | and_assign=AND_ASSIGN |
	//	xor_assign=XOR_ASSIGN | or_assign=OR_ASSIGN;
	public Assignment_operatorElements getAssignment_operatorAccess() {
		return pAssignment_operator;
	}
	
	public ParserRule getAssignment_operatorRule() {
		return getAssignment_operatorAccess().getRule();
	}
	
	//expression:
	//	assignment_expression=assignment_expression expression2=expression2;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//expression2:
	//	{expression2} (',' assignment_expression=assignment_expression expression2=expression2)?;
	public Expression2Elements getExpression2Access() {
		return pExpression2;
	}
	
	public ParserRule getExpression2Rule() {
		return getExpression2Access().getRule();
	}
	
	//constant_expression:
	//	conditional_expression=conditional_expression / * with constraints * /;
	public Constant_expressionElements getConstant_expressionAccess() {
		return pConstant_expression;
	}
	
	public ParserRule getConstant_expressionRule() {
		return getConstant_expressionAccess().getRule();
	}
	
	/// *TODO
	// * declaration
	//	: declaration_specifiers+=declaration_specifiers ';'
	//	| declaration_specifiers+=declaration_specifiers init_declarator_list+=init_declarator_list ';'
	//	| static_assert_declaration=static_assert_declaration
	//	;
	// * /
	//declaration:
	//	declaration_specifiers=declaration_specifiers ';' | declaration_specifiers=declaration_specifiers
	//	init_declarator_list=init_declarator_list ';' | static_assert_declaration=static_assert_declaration;
	public DeclarationElements getDeclarationAccess() {
		return pDeclaration;
	}
	
	public ParserRule getDeclarationRule() {
		return getDeclarationAccess().getRule();
	}
	
	/// *TODO
	// * declaration_specifiers
	//	: storage_class_specifier=storage_class_specifier declaration_specifiers+=declaration_specifiers
	//	| storage_class_specifier=storage_class_specifier
	//	| type_specifier=type_specifier declaration_specifiers+=declaration_specifiers
	//	| type_specifier=type_specifier
	//	| type_qualifier=type_qualifier declaration_specifiers+=declaration_specifiers
	//	| type_qualifier=type_qualifier
	//	| function_specifier=function_specifier declaration_specifiers+=declaration_specifiers
	//	| function_specifier=function_specifier
	//	| alignment_specifier=alignment_specifier declaration_specifiers+=declaration_specifiers
	//	| alignment_specifier=alignment_specifier
	//	;
	// * /
	//declaration_specifiers:
	//	storage_class_specifier=storage_class_specifier declaration_specifiers=declaration_specifiers |
	//	storage_class_specifier=storage_class_specifier | type_specifier=type_specifier
	//	declaration_specifiers=declaration_specifiers | type_specifier=type_specifier | type_qualifier=type_qualifier
	//	declaration_specifiers=declaration_specifiers | type_qualifier=type_qualifier | function_specifier=function_specifier
	//	declaration_specifiers=declaration_specifiers | function_specifier=function_specifier |
	//	alignment_specifier=alignment_specifier declaration_specifiers=declaration_specifiers |
	//	alignment_specifier=alignment_specifier;
	public Declaration_specifiersElements getDeclaration_specifiersAccess() {
		return pDeclaration_specifiers;
	}
	
	public ParserRule getDeclaration_specifiersRule() {
		return getDeclaration_specifiersAccess().getRule();
	}
	
	//init_declarator_list:
	//	init_declarator=init_declarator init_declarator_list2=init_declarator_list2;
	public Init_declarator_listElements getInit_declarator_listAccess() {
		return pInit_declarator_list;
	}
	
	public ParserRule getInit_declarator_listRule() {
		return getInit_declarator_listAccess().getRule();
	}
	
	//init_declarator_list2:
	//	{init_declarator_list2} (',' init_declarator=init_declarator init_declarator_list2=init_declarator_list2)?;
	public Init_declarator_list2Elements getInit_declarator_list2Access() {
		return pInit_declarator_list2;
	}
	
	public ParserRule getInit_declarator_list2Rule() {
		return getInit_declarator_list2Access().getRule();
	}
	
	//init_declarator:
	//	declarator=declarator '=' initializer=simple_expression | declarator=declarator;
	public Init_declaratorElements getInit_declaratorAccess() {
		return pInit_declarator;
	}
	
	public ParserRule getInit_declaratorRule() {
		return getInit_declaratorAccess().getRule();
	}
	
	//storage_class_specifier:
	//	typedef=TYPEDEF / * identifiers must be flagged as TYPEDEF_NAME * / | extern=EXTERN | static=STATIC |
	//	thread_local=THREAD_LOCAL | auto=AUTO | register=REGISTER;
	public Storage_class_specifierElements getStorage_class_specifierAccess() {
		return pStorage_class_specifier;
	}
	
	public ParserRule getStorage_class_specifierRule() {
		return getStorage_class_specifierAccess().getRule();
	}
	
	//type_specifier:
	//	{voidType} void_type=VOID | {charType} char_type=CHAR | {shortType} short_type=SHORT | {intType} int_type=INTNAME |
	//	{longType} long_type=LONG | {floatType} float_type=FLOAT | {doubleType} double_type=DOUBLE | {signedType}
	//	signed_type=SIGNED | {unsignedType} unsigned_type=UNSIGNED | {booleanType} bool_type=BOOL | {complexType}
	//	complex_type=COMPLEX | {imaginaryType} imaginary_type=IMAGINARY / * non-mandated extension * / |
	//	atomic_type_specifier=atomic_type_specifier | struct_or_union_specifier=struct_or_union_specifier |
	//	enum_specifier=enum_specifier | typedef_name=TYPEDEF / * after it has been defined as such * /;
	public Type_specifierElements getType_specifierAccess() {
		return pType_specifier;
	}
	
	public ParserRule getType_specifierRule() {
		return getType_specifierAccess().getRule();
	}
	
	////tem como refatorar.
	// struct_or_union_specifier:
	//	struct_or_union=struct_or_union '{' struct_declaration_list=struct_declaration_list '}' |
	//	struct_or_union=struct_or_union identifier=ID '{' struct_declaration_list=struct_declaration_list '}' |
	//	struct_or_union identifier=ID;
	public Struct_or_union_specifierElements getStruct_or_union_specifierAccess() {
		return pStruct_or_union_specifier;
	}
	
	public ParserRule getStruct_or_union_specifierRule() {
		return getStruct_or_union_specifierAccess().getRule();
	}
	
	//struct_or_union:
	//	struct=STRUCT | union=UNION;
	public Struct_or_unionElements getStruct_or_unionAccess() {
		return pStruct_or_union;
	}
	
	public ParserRule getStruct_or_unionRule() {
		return getStruct_or_unionAccess().getRule();
	}
	
	//struct_declaration_list:
	//	struct_declaration=struct_declaration struct_declaration_list2=struct_declaration_list2;
	public Struct_declaration_listElements getStruct_declaration_listAccess() {
		return pStruct_declaration_list;
	}
	
	public ParserRule getStruct_declaration_listRule() {
		return getStruct_declaration_listAccess().getRule();
	}
	
	//struct_declaration_list2:
	//	(struct_declaration=struct_declaration struct_declaration_list2=struct_declaration_list2)?;
	public Struct_declaration_list2Elements getStruct_declaration_list2Access() {
		return pStruct_declaration_list2;
	}
	
	public ParserRule getStruct_declaration_list2Rule() {
		return getStruct_declaration_list2Access().getRule();
	}
	
	//struct_declaration:
	//	specifier_qualifier_list=specifier_qualifier_list ';' / * for anonymous struct/union * / |
	//	specifier_qualifier_list=specifier_qualifier_list struct_declarator_list=struct_declarator_list ';' |
	//	static_assert_declaration=static_assert_declaration;
	public Struct_declarationElements getStruct_declarationAccess() {
		return pStruct_declaration;
	}
	
	public ParserRule getStruct_declarationRule() {
		return getStruct_declarationAccess().getRule();
	}
	
	//specifier_qualifier_list:
	//	type_specifier=type_specifier specifier_qualifier_list=specifier_qualifier_list | type_specifier=type_specifier |
	//	type_qualifier=type_specifier specifier_qualifier_list=specifier_qualifier_list | type_qualifier=type_specifier;
	public Specifier_qualifier_listElements getSpecifier_qualifier_listAccess() {
		return pSpecifier_qualifier_list;
	}
	
	public ParserRule getSpecifier_qualifier_listRule() {
		return getSpecifier_qualifier_listAccess().getRule();
	}
	
	//struct_declarator_list:
	//	struct_declarator=struct_declarator struct_declarator_list2=struct_declarator_list2;
	public Struct_declarator_listElements getStruct_declarator_listAccess() {
		return pStruct_declarator_list;
	}
	
	public ParserRule getStruct_declarator_listRule() {
		return getStruct_declarator_listAccess().getRule();
	}
	
	//struct_declarator_list2:
	//	{struct_declarator_list2} (',' struct_declarator=struct_declarator struct_declarator_list2=struct_declarator_list2)?;
	public Struct_declarator_list2Elements getStruct_declarator_list2Access() {
		return pStruct_declarator_list2;
	}
	
	public ParserRule getStruct_declarator_list2Rule() {
		return getStruct_declarator_list2Access().getRule();
	}
	
	//struct_declarator:
	//	':' constant_expression=constant_expression | declarator=declarator ':' constant_expression=constant_expression |
	//	declarator=declarator;
	public Struct_declaratorElements getStruct_declaratorAccess() {
		return pStruct_declarator;
	}
	
	public ParserRule getStruct_declaratorRule() {
		return getStruct_declaratorAccess().getRule();
	}
	
	//enum_specifier:
	//	enumt=ENUM '{' enumerator_list=enumerator_list '}' | enumt=ENUM '{' enumerator_list=enumerator_list ',' '}' |
	//	enumt=ENUM identifier=ID '{' enumerator_list=enumerator_list '}' | enumt=ENUM identifier=ID '{'
	//	enumerator_list=enumerator_list ',' '}' | enumt=ENUM identifier=ID;
	public Enum_specifierElements getEnum_specifierAccess() {
		return pEnum_specifier;
	}
	
	public ParserRule getEnum_specifierRule() {
		return getEnum_specifierAccess().getRule();
	}
	
	//enumerator_list:
	//	enumerator=enumerator enumerator_list2=enumerator_list2;
	public Enumerator_listElements getEnumerator_listAccess() {
		return pEnumerator_list;
	}
	
	public ParserRule getEnumerator_listRule() {
		return getEnumerator_listAccess().getRule();
	}
	
	//enumerator_list2:
	//	(',' enumerator=enumerator enumerator_list2=enumerator_list2)?;
	public Enumerator_list2Elements getEnumerator_list2Access() {
		return pEnumerator_list2;
	}
	
	public ParserRule getEnumerator_list2Rule() {
		return getEnumerator_list2Access().getRule();
	}
	
	////OLHAR
	// enumerator / * identifiers must be flagged as ENUMERATION_CONSTANT * /:
	//	enumeration_constant=enumeration_constant '=' constant_expression=constant_expression |
	//	enumeration_constant=enumeration_constant;
	public EnumeratorElements getEnumeratorAccess() {
		return pEnumerator;
	}
	
	public ParserRule getEnumeratorRule() {
		return getEnumeratorAccess().getRule();
	}
	
	//atomic_type_specifier:
	//	atomic=ATOMIC '(' type_name=type_name ')';
	public Atomic_type_specifierElements getAtomic_type_specifierAccess() {
		return pAtomic_type_specifier;
	}
	
	public ParserRule getAtomic_type_specifierRule() {
		return getAtomic_type_specifierAccess().getRule();
	}
	
	//type_qualifier:
	//	const=CONST | restrict=RESTRICT | volatile=VOLATILE | atomic=ATOMIC;
	public Type_qualifierElements getType_qualifierAccess() {
		return pType_qualifier;
	}
	
	public ParserRule getType_qualifierRule() {
		return getType_qualifierAccess().getRule();
	}
	
	//function_specifier:
	//	inline=INLINE | noreturn=NORETURN;
	public Function_specifierElements getFunction_specifierAccess() {
		return pFunction_specifier;
	}
	
	public ParserRule getFunction_specifierRule() {
		return getFunction_specifierAccess().getRule();
	}
	
	//alignment_specifier:
	//	alignas=ALIGNAS '(' type_name=type_name ')' | alignas=ALIGNAS '(' constant_expression=constant_expression ')';
	public Alignment_specifierElements getAlignment_specifierAccess() {
		return pAlignment_specifier;
	}
	
	public ParserRule getAlignment_specifierRule() {
		return getAlignment_specifierAccess().getRule();
	}
	
	//declarator:
	//	pointer=pointer direct_declarator=direct_declarator | direct_declarator=direct_declarator;
	public DeclaratorElements getDeclaratorAccess() {
		return pDeclarator;
	}
	
	public ParserRule getDeclaratorRule() {
		return getDeclaratorAccess().getRule();
	}
	
	//direct_declarator:
	//	name=ID direct_declarators+=direct_declarator2* | '(' Declarator=declarator ')'
	//	direct_declarators+=direct_declarator2*;
	public Direct_declaratorElements getDirect_declaratorAccess() {
		return pDirect_declarator;
	}
	
	public ParserRule getDirect_declaratorRule() {
		return getDirect_declaratorAccess().getRule();
	}
	
	//direct_declarator2:
	//	'[' ']' | '[' '*' ']' | '[' static=STATIC type_qualifier_list=type_qualifier_list
	//	assignment_expression=assignment_expression ']' | '[' static=STATIC assignment_expression=assignment_expression ']' |
	//	'[' type_qualifier_list=type_qualifier_list '*' ']' | '[' type_qualifier_list=type_qualifier_list static=STATIC
	//	assignment_expression=assignment_expression ']' | '[' type_qualifier_list=type_qualifier_list
	//	assignment_expression=assignment_expression ']' | '[' type_qualifier_list=type_qualifier_list ']' | '['
	//	assignment_expression=assignment_expression ']' | '(' parameter_type_list=parameter_type_list ')' | '(' ')' | '('
	//	identifier_list=identifier_list ')';
	public Direct_declarator2Elements getDirect_declarator2Access() {
		return pDirect_declarator2;
	}
	
	public ParserRule getDirect_declarator2Rule() {
		return getDirect_declarator2Access().getRule();
	}
	
	//pointer:
	//	'*' type_qualifier_list=type_qualifier_list pointer=pointer | '*' type_qualifier_list=type_qualifier_list | '*'
	//	pointer=pointer | '*';
	public PointerElements getPointerAccess() {
		return pPointer;
	}
	
	public ParserRule getPointerRule() {
		return getPointerAccess().getRule();
	}
	
	//type_qualifier_list:
	//	type_qualifier=type_qualifier type_qualifier_list2=type_qualifier_list2;
	public Type_qualifier_listElements getType_qualifier_listAccess() {
		return pType_qualifier_list;
	}
	
	public ParserRule getType_qualifier_listRule() {
		return getType_qualifier_listAccess().getRule();
	}
	
	//type_qualifier_list2:
	//	{type_qualifier_list2} (type_qualifier=type_qualifier type_qualifier_list2=type_qualifier_list2)?;
	public Type_qualifier_list2Elements getType_qualifier_list2Access() {
		return pType_qualifier_list2;
	}
	
	public ParserRule getType_qualifier_list2Rule() {
		return getType_qualifier_list2Access().getRule();
	}
	
	//parameter_type_list:
	//	parameter_list=parameter_list ',' ellipsis=ELLIPSIS | parameter_list=parameter_list;
	public Parameter_type_listElements getParameter_type_listAccess() {
		return pParameter_type_list;
	}
	
	public ParserRule getParameter_type_listRule() {
		return getParameter_type_listAccess().getRule();
	}
	
	//parameter_list:
	//	parameter_declaration=parameter_declaration parameter_list2=parameter_list2;
	public Parameter_listElements getParameter_listAccess() {
		return pParameter_list;
	}
	
	public ParserRule getParameter_listRule() {
		return getParameter_listAccess().getRule();
	}
	
	//parameter_list2:
	//	{parameter_list2} (',' parameter_declaration=parameter_declaration parameter_list2=parameter_list2)?;
	public Parameter_list2Elements getParameter_list2Access() {
		return pParameter_list2;
	}
	
	public ParserRule getParameter_list2Rule() {
		return getParameter_list2Access().getRule();
	}
	
	//parameter_declaration:
	//	declaration_specifiers=declaration_specifiers declarator=declarator | declaration_specifiers=declaration_specifiers
	//	abstract_declarator=abstract_declarator | declaration_specifiers=declaration_specifiers;
	public Parameter_declarationElements getParameter_declarationAccess() {
		return pParameter_declaration;
	}
	
	public ParserRule getParameter_declarationRule() {
		return getParameter_declarationAccess().getRule();
	}
	
	//identifier_list:
	//	identifier=ID identifier_list2=identifier_list2;
	public Identifier_listElements getIdentifier_listAccess() {
		return pIdentifier_list;
	}
	
	public ParserRule getIdentifier_listRule() {
		return getIdentifier_listAccess().getRule();
	}
	
	//identifier_list2:
	//	{identifier_list2} (',' identifier=ID identifier_list2=identifier_list2)?;
	public Identifier_list2Elements getIdentifier_list2Access() {
		return pIdentifier_list2;
	}
	
	public ParserRule getIdentifier_list2Rule() {
		return getIdentifier_list2Access().getRule();
	}
	
	//type_name:
	//	specifier_qualifier_list=specifier_qualifier_list abstract_declarator=abstract_declarator |
	//	specifier_qualifier_list=specifier_qualifier_list;
	public Type_nameElements getType_nameAccess() {
		return pType_name;
	}
	
	public ParserRule getType_nameRule() {
		return getType_nameAccess().getRule();
	}
	
	//abstract_declarator:
	//	pointer=pointer direct_abstract_declarator=direct_abstract_declarator | pointer=pointer |
	//	direct_abstract_declarator=direct_abstract_declarator;
	public Abstract_declaratorElements getAbstract_declaratorAccess() {
		return pAbstract_declarator;
	}
	
	public ParserRule getAbstract_declaratorRule() {
		return getAbstract_declaratorAccess().getRule();
	}
	
	////TODO Olhar esse tem como refatorar ( A | B| C) direct_abstract_declarator2
	// direct_abstract_declarator:
	//	direct_abstract_declarator2+=direct_abstract_declarator2+;
	public Direct_abstract_declaratorElements getDirect_abstract_declaratorAccess() {
		return pDirect_abstract_declarator;
	}
	
	public ParserRule getDirect_abstract_declaratorRule() {
		return getDirect_abstract_declaratorAccess().getRule();
	}
	
	//direct_abstract_declarator2:
	//	'[' ']' | '[' '*' ']' | '[' static=STATIC type_qualifier_list=type_qualifier_list
	//	assignment_expression=assignment_expression ']' | '[' static=STATIC assignment_expression=assignment_expression ']' |
	//	'[' type_qualifier_list=type_qualifier_list assignment_expression=assignment_expression ']' | '['
	//	type_qualifier_list=type_qualifier_list static=STATIC assignment_expression=assignment_expression ']' | '['
	//	type_qualifier_list=type_qualifier_list ']' | '[' assignment_expression=assignment_expression ']' | '(' ')' | '('
	//	parameter_type_list=parameter_type_list ')';
	public Direct_abstract_declarator2Elements getDirect_abstract_declarator2Access() {
		return pDirect_abstract_declarator2;
	}
	
	public ParserRule getDirect_abstract_declarator2Rule() {
		return getDirect_abstract_declarator2Access().getRule();
	}
	
	////TODO Olhar esse
	// initializer:
	//	'{' initializer_list=initializer_list '}' | '{' initializer_list=initializer_list ',' '}' |
	//	assignment_expression=assignment_expression;
	public InitializerElements getInitializerAccess() {
		return pInitializer;
	}
	
	public ParserRule getInitializerRule() {
		return getInitializerAccess().getRule();
	}
	
	////TODO OLHAR esse
	// initializer_list:
	//	designation=designation initializer=initializer initializer_list2=initializer_list2 | initializer=initializer
	//	initializer_list2=initializer_list2;
	public Initializer_listElements getInitializer_listAccess() {
		return pInitializer_list;
	}
	
	public ParserRule getInitializer_listRule() {
		return getInitializer_listAccess().getRule();
	}
	
	//initializer_list2:
	//	{initializer_list2} (',' designation=designation initializer=initializer initializer_list2=initializer_list2 | ','
	//	initializer=initializer initializer_list2=initializer_list2)?;
	public Initializer_list2Elements getInitializer_list2Access() {
		return pInitializer_list2;
	}
	
	public ParserRule getInitializer_list2Rule() {
		return getInitializer_list2Access().getRule();
	}
	
	//designation:
	//	designator_list=designator_list '=';
	public DesignationElements getDesignationAccess() {
		return pDesignation;
	}
	
	public ParserRule getDesignationRule() {
		return getDesignationAccess().getRule();
	}
	
	//designator_list:
	//	designator=designator designator_list2=designator_list2;
	public Designator_listElements getDesignator_listAccess() {
		return pDesignator_list;
	}
	
	public ParserRule getDesignator_listRule() {
		return getDesignator_listAccess().getRule();
	}
	
	//designator_list2:
	//	{designator_list2} (designator=designator designator_list2=designator_list2)?;
	public Designator_list2Elements getDesignator_list2Access() {
		return pDesignator_list2;
	}
	
	public ParserRule getDesignator_list2Rule() {
		return getDesignator_list2Access().getRule();
	}
	
	//designator:
	//	'[' constant_expression=constant_expression ']' | '.' identifier=ID;
	public DesignatorElements getDesignatorAccess() {
		return pDesignator;
	}
	
	public ParserRule getDesignatorRule() {
		return getDesignatorAccess().getRule();
	}
	
	////Olhar
	// static_assert_declaration:
	//	static_assert=STATIC_ASSERT '(' constant_expression=constant_expression ',' string_literal=STRING_LITERAL ')' ';';
	public Static_assert_declarationElements getStatic_assert_declarationAccess() {
		return pStatic_assert_declaration;
	}
	
	public ParserRule getStatic_assert_declarationRule() {
		return getStatic_assert_declarationAccess().getRule();
	}
	
	////OLHAR
	// statement:
	//	labeled_statement=labeled_statement | compound_statement=compound_statement |
	//	expression_statement=expression_statement | selection_statement=selection_statement |
	//	iteration_statement=iteration_statement | jump_statement=jump_statement;
	public StatementElements getStatementAccess() {
		return pStatement;
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}
	
	////OLHAR
	// labeled_statement:
	//	identifier=ID ':' statement=statement | case=CASE constant_expression=constant_expression ':' statement=statement |
	//	default=DEFAULT ':' statement=statement;
	public Labeled_statementElements getLabeled_statementAccess() {
		return pLabeled_statement;
	}
	
	public ParserRule getLabeled_statementRule() {
		return getLabeled_statementAccess().getRule();
	}
	
	/// *
	// * compound_statement
	//	: '{' '}'
	//	| '{'  block_item_list+=block_item_list '}'
	//;
	// * / compound_statement:
	//	'{' '}' | '{' block_item_list+=block_item* '}';
	public Compound_statementElements getCompound_statementAccess() {
		return pCompound_statement;
	}
	
	public ParserRule getCompound_statementRule() {
		return getCompound_statementAccess().getRule();
	}
	
	//block_item:
	//	declaration=declaration | statement=statement;
	public Block_itemElements getBlock_itemAccess() {
		return pBlock_item;
	}
	
	public ParserRule getBlock_itemRule() {
		return getBlock_itemAccess().getRule();
	}
	
	//expression_statement:
	//	';' | expression=expression ';';
	public Expression_statementElements getExpression_statementAccess() {
		return pExpression_statement;
	}
	
	public ParserRule getExpression_statementRule() {
		return getExpression_statementAccess().getRule();
	}
	
	//selection_statement:
	//	if=IF '(' expression=expression ')' statement=statement else=ELSE statement2=statement | if=IF '('
	//	expression=expression ')' statement=statement | switch=SWITCH '(' expression=expression ')' statement=statement;
	public Selection_statementElements getSelection_statementAccess() {
		return pSelection_statement;
	}
	
	public ParserRule getSelection_statementRule() {
		return getSelection_statementAccess().getRule();
	}
	
	//iteration_statement:
	//	while=WHILE '(' expression=expression ')' statement=statement | do=DO statement=statement while=WHILE '('
	//	expression=expression ')' ';' | for=FOR '(' expression_statement=expression_statement
	//	expression_statement2=expression_statement ')' statement=statement | for=FOR '('
	//	expression_statement=expression_statement expression_statement2=expression_statement expression=expression ')'
	//	statement=statement | for=FOR '(' declaration=declaration expression_statement=expression_statement ')'
	//	statement=statement | for=FOR '(' declaration=declaration expression_statement=expression_statement
	//	expression=expression ')' statement=statement;
	public Iteration_statementElements getIteration_statementAccess() {
		return pIteration_statement;
	}
	
	public ParserRule getIteration_statementRule() {
		return getIteration_statementAccess().getRule();
	}
	
	//jump_statement:
	//	goto=GOTO identifier=ID ';' | continue=CONTINUE ';' | break=BREAK ';' | return=RETURN ';' | return=RETURN
	//	expression=expression ';';
	public Jump_statementElements getJump_statementAccess() {
		return pJump_statement;
	}
	
	public ParserRule getJump_statementRule() {
		return getJump_statementAccess().getRule();
	}
	
	//translation_unit:
	//	external_declaration=external_declaration;
	public Translation_unitElements getTranslation_unitAccess() {
		return pTranslation_unit;
	}
	
	public ParserRule getTranslation_unitRule() {
		return getTranslation_unitAccess().getRule();
	}
	
	//external_declaration:
	//	function_definition=function_definition | declaration=declaration;
	public External_declarationElements getExternal_declarationAccess() {
		return pExternal_declaration;
	}
	
	public ParserRule getExternal_declarationRule() {
		return getExternal_declarationAccess().getRule();
	}
	
	/// *
	// * function_definition
	//	: declaration_specifiers+=declaration_specifiers declarator=declarator declaration_list+=declaration_list compound_statement=compound_statement
	//	| declaration_specifiers+=declaration_specifiers declarator=declarator compound_statement=compound_statement
	//	;
	// * /
	//function_definition:
	//	declaration_specifiers=declaration_specifiers declarator=declarator declaration_list=declaration_list
	//	compound_statement=compound_statement | declaration_specifiers=declaration_specifiers declarator=declarator
	//	compound_statement=compound_statement;
	public Function_definitionElements getFunction_definitionAccess() {
		return pFunction_definition;
	}
	
	public ParserRule getFunction_definitionRule() {
		return getFunction_definitionAccess().getRule();
	}
	
	//declaration_list:
	//	declaration=declaration declaration_list_2=declaration_list2;
	public Declaration_listElements getDeclaration_listAccess() {
		return pDeclaration_list;
	}
	
	public ParserRule getDeclaration_listRule() {
		return getDeclaration_listAccess().getRule();
	}
	
	//declaration_list2:
	//	{declaration_list2} (declaration=declaration declaration_list2=declaration_list2)?;
	public Declaration_list2Elements getDeclaration_list2Access() {
		return pDeclaration_list2;
	}
	
	public ParserRule getDeclaration_list2Rule() {
		return getDeclaration_list2Access().getRule();
	}
	
	//terminal O:
	//	'0'..'7';
	public TerminalRule getORule() {
		return tO;
	}
	
	//terminal D:
	//	'0'..'9';
	public TerminalRule getDRule() {
		return tD;
	}
	
	//terminal NZ:
	//	'1'..'9';
	public TerminalRule getNZRule() {
		return tNZ;
	}
	
	//terminal L:
	//	'a'..'z' | 'A'..'Z' | '_';
	public TerminalRule getLRule() {
		return tL;
	}
	
	//terminal A:
	//	'a'..'z' | 'A'..'Z' | '_' | '0' '..' '9';
	public TerminalRule getARule() {
		return tA;
	}
	
	//terminal H:
	//	'a'..'f' | 'A'..'F' | '0'..'9';
	public TerminalRule getHRule() {
		return tH;
	}
	
	//terminal HP:
	//	'0' ('x' | 'X');
	public TerminalRule getHPRule() {
		return tHP;
	}
	
	//terminal E:
	//	('E' | 'e') ('+' | '-')? D '+';
	public TerminalRule getERule() {
		return tE;
	}
	
	//terminal P:
	//	('P' | 'p') ('+' | '-')? '{' D '}' '+';
	public TerminalRule getPRule() {
		return tP;
	}
	
	//terminal FS:
	//	'f' | 'F' | 'l' | 'L';
	public TerminalRule getFSRule() {
		return tFS;
	}
	
	//terminal IS:
	//	('u' | 'U') ('l' | 'L' | 'l' 'l' | 'L' 'L')? | ('l' | 'L' | 'l' 'l' | 'L' 'L') ('u' | 'U')?;
	public TerminalRule getISRule() {
		return tIS;
	}
	
	//terminal CP:
	//	'u' | 'U' | 'L';
	public TerminalRule getCPRule() {
		return tCP;
	}
	
	//terminal SP:
	//	'u' '8' | 'u' | 'U' | 'L';
	public TerminalRule getSPRule() {
		return tSP;
	}
	
	//terminal ES:
	//	'0*';
	public TerminalRule getESRule() {
		return tES;
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n' | '\f'+;
	public TerminalRule getWSRule() {
		return tWS;
	}
	
	//// "auto"					{ return(AUTO); }
	// AUTO:
	//	"auto";
	public AUTOElements getAUTOAccess() {
		return pAUTO;
	}
	
	public ParserRule getAUTORule() {
		return getAUTOAccess().getRule();
	}
	
	////"break"					{ return(BREAK); }
	// BREAK:
	//	"break";
	public BREAKElements getBREAKAccess() {
		return pBREAK;
	}
	
	public ParserRule getBREAKRule() {
		return getBREAKAccess().getRule();
	}
	
	////"case"					{ return(CASE); }
	// CASE:
	//	"case";
	public CASEElements getCASEAccess() {
		return pCASE;
	}
	
	public ParserRule getCASERule() {
		return getCASEAccess().getRule();
	}
	
	////"char"					{ return(CHAR); }
	// CHAR:
	//	"char";
	public CHARElements getCHARAccess() {
		return pCHAR;
	}
	
	public ParserRule getCHARRule() {
		return getCHARAccess().getRule();
	}
	
	////"const"					{ return(CONST); }
	// CONST:
	//	"const";
	public CONSTElements getCONSTAccess() {
		return pCONST;
	}
	
	public ParserRule getCONSTRule() {
		return getCONSTAccess().getRule();
	}
	
	////"continue"				{ return(CONTINUE); }
	// CONTINUE:
	//	"continue";
	public CONTINUEElements getCONTINUEAccess() {
		return pCONTINUE;
	}
	
	public ParserRule getCONTINUERule() {
		return getCONTINUEAccess().getRule();
	}
	
	////"default"				{ return(DEFAULT); }
	// DEFAULT:
	//	"default";
	public DEFAULTElements getDEFAULTAccess() {
		return pDEFAULT;
	}
	
	public ParserRule getDEFAULTRule() {
		return getDEFAULTAccess().getRule();
	}
	
	////"do"					{ return(DO); }
	// DO:
	//	"do";
	public DOElements getDOAccess() {
		return pDO;
	}
	
	public ParserRule getDORule() {
		return getDOAccess().getRule();
	}
	
	////"double"				{ return(DOUBLE); }
	// DOUBLE:
	//	"double";
	public DOUBLEElements getDOUBLEAccess() {
		return pDOUBLE;
	}
	
	public ParserRule getDOUBLERule() {
		return getDOUBLEAccess().getRule();
	}
	
	////"else"					{ return(ELSE); }
	// ELSE:
	//	"else";
	public ELSEElements getELSEAccess() {
		return pELSE;
	}
	
	public ParserRule getELSERule() {
		return getELSEAccess().getRule();
	}
	
	////"enum"					{ return(ENUM); }
	// ENUM:
	//	"enum";
	public ENUMElements getENUMAccess() {
		return pENUM;
	}
	
	public ParserRule getENUMRule() {
		return getENUMAccess().getRule();
	}
	
	////"extern"				{ return(EXTERN); }
	// EXTERN:
	//	"extern";
	public EXTERNElements getEXTERNAccess() {
		return pEXTERN;
	}
	
	public ParserRule getEXTERNRule() {
		return getEXTERNAccess().getRule();
	}
	
	////"float"					{ return(FLOAT); }
	// FLOAT:
	//	"float";
	public FLOATElements getFLOATAccess() {
		return pFLOAT;
	}
	
	public ParserRule getFLOATRule() {
		return getFLOATAccess().getRule();
	}
	
	////"for"					{ return(FOR); }
	// FOR:
	//	"for";
	public FORElements getFORAccess() {
		return pFOR;
	}
	
	public ParserRule getFORRule() {
		return getFORAccess().getRule();
	}
	
	////"goto"					{ return(GOTO); }
	// GOTO:
	//	"goto";
	public GOTOElements getGOTOAccess() {
		return pGOTO;
	}
	
	public ParserRule getGOTORule() {
		return getGOTOAccess().getRule();
	}
	
	////"if"					{ return(IF); }
	// IF:
	//	"if";
	public IFElements getIFAccess() {
		return pIF;
	}
	
	public ParserRule getIFRule() {
		return getIFAccess().getRule();
	}
	
	////"inline"				{ return(INLINE); }
	// INLINE:
	//	"inline";
	public INLINEElements getINLINEAccess() {
		return pINLINE;
	}
	
	public ParserRule getINLINERule() {
		return getINLINEAccess().getRule();
	}
	
	////"int"					{ return(INT); }
	// INTNAME:
	//	"int";
	public INTNAMEElements getINTNAMEAccess() {
		return pINTNAME;
	}
	
	public ParserRule getINTNAMERule() {
		return getINTNAMEAccess().getRule();
	}
	
	////  <-- Aqui nao deixou acho que int ja Ã© um terminal que pode usar que nem ID
	// //"long"					{ return(LONG); }
	// LONG:
	//	"long";
	public LONGElements getLONGAccess() {
		return pLONG;
	}
	
	public ParserRule getLONGRule() {
		return getLONGAccess().getRule();
	}
	
	////"register"				{ return(REGISTER); }
	// REGISTER:
	//	"register";
	public REGISTERElements getREGISTERAccess() {
		return pREGISTER;
	}
	
	public ParserRule getREGISTERRule() {
		return getREGISTERAccess().getRule();
	}
	
	////"restrict"				{ return(RESTRICT); }
	// RESTRICT:
	//	"restrict";
	public RESTRICTElements getRESTRICTAccess() {
		return pRESTRICT;
	}
	
	public ParserRule getRESTRICTRule() {
		return getRESTRICTAccess().getRule();
	}
	
	////"return"				{ return(RETURN); }
	// RETURN:
	//	"return";
	public RETURNElements getRETURNAccess() {
		return pRETURN;
	}
	
	public ParserRule getRETURNRule() {
		return getRETURNAccess().getRule();
	}
	
	////"short"					{ return(SHORT); }
	// SHORT:
	//	"short";
	public SHORTElements getSHORTAccess() {
		return pSHORT;
	}
	
	public ParserRule getSHORTRule() {
		return getSHORTAccess().getRule();
	}
	
	////"signed"				{ return(SIGNED); }
	// SIGNED:
	//	"signed";
	public SIGNEDElements getSIGNEDAccess() {
		return pSIGNED;
	}
	
	public ParserRule getSIGNEDRule() {
		return getSIGNEDAccess().getRule();
	}
	
	////"sizeof"				{ return(SIZEOF); }
	// SIZEOF:
	//	"sizeof";
	public SIZEOFElements getSIZEOFAccess() {
		return pSIZEOF;
	}
	
	public ParserRule getSIZEOFRule() {
		return getSIZEOFAccess().getRule();
	}
	
	////"static"				{ return(STATIC); }
	// STATIC:
	//	"static";
	public STATICElements getSTATICAccess() {
		return pSTATIC;
	}
	
	public ParserRule getSTATICRule() {
		return getSTATICAccess().getRule();
	}
	
	////"struct"				{ return(STRUCT); }
	// STRUCT:
	//	"struct";
	public STRUCTElements getSTRUCTAccess() {
		return pSTRUCT;
	}
	
	public ParserRule getSTRUCTRule() {
		return getSTRUCTAccess().getRule();
	}
	
	////"switch"				{ return(SWITCH); }
	// SWITCH:
	//	"switch";
	public SWITCHElements getSWITCHAccess() {
		return pSWITCH;
	}
	
	public ParserRule getSWITCHRule() {
		return getSWITCHAccess().getRule();
	}
	
	////"typedef"				{ return(TYPEDEF); }
	// TYPEDEF:
	//	"typedef";
	public TYPEDEFElements getTYPEDEFAccess() {
		return pTYPEDEF;
	}
	
	public ParserRule getTYPEDEFRule() {
		return getTYPEDEFAccess().getRule();
	}
	
	////"union"					{ return(UNION); }
	// UNION:
	//	"union";
	public UNIONElements getUNIONAccess() {
		return pUNION;
	}
	
	public ParserRule getUNIONRule() {
		return getUNIONAccess().getRule();
	}
	
	////"unsigned"				{ return(UNSIGNED); }
	// UNSIGNED:
	//	"unsigned";
	public UNSIGNEDElements getUNSIGNEDAccess() {
		return pUNSIGNED;
	}
	
	public ParserRule getUNSIGNEDRule() {
		return getUNSIGNEDAccess().getRule();
	}
	
	////"void"					{ return(VOID); }
	// VOID:
	//	"void";
	public VOIDElements getVOIDAccess() {
		return pVOID;
	}
	
	public ParserRule getVOIDRule() {
		return getVOIDAccess().getRule();
	}
	
	////"volatile"				{ return(VOLATILE); }
	// VOLATILE:
	//	"volatile";
	public VOLATILEElements getVOLATILEAccess() {
		return pVOLATILE;
	}
	
	public ParserRule getVOLATILERule() {
		return getVOLATILEAccess().getRule();
	}
	
	////"while"					{ return(WHILE); }
	// WHILE:
	//	"while";
	public WHILEElements getWHILEAccess() {
		return pWHILE;
	}
	
	public ParserRule getWHILERule() {
		return getWHILEAccess().getRule();
	}
	
	////"_Alignas"                              { return ALIGNAS; }
	// ALIGNAS:
	//	"_Alignas";
	public ALIGNASElements getALIGNASAccess() {
		return pALIGNAS;
	}
	
	public ParserRule getALIGNASRule() {
		return getALIGNASAccess().getRule();
	}
	
	////"_Alignof"                              { return ALIGNOF; }
	// ALIGNOF:
	//	"_Alignof";
	public ALIGNOFElements getALIGNOFAccess() {
		return pALIGNOF;
	}
	
	public ParserRule getALIGNOFRule() {
		return getALIGNOFAccess().getRule();
	}
	
	////"_Atomic"                               { return ATOMIC; }
	// ATOMIC:
	//	"_Atomic";
	public ATOMICElements getATOMICAccess() {
		return pATOMIC;
	}
	
	public ParserRule getATOMICRule() {
		return getATOMICAccess().getRule();
	}
	
	////"_Bool"                                 { return BOOL; }
	// BOOL:
	//	"_Bool";
	public BOOLElements getBOOLAccess() {
		return pBOOL;
	}
	
	public ParserRule getBOOLRule() {
		return getBOOLAccess().getRule();
	}
	
	////"_Complex"                              { return COMPLEX; }
	// COMPLEX:
	//	"_Complex";
	public COMPLEXElements getCOMPLEXAccess() {
		return pCOMPLEX;
	}
	
	public ParserRule getCOMPLEXRule() {
		return getCOMPLEXAccess().getRule();
	}
	
	////"_Generic"                              { return GENERIC; }
	// GENERIC:
	//	"_Generic";
	public GENERICElements getGENERICAccess() {
		return pGENERIC;
	}
	
	public ParserRule getGENERICRule() {
		return getGENERICAccess().getRule();
	}
	
	////"_Imaginary"                            { return IMAGINARY; }
	// IMAGINARY:
	//	"_Imaginary";
	public IMAGINARYElements getIMAGINARYAccess() {
		return pIMAGINARY;
	}
	
	public ParserRule getIMAGINARYRule() {
		return getIMAGINARYAccess().getRule();
	}
	
	////"_Noreturn"                             { return NORETURN; }
	// NORETURN:
	//	"_Noreturn";
	public NORETURNElements getNORETURNAccess() {
		return pNORETURN;
	}
	
	public ParserRule getNORETURNRule() {
		return getNORETURNAccess().getRule();
	}
	
	////"_Static_assert"                        { return STATIC_ASSERT; }
	// STATIC_ASSERT:
	//	"_Static_assert";
	public STATIC_ASSERTElements getSTATIC_ASSERTAccess() {
		return pSTATIC_ASSERT;
	}
	
	public ParserRule getSTATIC_ASSERTRule() {
		return getSTATIC_ASSERTAccess().getRule();
	}
	
	////"_Thread_local"                         { return THREAD_LOCAL; }
	// THREAD_LOCAL:
	//	"_Thread_local";
	public THREAD_LOCALElements getTHREAD_LOCALAccess() {
		return pTHREAD_LOCAL;
	}
	
	public ParserRule getTHREAD_LOCALRule() {
		return getTHREAD_LOCALAccess().getRule();
	}
	
	////"__func__"                              { return FUNC_NAME; }
	// FUNC_NAME:
	//	"__func__";
	public FUNC_NAMEElements getFUNC_NAMEAccess() {
		return pFUNC_NAME;
	}
	
	public ParserRule getFUNC_NAMERule() {
		return getFUNC_NAMEAccess().getRule();
	}
	
	//terminal ELLIPSIS:
	//	'...';
	public TerminalRule getELLIPSISRule() {
		return tELLIPSIS;
	}
	
	//terminal OR_ASSIGN:
	//	'|=';
	public TerminalRule getOR_ASSIGNRule() {
		return tOR_ASSIGN;
	}
	
	//terminal XOR_ASSIGN:
	//	'^=';
	public TerminalRule getXOR_ASSIGNRule() {
		return tXOR_ASSIGN;
	}
	
	//terminal AND_ASSIGN:
	//	'&=';
	public TerminalRule getAND_ASSIGNRule() {
		return tAND_ASSIGN;
	}
	
	//terminal RIGHT_ASSIGN:
	//	'>>=';
	public TerminalRule getRIGHT_ASSIGNRule() {
		return tRIGHT_ASSIGN;
	}
	
	//terminal LEFT_ASSIGN:
	//	'<<=';
	public TerminalRule getLEFT_ASSIGNRule() {
		return tLEFT_ASSIGN;
	}
	
	//terminal SUB_ASSIGN:
	//	'-=';
	public TerminalRule getSUB_ASSIGNRule() {
		return tSUB_ASSIGN;
	}
	
	//terminal ADD_ASSIGN:
	//	'+=';
	public TerminalRule getADD_ASSIGNRule() {
		return tADD_ASSIGN;
	}
	
	//terminal MOD_ASSIGN:
	//	'%=';
	public TerminalRule getMOD_ASSIGNRule() {
		return tMOD_ASSIGN;
	}
	
	//terminal DIV_ASSIGN:
	//	'/=';
	public TerminalRule getDIV_ASSIGNRule() {
		return tDIV_ASSIGN;
	}
	
	//terminal MUL_ASSIGN:
	//	'*=';
	public TerminalRule getMUL_ASSIGNRule() {
		return tMUL_ASSIGN;
	}
	
	//terminal OR_OP:
	//	'||';
	public TerminalRule getOR_OPRule() {
		return tOR_OP;
	}
	
	//terminal AND_OP:
	//	'&&';
	public TerminalRule getAND_OPRule() {
		return tAND_OP;
	}
	
	//terminal NE_OP:
	//	'!=';
	public TerminalRule getNE_OPRule() {
		return tNE_OP;
	}
	
	//terminal EQ_OP:
	//	'==';
	public TerminalRule getEQ_OPRule() {
		return tEQ_OP;
	}
	
	//terminal GE_OP:
	//	'>=';
	public TerminalRule getGE_OPRule() {
		return tGE_OP;
	}
	
	//terminal LE_OP:
	//	'<=';
	public TerminalRule getLE_OPRule() {
		return tLE_OP;
	}
	
	//terminal L_OP:
	//	'<';
	public TerminalRule getL_OPRule() {
		return tL_OP;
	}
	
	//terminal G_OP:
	//	'>';
	public TerminalRule getG_OPRule() {
		return tG_OP;
	}
	
	//terminal RIGHT_OP:
	//	'>>';
	public TerminalRule getRIGHT_OPRule() {
		return tRIGHT_OP;
	}
	
	//terminal LEFT_OP:
	//	'<<';
	public TerminalRule getLEFT_OPRule() {
		return tLEFT_OP;
	}
	
	//terminal INC_OP:
	//	'++';
	public TerminalRule getINC_OPRule() {
		return tINC_OP;
	}
	
	//terminal DEC_OP:
	//	'--';
	public TerminalRule getDEC_OPRule() {
		return tDEC_OP;
	}
	
	//terminal PTR_OP:
	//	'->';
	public TerminalRule getPTR_OPRule() {
		return tPTR_OP;
	}
	
	//terminal STRING_LITERAL:
	//	SP? '"' (('^' | '\'' | '\\' | '\n') | ES)* '"' WS*+;
	public TerminalRule getSTRING_LITERALRule() {
		return tSTRING_LITERAL;
	}
	
	//terminal F_CONSTANT:
	//	D+ E FS? | D* "." D+ E? FS? | D+ "." E? FS? | HP H+ P FS? HP H* "." H+ P FS? | HP H+ "." P FS?;
	public TerminalRule getF_CONSTANTRule() {
		return tF_CONSTANT;
	}
	
	//terminal I_CONSTANT:
	//	HP H+ IS? | NZ D* IS? | "0" O* IS? | CP? "'" (('^' | '\'' | '\\' | '\n') | ES)+ "'";
	public TerminalRule getI_CONSTANTRule() {
		return tI_CONSTANT;
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
